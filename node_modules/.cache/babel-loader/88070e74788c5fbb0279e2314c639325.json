{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\BigNova-Projects\\\\BigNova-Pets Animals\\\\ClonedFromGitHub\\\\animals-pets\\\\src\\\\pages\\\\Register\\\\Components\\\\Form2\\\\From2.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Grid, TextField } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport PlacesAutocomplete from \"react-places-autocomplete\";\nimport { Field } from \"formik\";\nimport { colors } from \"../../../../themes/colors\";\nimport { useStyles } from \"../../hooks/Styles\"; // import Question from \"../../../images/Question.png\";\n\nimport FormikControl from \"../../hooks/FormikControl\";\nimport Buttons from \"./Components/Buttons\";\nimport Select from \"./Components/Select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction From2({\n  onReturn,\n  TypeLenseigne,\n  formik,\n  AddressesOption\n}) {\n  _s();\n\n  const classes = useStyles();\n  const [Error, setError] = useState(false);\n  console.log(\"errorMsg\", Error);\n  useEffect(() => {\n    if (formik.errors.Addresses && formik.touched.Addresses) {\n      setError(true);\n    }\n  }, [formik.errors.Addresses, formik.touched.Addresses]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.ContainerForm2,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: classes.inputBox,\n      children: /*#__PURE__*/_jsxDEV(Field, {\n        variant: \"outlined\",\n        required: true,\n        fullWidth: true,\n        id: \"nomentreprise\",\n        label: \"Nom de l'enseigne\",\n        name: \"nomentreprise\",\n        as: TextField,\n        error: formik.errors.nomentreprise && formik.touched.nomentreprise ? true : false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlacesAutocomplete // value={adresse}\n    // onChange={setAdresse}\n    // onSelect={handleAddressSelect}\n    , {\n      children: ({\n        getInputProps,\n        suggestions,\n        getSuggestionItemProps,\n        loading\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          variant: \"outlined\",\n          required: true,\n          fullWidth: true,\n          ...getInputProps({\n            label: \"Adresse\",\n            placeholder: \"Entrez l'adresse\"\n          }),\n          as: TextField\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Chargement...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 26\n          }, this) : null, suggestions.map((suggestion, i) => {\n            const style = {\n              backgroundColor: suggestion.active ? colors.brown : \"#fafafa\"\n            };\n            return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                style\n              }),\n              children: suggestion.description\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.inputBox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Buttons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_s(From2, \"SR96+bhLzb5ThfIjpsVL1jJwj7U=\", false, function () {\n  return [useStyles];\n});\n\n_c = From2;\nexport default From2;\n{\n  /* <Box className={classes.inputBox}>\r\n  <Select\r\n  id=\"Addresses\"\r\n  label=\"Adresses\"\r\n  name=\"Addresses\"\r\n  options={AddressesOption}\r\n  errorMsg={Error}\r\n  />\r\n  </Box> */\n} // const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: 48 * 4.5 + 8,\n//       width: 400,\n//     },\n//   },\n// };\n// <PlacesAutocomplete\n// //   value={adresse}\n// //   onChange={setAdresse}\n// //   onSelect={handleAddressSelect}\n// >\n//   {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n//     <div>\n//       <Field\n//         variant=\"outlined\"\n//         required\n//         fullWidth\n//         {...getInputProps({\n//           label: \"Adresse\",\n//           placeholder: \"Entrez l'adresse\",\n//         })}\n//         as={TextField}\n//       />\n//       <div>\n//         {loading ? <div>Chargement...</div> : null}\n//         {suggestions.map((suggestion, i) => {\n//           const style = {\n//             backgroundColor: suggestion.active ? colors.brown : \"#fafafa\",\n//           };\n//           return (\n//             <div\n//               key={i}\n//               {...getSuggestionItemProps(suggestion, { style })}\n//             >\n//               {suggestion.description}\n//             </div>\n//           );\n//         })}\n//       </div>\n//     </div>\n//   )}\n// </PlacesAutocomplete>\n\n{\n  /* <FormControl\r\n  component=\"fieldset\"\r\n  className={classes.formControl}\r\n  required={true}\r\n  >\r\n  <FormLabel\r\n  component=\"legend\"\r\n  style={{ fontWeight: \"800\", color: \"#000\" }}\r\n  >\r\n  Type de l'enseigne\r\n  </FormLabel>\r\n  <FormGroup>\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estArtisan}\r\n        //   onChange={(e) => setEstArtisan(e.target.checked)}\r\n        name=\"estArtisan\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Artisan\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMagasinSpe}\r\n        //   onChange={(e) => setEstMagasinSpe(e.target.checked)}\r\n        name=\"estMagasinSpe\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Magasin spécialisé\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMagasinGen}\r\n        //   onChange={(e) => setEstMagasinGen(e.target.checked)}\r\n        name=\"estMagasinGen\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Magasin généraliste\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estAsso}\r\n        //   onChange={(e) => setEstAsso(e.target.checked)}\r\n        name=\"estAsso\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Association\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMarque}\r\n        //   onChange={(e) => setEstMarque(e.target.checked)}\r\n        name=\"estMarque\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Marque\"\r\n  />\r\n    <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMarque}\r\n        //   onChange={(e) => setEstMarque(e.target.checked)}\r\n        name=\"MarketPlace\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"MarketPlace\"\r\n  />\r\n  </FormGroup>\r\n  </FormControl> */\n}\n{\n  /* <Select\r\n                  multiple\r\n                  value={nomsServicesCHoisis}\r\n                  onChange={handleChange}\r\n                  input={<Input id=\"select-multiple-checkbox\" />}\r\n                  renderValue={(selected) => selected.join(\", \")}\r\n                  MenuProps={MenuProps}\r\n                > */\n}\n{\n  /* {nomsServices.map((name) => (\r\n                  <MenuItem key={name} value={name}>\r\n                    <Checkbox\r\n                      checked={nomsServicesCHoisis.indexOf(name) > -1}\r\n                    />\r\n                    <ListItemText primary={name} />\r\n                  </MenuItem>\r\n                ))} */\n} // </Select>\n//\n\nvar _c;\n\n$RefreshReg$(_c, \"From2\");","map":{"version":3,"sources":["C:/Users/PC/Desktop/BigNova-Projects/BigNova-Pets Animals/ClonedFromGitHub/animals-pets/src/pages/Register/Components/Form2/From2.js"],"names":["Box","Grid","TextField","React","useEffect","useState","PlacesAutocomplete","Field","colors","useStyles","FormikControl","Buttons","Select","From2","onReturn","TypeLenseigne","formik","AddressesOption","classes","Error","setError","console","log","errors","Addresses","touched","ContainerForm2","inputBox","nomentreprise","getInputProps","suggestions","getSuggestionItemProps","loading","label","placeholder","map","suggestion","i","style","backgroundColor","active","brown","description"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC;AAED;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AACD;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACC,C,CACD;AACA","sourcesContent":["import { Box, Grid, TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PlacesAutocomplete from \"react-places-autocomplete\";\r\nimport { Field } from \"formik\";\r\nimport { colors } from \"../../../../themes/colors\";\r\nimport { useStyles } from \"../../hooks/Styles\";\r\n// import Question from \"../../../images/Question.png\";\r\nimport FormikControl from \"../../hooks/FormikControl\";\r\nimport Buttons from \"./Components/Buttons\";\r\nimport Select from \"./Components/Select\";\r\n\r\nfunction From2({ onReturn, TypeLenseigne, formik, AddressesOption }) {\r\n  const classes = useStyles();\r\n  const [Error, setError] = useState(false);\r\n  console.log(\"errorMsg\", Error);\r\n\r\n  useEffect(() => {\r\n    if (formik.errors.Addresses && formik.touched.Addresses) {\r\n      setError(true);\r\n    }\r\n  }, [formik.errors.Addresses, formik.touched.Addresses]);\r\n\r\n  return (\r\n    <Box className={classes.ContainerForm2}>\r\n      <Box className={classes.inputBox}>\r\n        <Field\r\n          variant=\"outlined\"\r\n          required\r\n          fullWidth\r\n          id=\"nomentreprise\"\r\n          label=\"Nom de l'enseigne\"\r\n          name=\"nomentreprise\"\r\n          as={TextField}\r\n          error={\r\n            formik.errors.nomentreprise && formik.touched.nomentreprise\r\n              ? true\r\n              : false\r\n          }\r\n        />\r\n      </Box>\r\n\r\n      <PlacesAutocomplete\r\n        // value={adresse}\r\n        // onChange={setAdresse}\r\n        // onSelect={handleAddressSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <div>\r\n            <Field\r\n              variant=\"outlined\"\r\n              required\r\n              fullWidth\r\n              {...getInputProps({\r\n                label: \"Adresse\",\r\n                placeholder: \"Entrez l'adresse\",\r\n              })}\r\n              as={TextField}\r\n            />\r\n            <div>\r\n              {loading ? <div>Chargement...</div> : null}\r\n\r\n              {suggestions.map((suggestion, i) => {\r\n                const style = {\r\n                  backgroundColor: suggestion.active ? colors.brown : \"#fafafa\",\r\n                };\r\n                return (\r\n                  <div\r\n                    key={i}\r\n                    {...getSuggestionItemProps(suggestion, { style })}\r\n                  >\r\n                    {suggestion.description}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </PlacesAutocomplete>\r\n      <Box className={classes.inputBox}>\r\n        {/* <FormikControl\r\n            control=\"checkbox\"\r\n            label=\"Type de l'enseigne\"\r\n            name=\"CheckkboxOption\"\r\n            options={TypeLenseigne}\r\n          /> */}\r\n      </Box>\r\n      <Buttons />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default From2;\r\n{\r\n  /* <Box className={classes.inputBox}>\r\n<Select\r\n  id=\"Addresses\"\r\n  label=\"Adresses\"\r\n  name=\"Addresses\"\r\n  options={AddressesOption}\r\n  errorMsg={Error}\r\n/>\r\n</Box> */\r\n}\r\n// const MenuProps = {\r\n//   PaperProps: {\r\n//     style: {\r\n//       maxHeight: 48 * 4.5 + 8,\r\n//       width: 400,\r\n//     },\r\n//   },\r\n// };\r\n// <PlacesAutocomplete\r\n// //   value={adresse}\r\n// //   onChange={setAdresse}\r\n// //   onSelect={handleAddressSelect}\r\n// >\r\n//   {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n//     <div>\r\n//       <Field\r\n//         variant=\"outlined\"\r\n//         required\r\n//         fullWidth\r\n//         {...getInputProps({\r\n//           label: \"Adresse\",\r\n//           placeholder: \"Entrez l'adresse\",\r\n//         })}\r\n//         as={TextField}\r\n//       />\r\n//       <div>\r\n//         {loading ? <div>Chargement...</div> : null}\r\n\r\n//         {suggestions.map((suggestion, i) => {\r\n//           const style = {\r\n//             backgroundColor: suggestion.active ? colors.brown : \"#fafafa\",\r\n//           };\r\n//           return (\r\n//             <div\r\n//               key={i}\r\n//               {...getSuggestionItemProps(suggestion, { style })}\r\n//             >\r\n//               {suggestion.description}\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//     </div>\r\n//   )}\r\n// </PlacesAutocomplete>\r\n{\r\n  /* <FormControl\r\ncomponent=\"fieldset\"\r\nclassName={classes.formControl}\r\nrequired={true}\r\n>\r\n<FormLabel\r\n  component=\"legend\"\r\n  style={{ fontWeight: \"800\", color: \"#000\" }}\r\n>\r\n  Type de l'enseigne\r\n</FormLabel>\r\n<FormGroup>\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estArtisan}\r\n        //   onChange={(e) => setEstArtisan(e.target.checked)}\r\n        name=\"estArtisan\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Artisan\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMagasinSpe}\r\n        //   onChange={(e) => setEstMagasinSpe(e.target.checked)}\r\n        name=\"estMagasinSpe\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Magasin spécialisé\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMagasinGen}\r\n        //   onChange={(e) => setEstMagasinGen(e.target.checked)}\r\n        name=\"estMagasinGen\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Magasin généraliste\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estAsso}\r\n        //   onChange={(e) => setEstAsso(e.target.checked)}\r\n        name=\"estAsso\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Association\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMarque}\r\n        //   onChange={(e) => setEstMarque(e.target.checked)}\r\n        name=\"estMarque\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Marque\"\r\n  />\r\n\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMarque}\r\n        //   onChange={(e) => setEstMarque(e.target.checked)}\r\n        name=\"MarketPlace\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"MarketPlace\"\r\n  />\r\n</FormGroup>\r\n</FormControl> */\r\n}\r\n\r\n{\r\n  /* <Select\r\n                  multiple\r\n                  value={nomsServicesCHoisis}\r\n                  onChange={handleChange}\r\n                  input={<Input id=\"select-multiple-checkbox\" />}\r\n                  renderValue={(selected) => selected.join(\", \")}\r\n                  MenuProps={MenuProps}\r\n                > */\r\n}\r\n{\r\n  /* {nomsServices.map((name) => (\r\n                  <MenuItem key={name} value={name}>\r\n                    <Checkbox\r\n                      checked={nomsServicesCHoisis.indexOf(name) > -1}\r\n                    />\r\n                    <ListItemText primary={name} />\r\n                  </MenuItem>\r\n                ))} */\r\n}\r\n// </Select>\r\n//\r\n"]},"metadata":{},"sourceType":"module"}
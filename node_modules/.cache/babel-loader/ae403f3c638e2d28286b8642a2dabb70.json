{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\BigNova-Projects\\\\BigNova-Pets Animals\\\\ClonedFromGitHub\\\\animals-pets\\\\src\\\\pages\\\\Register\\\\Components\\\\Form2\\\\Components\\\\Inputs.js\",\n    _s = $RefreshSig$();\n\nimport { Box, TextField } from '@material-ui/core';\nimport { Field } from 'formik';\nimport React from 'react';\nimport PlacesAutocomplete from 'react-places-autocomplete/dist/PlacesAutocomplete';\nimport { colors } from '../../../../../themes/colors';\nimport { useStyles } from '../../../hooks/Styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Inputs({\n  formik\n}) {\n  _s();\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.inputBox,\n    children: [/*#__PURE__*/_jsxDEV(Field, {\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true,\n      id: \"nomentreprise\",\n      label: \"Nom de l'enseigne\",\n      name: \"nomentreprise\",\n      as: TextField,\n      error: formik.errors.nomentreprise && formik.touched.nomentreprise ? true : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.inputBox,\n      children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete // value={adresse}\n      // onChange={setAdresse}\n      // onSelect={handleAddressSelect}\n      , {\n        children: ({\n          getInputProps,\n          suggestions,\n          getSuggestionItemProps,\n          loading\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            variant: \"outlined\",\n            required: true,\n            fullWidth: true,\n            id: \"Addresses\",\n            label: \"Addresses\",\n            name: \"Addresses\",\n            as: TextField,\n            error: formik.errors.Addresses && formik.touched.Addresses ? true : false // {...getInputProps({\n            //   label: \"Adresse\",\n            //   placeholder: \"Entrez l'adresse\",\n            // })}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Chargement...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 28\n            }, this) : null, suggestions.map((suggestion, i) => {\n              const style = {\n                backgroundColor: suggestion.active ? colors.brown : \"#fafafa\"\n              };\n              return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                  style\n                }),\n                children: suggestion.description\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Inputs, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = Inputs;\nexport default Inputs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Inputs\");","map":{"version":3,"sources":["C:/Users/PC/Desktop/BigNova-Projects/BigNova-Pets Animals/ClonedFromGitHub/animals-pets/src/pages/Register/Components/Form2/Components/Inputs.js"],"names":["Box","TextField","Field","React","PlacesAutocomplete","colors","useStyles","Inputs","formik","classes","inputBox","errors","nomentreprise","touched","getInputProps","suggestions","getSuggestionItemProps","loading","Addresses","map","suggestion","i","style","backgroundColor","active","brown","description"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,mBAA/B;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,mDAA/B;AACA,SAASC,MAAT,QAAuB,8BAAvB;AACA,SAASC,SAAT,QAA0B,uBAA1B;;;;AAEA,SAASC,MAAT,CAAgB;AAACC,EAAAA;AAAD,CAAhB,EAA0B;AAAA;;AACtB,QAAMC,OAAO,GAAGH,SAAS,EAAzB;AACF,sBACE,QAAC,GAAD;AAAK,IAAA,SAAS,EAAEG,OAAO,CAACC,QAAxB;AAAA,4BACA,QAAC,KAAD;AACE,MAAA,OAAO,EAAC,UADV;AAEE,MAAA,QAAQ,MAFV;AAGE,MAAA,SAAS,MAHX;AAIE,MAAA,EAAE,EAAC,eAJL;AAKE,MAAA,KAAK,EAAC,mBALR;AAME,MAAA,IAAI,EAAC,eANP;AAOE,MAAA,EAAE,EAAET,SAPN;AAQE,MAAA,KAAK,EACHO,MAAM,CAACG,MAAP,CAAcC,aAAd,IAA+BJ,MAAM,CAACK,OAAP,CAAeD,aAA9C,GACI,IADJ,GAEI;AAXR;AAAA;AAAA;AAAA;AAAA,YADA,eAeG,QAAC,GAAD;AAAK,MAAA,SAAS,EAAEH,OAAO,CAACC,QAAxB;AAAA,6BACC,QAAC,kBAAD,CACA;AACA;AACA;AAHA;AAAA,kBAKG,CAAC;AACAI,UAAAA,aADA;AAEAC,UAAAA,WAFA;AAGAC,UAAAA,sBAHA;AAIAC,UAAAA;AAJA,SAAD,kBAMC;AAAA,kCACE,QAAC,KAAD;AACE,YAAA,OAAO,EAAC,UADV;AAEE,YAAA,QAAQ,MAFV;AAGE,YAAA,SAAS,MAHX;AAIE,YAAA,EAAE,EAAC,WAJL;AAKE,YAAA,KAAK,EAAC,WALR;AAME,YAAA,IAAI,EAAC,WANP;AAOE,YAAA,EAAE,EAAEhB,SAPN;AAQE,YAAA,KAAK,EACHO,MAAM,CAACG,MAAP,CAAcO,SAAd,IAA2BV,MAAM,CAACK,OAAP,CAAeK,SAA1C,GACI,IADJ,GAEI,KAXR,CAaE;AACA;AACA;AACA;;AAhBF;AAAA;AAAA;AAAA;AAAA,kBADF,eAmBE;AAAA,uBACGD,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAH,GAA8B,IADxC,EAGGF,WAAW,CAACI,GAAZ,CAAgB,CAACC,UAAD,EAAaC,CAAb,KAAmB;AAClC,oBAAMC,KAAK,GAAG;AACZC,gBAAAA,eAAe,EAAEH,UAAU,CAACI,MAAX,GACbnB,MAAM,CAACoB,KADM,GAEb;AAHQ,eAAd;AAKA,kCACE,oBAEMT,sBAAsB,CAACI,UAAD,EAAa;AAAEE,kBAAAA;AAAF,iBAAb,CAF5B;AAAA,0BAIGF,UAAU,CAACM;AAJd,iBACOL,CADP;AAAA;AAAA;AAAA;AAAA,sBADF;AAQD,aAdA,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,kBAnBF;AAAA;AAXJ;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAfH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyED;;GA3EQd,M;UACWD,S;;;KADXC,M;AA6ET,eAAeA,MAAf","sourcesContent":["import { Box, TextField } from '@material-ui/core'\r\nimport { Field } from 'formik'\r\nimport React from 'react'\r\nimport PlacesAutocomplete from 'react-places-autocomplete/dist/PlacesAutocomplete'\r\nimport { colors } from '../../../../../themes/colors'\r\nimport { useStyles } from '../../../hooks/Styles'\r\n\r\nfunction Inputs({formik}) {\r\n    const classes = useStyles()\r\n  return (\r\n    <Box className={classes.inputBox}>\r\n    <Field\r\n      variant=\"outlined\"\r\n      required\r\n      fullWidth\r\n      id=\"nomentreprise\"\r\n      label=\"Nom de l'enseigne\"\r\n      name=\"nomentreprise\"\r\n      as={TextField}\r\n      error={\r\n        formik.errors.nomentreprise && formik.touched.nomentreprise\r\n          ? true\r\n          : false\r\n      }\r\n    />\r\n       <Box className={classes.inputBox}>\r\n        <PlacesAutocomplete\r\n        // value={adresse}\r\n        // onChange={setAdresse}\r\n        // onSelect={handleAddressSelect}\r\n        >\r\n          {({\r\n            getInputProps,\r\n            suggestions,\r\n            getSuggestionItemProps,\r\n            loading,\r\n          }) => (\r\n            <>\r\n              <Field\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"Addresses\"\r\n                label=\"Addresses\"\r\n                name=\"Addresses\"\r\n                as={TextField}\r\n                error={\r\n                  formik.errors.Addresses && formik.touched.Addresses\r\n                    ? true\r\n                    : false\r\n                }\r\n                // {...getInputProps({\r\n                //   label: \"Adresse\",\r\n                //   placeholder: \"Entrez l'adresse\",\r\n                // })}\r\n              />\r\n              <div>\r\n                {loading ? <div>Chargement...</div> : null}\r\n\r\n                {suggestions.map((suggestion, i) => {\r\n                  const style = {\r\n                    backgroundColor: suggestion.active\r\n                      ? colors.brown\r\n                      : \"#fafafa\",\r\n                  };\r\n                  return (\r\n                    <div\r\n                      key={i}\r\n                      {...getSuggestionItemProps(suggestion, { style })}\r\n                    >\r\n                      {suggestion.description}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </>\r\n          )}\r\n        </PlacesAutocomplete>\r\n      </Box>\r\n\r\n  </Box>\r\n  )\r\n}\r\n\r\nexport default Inputs"]},"metadata":{},"sourceType":"module"}
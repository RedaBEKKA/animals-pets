{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\BigNova-Projects\\\\Project - 12 - BigNova-Pets Animals-web\\\\ClonedFromGitHub\\\\animals-pets\\\\src\\\\pages\\\\Register\\\\Components\\\\Form2\\\\Components\\\\Inputs.js\",\n    _s = $RefreshSig$();\n\nimport { Box, TextField } from \"@material-ui/core\";\nimport { Field } from \"formik\";\nimport React, { useState } from \"react\";\nimport { colors } from \"../../../../../themes/colors\";\nimport { useStyles } from \"./styles\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Inputs({\n  formik\n}) {\n  _s();\n\n  const classes = useStyles();\n  const [adresse, setAdresse] = useState(\"\");\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n  console.log(\"formik\", formik);\n\n  const handleAddressSelect = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    setAdresse(value);\n    setCoordinates(latLng);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.inputBox,\n    children: [/*#__PURE__*/_jsxDEV(Field, {\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true,\n      id: \"nomentreprise\",\n      label: \"Nom de l'enseigne\",\n      name: \"nomentreprise\",\n      as: TextField,\n      className: classes.Field,\n      error: formik.errors.nomentreprise && formik.touched.nomentreprise ? true : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: adresse // onChange={setAdresse}\n        ,\n        onChange: (e, value) => formik.setFieldValue(\"city_id\", value),\n        onSelect: handleAddressSelect,\n        children: ({\n          getInputProps,\n          suggestions,\n          getSuggestionItemProps,\n          loading\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            variant: \"outlined\",\n            required: true,\n            fullWidth: true,\n            id: \"Addresses\",\n            label: \"Addresses\",\n            name: \"Addresses\",\n            as: TextField,\n            value: adresse,\n            error: formik.errors.Addresses && formik.touched.Addresses ? true : false,\n            ...getInputProps({\n              label: \"Adresse\",\n              placeholder: \"Entrez l'adresse\",\n              name: \"Addresses\"\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Chargement...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 28\n            }, this) : null, suggestions.map((suggestion, i) => {\n              const style = {\n                backgroundColor: suggestion.active ? colors.brown : \"#fafafa\"\n              };\n              return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                  style\n                }),\n                children: suggestion.description\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Inputs, \"C8YydMLscmthBWRnf/oeowXGvk4=\", false, function () {\n  return [useStyles];\n});\n\n_c = Inputs;\nexport default Inputs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Inputs\");","map":{"version":3,"sources":["C:/Users/PC/Desktop/BigNova-Projects/Project - 12 - BigNova-Pets Animals-web/ClonedFromGitHub/animals-pets/src/pages/Register/Components/Form2/Components/Inputs.js"],"names":["Box","TextField","Field","React","useState","colors","useStyles","PlacesAutocomplete","geocodeByAddress","getLatLng","Inputs","formik","classes","adresse","setAdresse","coordinates","setCoordinates","lat","lng","console","log","handleAddressSelect","value","results","latLng","inputBox","errors","nomentreprise","touched","e","setFieldValue","getInputProps","suggestions","getSuggestionItemProps","loading","Addresses","label","placeholder","name","map","suggestion","i","style","backgroundColor","active","brown","description"],"mappings":"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","sourcesContent":["import { Box, TextField } from \"@material-ui/core\";\r\nimport { Field } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { colors } from \"../../../../../themes/colors\";\r\nimport { useStyles } from \"./styles\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from \"react-places-autocomplete\";\r\n\r\nfunction Inputs({ formik }) {\r\n  const classes = useStyles();\r\n\r\n  const [adresse, setAdresse] = useState(\"\");\r\n  const [coordinates, setCoordinates] = React.useState({\r\n    lat: null,\r\n    lng: null,\r\n  });\r\n\r\n  console.log(\"formik\", formik);\r\n  const handleAddressSelect = async (value) => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n    setAdresse(value);\r\n    setCoordinates(latLng);\r\n  };\r\n  return (\r\n    <Box className={classes.inputBox}>\r\n      <Field\r\n        variant=\"outlined\"\r\n        required\r\n        fullWidth\r\n        id=\"nomentreprise\"\r\n        label=\"Nom de l'enseigne\"\r\n        name=\"nomentreprise\"\r\n        as={TextField}\r\n        className={classes.Field}\r\n        error={\r\n          formik.errors.nomentreprise && formik.touched.nomentreprise\r\n            ? true\r\n            : false\r\n        }\r\n      />\r\n\r\n      <FormControl>\r\n        <PlacesAutocomplete\r\n          value={adresse}\r\n          // onChange={setAdresse}\r\n          onChange={(e, value) => formik.setFieldValue(\"city_id\", value)}\r\n          onSelect={handleAddressSelect}\r\n        >\r\n          {({\r\n            getInputProps,\r\n            suggestions,\r\n            getSuggestionItemProps,\r\n            loading,\r\n          }) => (\r\n            <>\r\n              <Field\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"Addresses\"\r\n                label=\"Addresses\"\r\n                name=\"Addresses\"\r\n                as={TextField}\r\n                value={adresse}\r\n                error={\r\n                  formik.errors.Addresses && formik.touched.Addresses\r\n                    ? true\r\n                    : false\r\n                }\r\n                {...getInputProps({\r\n                  label: \"Adresse\",\r\n                  placeholder: \"Entrez l'adresse\",\r\n                  name: \"Addresses\",\r\n                })}\r\n              />\r\n              <div>\r\n                {loading ? <div>Chargement...</div> : null}\r\n\r\n                {suggestions.map((suggestion, i) => {\r\n                  const style = {\r\n                    backgroundColor: suggestion.active\r\n                      ? colors.brown\r\n                      : \"#fafafa\",\r\n                  };\r\n                  return (\r\n                    <div\r\n                      key={i}\r\n                      {...getSuggestionItemProps(suggestion, { style })}\r\n                    >\r\n                      {suggestion.description}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </>\r\n          )}\r\n        </PlacesAutocomplete>\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Inputs;\r\n"]},"metadata":{},"sourceType":"module"}
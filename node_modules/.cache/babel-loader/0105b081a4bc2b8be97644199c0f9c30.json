{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\BigNova-Projects\\\\Project - 12 - BigNova-Pets Animals-web\\\\ClonedFromGitHub\\\\animals-pets\\\\src\\\\pages\\\\Register\\\\Components\\\\Form2\\\\Components\\\\Inputs.js\",\n    _s = $RefreshSig$();\n\nimport { Box, TextField } from \"@material-ui/core\";\nimport { Field } from \"formik\";\nimport React, { useState } from \"react\";\nimport { colors } from \"../../../../../themes/colors\";\nimport { useStyles } from \"./styles\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Inputs({\n  formik\n}) {\n  _s();\n\n  const classes = useStyles();\n  const [adresse, setAdresse] = useState(\"\");\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n\n  const handleAddressSelect = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    setAdresse(value);\n    setCoordinates(latLng);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.inputBox,\n    children: [/*#__PURE__*/_jsxDEV(Field, {\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true,\n      id: \"nomentreprise\",\n      label: \"Nom de l'enseigne\",\n      name: \"nomentreprise\",\n      as: TextField,\n      className: classes.Field,\n      error: formik.errors.nomentreprise && formik.touched.nomentreprise ? true : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: adresse,\n      onChange: setAdresse,\n      onSelect: handleAddressSelect,\n      children: ({\n        getInputProps,\n        suggestions,\n        getSuggestionItemProps,\n        loading\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          variant: \"outlined\",\n          required: true,\n          fullWidth: true,\n          id: \"Addresses\",\n          label: \"Addresses\",\n          name: \"Addresses\",\n          as: TextField,\n          error: formik.errors.Addresses && formik.touched.Addresses ? true : false // {...getInputProps({\n          //   label: \"Adresse\",\n          //   placeholder: \"Entrez l'adresse\",\n          // })}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Chargement...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 26\n          }, this) : null, suggestions.map((suggestion, i) => {\n            const style = {\n              backgroundColor: suggestion.active ? colors.brown : \"#fafafa\"\n            };\n            return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                style\n              }),\n              children: suggestion.description\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Inputs, \"zewDL3J37SjvS+oOuYhkc60uOf4=\", false, function () {\n  return [useStyles];\n});\n\n_c = Inputs;\nexport default Inputs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Inputs\");","map":{"version":3,"sources":["C:/Users/PC/Desktop/BigNova-Projects/Project - 12 - BigNova-Pets Animals-web/ClonedFromGitHub/animals-pets/src/pages/Register/Components/Form2/Components/Inputs.js"],"names":["Box","TextField","Field","React","useState","colors","useStyles","PlacesAutocomplete","geocodeByAddress","getLatLng","Inputs","formik","classes","adresse","setAdresse","coordinates","setCoordinates","lat","lng","handleAddressSelect","value","results","latLng","inputBox","errors","nomentreprise","touched","getInputProps","suggestions","getSuggestionItemProps","loading","Addresses","map","suggestion","i","style","backgroundColor","active","brown","description"],"mappings":"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","sourcesContent":["import { Box, TextField } from \"@material-ui/core\";\r\nimport { Field } from \"formik\";\r\nimport React,{useState} from \"react\";\r\nimport { colors } from \"../../../../../themes/colors\";\r\nimport { useStyles } from \"./styles\";\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\r\n\r\nfunction Inputs({ formik }) {\r\n  const classes = useStyles();\r\n\r\n  const [adresse, setAdresse] = useState(\"\");\r\n  const [coordinates, setCoordinates] = React.useState({\r\n    lat: null,\r\n    lng: null\r\n});\r\n  const handleAddressSelect = async value => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n    setAdresse(value);\r\n    setCoordinates(latLng);\r\n};\r\n  return (\r\n    <Box className={classes.inputBox}>\r\n      <Field\r\n        variant=\"outlined\"\r\n        required\r\n        fullWidth\r\n        id=\"nomentreprise\"\r\n        label=\"Nom de l'enseigne\"\r\n        name=\"nomentreprise\"\r\n        as={TextField}\r\n        className={classes.Field}\r\n        error={\r\n          formik.errors.nomentreprise && formik.touched.nomentreprise\r\n            ? true\r\n            : false\r\n        }\r\n      />\r\n      <PlacesAutocomplete\r\n        value={adresse}\r\n        onChange={setAdresse}\r\n        onSelect={handleAddressSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <>\r\n            <Field\r\n              variant=\"outlined\"\r\n              required\r\n              fullWidth\r\n              id=\"Addresses\"\r\n              label=\"Addresses\"\r\n              name=\"Addresses\"\r\n              as={TextField}\r\n              error={\r\n                formik.errors.Addresses && formik.touched.Addresses\r\n                  ? true\r\n                  : false\r\n              }\r\n              // {...getInputProps({\r\n              //   label: \"Adresse\",\r\n              //   placeholder: \"Entrez l'adresse\",\r\n              // })}\r\n            />\r\n            <div>\r\n              {loading ? <div>Chargement...</div> : null}\r\n\r\n              {suggestions.map((suggestion, i) => {\r\n                const style = {\r\n                  backgroundColor: suggestion.active ? colors.brown : \"#fafafa\",\r\n                };\r\n                return (\r\n                  <div\r\n                    key={i}\r\n                    {...getSuggestionItemProps(suggestion, { style })}\r\n                  >\r\n                    {suggestion.description}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </>\r\n        )}\r\n      </PlacesAutocomplete>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Inputs;\r\n"]},"metadata":{},"sourceType":"module"}
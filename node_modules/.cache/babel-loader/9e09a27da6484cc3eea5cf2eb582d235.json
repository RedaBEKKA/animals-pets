{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nimport { isPlainObject } from '../utils/js_utils';\nimport { checkDecoratorArguments } from './utils';\nimport { decorateHandler } from './decorateHandler';\nimport { registerSource } from '../common/registration';\nimport { DragSourceMonitorImpl } from '../common/DragSourceMonitorImpl';\nimport { SourceConnector } from '../common/SourceConnector';\nimport { isValidType } from '../utils/isValidType';\nimport { createSourceFactory } from './createSourceFactory';\n/**\r\n * Decorates a component as a dragsource\r\n * @param type The dragsource type\r\n * @param spec The drag source specification\r\n * @param collect The props collector function\r\n * @param options DnD options\r\n */\n\nexport function DragSource(type, spec, collect) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  checkDecoratorArguments('DragSource', 'type, spec, collect[, options]', type, spec, collect, options);\n  var getType = type;\n\n  if (typeof type !== 'function') {\n    invariant(isValidType(type), 'Expected \"type\" provided as the first argument to DragSource to be ' + 'a string, or a function that returns a string given the current props. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', type);\n\n    getType = function getType() {\n      return type;\n    };\n  }\n\n  invariant(isPlainObject(spec), 'Expected \"spec\" provided as the second argument to DragSource to be ' + 'a plain object. Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', spec);\n  var createSource = createSourceFactory(spec);\n  invariant(typeof collect === 'function', 'Expected \"collect\" provided as the third argument to DragSource to be ' + 'a function that returns a plain object of props to inject. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', collect);\n  invariant(isPlainObject(options), 'Expected \"options\" provided as the fourth argument to DragSource to be ' + 'a plain object when specified. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', collect);\n  return function decorateSource(DecoratedComponent) {\n    return decorateHandler({\n      containerDisplayName: 'DragSource',\n      createHandler: createSource,\n      registerHandler: registerSource,\n      createConnector: function createConnector(backend) {\n        return new SourceConnector(backend);\n      },\n      createMonitor: function createMonitor(manager) {\n        return new DragSourceMonitorImpl(manager);\n      },\n      DecoratedComponent: DecoratedComponent,\n      getType: getType,\n      collect: collect,\n      options: options\n    });\n  };\n}","map":{"version":3,"sources":["D:/All - Projects/PROJECTS - Gitkraken/Project-12 - BigNova PetsAnimals/animals-pets/node_modules/react-dnd/dist/esm/decorators/DragSource.js"],"names":["invariant","isPlainObject","checkDecoratorArguments","decorateHandler","registerSource","DragSourceMonitorImpl","SourceConnector","isValidType","createSourceFactory","DragSource","type","spec","collect","options","arguments","length","undefined","getType","createSource","decorateSource","DecoratedComponent","containerDisplayName","createHandler","registerHandler","createConnector","backend","createMonitor","manager"],"mappings":"AAAA,SAASA,SAAT,QAA0B,sBAA1B;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,uBAAT,QAAwC,SAAxC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,qBAAT,QAAsC,iCAAtC;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,OAAhC,EAAyC;AAC9C,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACAZ,EAAAA,uBAAuB,CAAC,YAAD,EAAe,gCAAf,EAAiDQ,IAAjD,EAAuDC,IAAvD,EAA6DC,OAA7D,EAAsEC,OAAtE,CAAvB;AACA,MAAII,OAAO,GAAGP,IAAd;;AAEA,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9BV,IAAAA,SAAS,CAACO,WAAW,CAACG,IAAD,CAAZ,EAAoB,wEAAwE,yEAAxE,GAAoJ,wBAApJ,GAA+K,sEAAnM,EAA2QA,IAA3Q,CAAT;;AAEAO,IAAAA,OAAO,GAAG,SAASA,OAAT,GAAmB;AAC3B,aAAOP,IAAP;AACD,KAFD;AAGD;;AAEDV,EAAAA,SAAS,CAACC,aAAa,CAACU,IAAD,CAAd,EAAsB,yEAAyE,wCAAzE,GAAoH,sEAA1I,EAAkNA,IAAlN,CAAT;AACA,MAAIO,YAAY,GAAGV,mBAAmB,CAACG,IAAD,CAAtC;AACAX,EAAAA,SAAS,CAAC,OAAOY,OAAP,KAAmB,UAApB,EAAgC,2EAA2E,6DAA3E,GAA2I,wBAA3I,GAAsK,sEAAtM,EAA8QA,OAA9Q,CAAT;AACAZ,EAAAA,SAAS,CAACC,aAAa,CAACY,OAAD,CAAd,EAAyB,4EAA4E,iCAA5E,GAAgH,wBAAhH,GAA2I,sEAApK,EAA4OD,OAA5O,CAAT;AACA,SAAO,SAASO,cAAT,CAAwBC,kBAAxB,EAA4C;AACjD,WAAOjB,eAAe,CAAC;AACrBkB,MAAAA,oBAAoB,EAAE,YADD;AAErBC,MAAAA,aAAa,EAAEJ,YAFM;AAGrBK,MAAAA,eAAe,EAAEnB,cAHI;AAIrBoB,MAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AACjD,eAAO,IAAInB,eAAJ,CAAoBmB,OAApB,CAAP;AACD,OANoB;AAOrBC,MAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,OAAvB,EAAgC;AAC7C,eAAO,IAAItB,qBAAJ,CAA0BsB,OAA1B,CAAP;AACD,OAToB;AAUrBP,MAAAA,kBAAkB,EAAEA,kBAVC;AAWrBH,MAAAA,OAAO,EAAEA,OAXY;AAYrBL,MAAAA,OAAO,EAAEA,OAZY;AAarBC,MAAAA,OAAO,EAAEA;AAbY,KAAD,CAAtB;AAeD,GAhBD;AAiBD","sourcesContent":["import { invariant } from '@react-dnd/invariant';\r\nimport { isPlainObject } from '../utils/js_utils';\r\nimport { checkDecoratorArguments } from './utils';\r\nimport { decorateHandler } from './decorateHandler';\r\nimport { registerSource } from '../common/registration';\r\nimport { DragSourceMonitorImpl } from '../common/DragSourceMonitorImpl';\r\nimport { SourceConnector } from '../common/SourceConnector';\r\nimport { isValidType } from '../utils/isValidType';\r\nimport { createSourceFactory } from './createSourceFactory';\r\n/**\r\n * Decorates a component as a dragsource\r\n * @param type The dragsource type\r\n * @param spec The drag source specification\r\n * @param collect The props collector function\r\n * @param options DnD options\r\n */\r\n\r\nexport function DragSource(type, spec, collect) {\r\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\r\n  checkDecoratorArguments('DragSource', 'type, spec, collect[, options]', type, spec, collect, options);\r\n  var getType = type;\r\n\r\n  if (typeof type !== 'function') {\r\n    invariant(isValidType(type), 'Expected \"type\" provided as the first argument to DragSource to be ' + 'a string, or a function that returns a string given the current props. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', type);\r\n\r\n    getType = function getType() {\r\n      return type;\r\n    };\r\n  }\r\n\r\n  invariant(isPlainObject(spec), 'Expected \"spec\" provided as the second argument to DragSource to be ' + 'a plain object. Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', spec);\r\n  var createSource = createSourceFactory(spec);\r\n  invariant(typeof collect === 'function', 'Expected \"collect\" provided as the third argument to DragSource to be ' + 'a function that returns a plain object of props to inject. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', collect);\r\n  invariant(isPlainObject(options), 'Expected \"options\" provided as the fourth argument to DragSource to be ' + 'a plain object when specified. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', collect);\r\n  return function decorateSource(DecoratedComponent) {\r\n    return decorateHandler({\r\n      containerDisplayName: 'DragSource',\r\n      createHandler: createSource,\r\n      registerHandler: registerSource,\r\n      createConnector: function createConnector(backend) {\r\n        return new SourceConnector(backend);\r\n      },\r\n      createMonitor: function createMonitor(manager) {\r\n        return new DragSourceMonitorImpl(manager);\r\n      },\r\n      DecoratedComponent: DecoratedComponent,\r\n      getType: getType,\r\n      collect: collect,\r\n      options: options\r\n    });\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}
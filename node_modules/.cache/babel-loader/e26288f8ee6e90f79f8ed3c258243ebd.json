{"ast":null,"code":"var _jsxFileName = \"D:\\\\All - Projects\\\\PROJECTS - Gitkraken\\\\Project-12 - BigNova PetsAnimals\\\\animals-pets\\\\src\\\\pages\\\\Register\\\\Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport logo from \"../../images/logo.svg\";\nimport { useStyles } from \"./hooks/Styles\";\nimport FormRegister from \"./Components/FormRegister\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Register() {\n  _s();\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    component: \"main\",\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: false,\n      sm: 6,\n      md: 6,\n      className: classes.image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 6,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.paper,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"Logo Mister Coocky\",\n            width: 160,\n            src: logo,\n            style: {\n              height: \"15vh\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormRegister, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n} // const nomsServices = [\"Cession d'animaux(don, échange, vente)\"];\n// import { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\n// import misterCoockyApi from \"../../constante/apiUrl\";\n\n_s(Register, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = Register;\n{\n  /* <form className={classes.form} onSubmit={handleSubmit}>\r\n            {getFormContent()}\r\n          </form> */\n} // case 2:\n//     return <div style={{ marginTop: '50px' }} >\n//         <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass1\"\n//             id=\"password1\" label=\"Mot de passe\" onChange={e => setPassword1(e.target.value)}\n//             value={password1} />\n//         <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass2\"\n//             id=\"password2\" label=\"Valider le mot de passe\"\n//             onChange={e => setPassword2(e.target.value)} value={password2} />\n//         {alert ? <Alert severity=\"error\">{alert}</Alert> : <></>}\n//         <Box mt={10}>\n//             <Grid container spacing={10} justify=\"space-around\">\n//                 <Button variant=\"contained\" style={{ backgroundColor: colors.red }} className={classes.btn}\n//                     onClick={() => (setPageId(pageId - 1))}>\n//                     Précédent\n//                 </Button>\n//                 <Button type=\"submit\" variant=\"contained\" style={{ backgroundColor: colors.brown }}\n//                     className={classes.btn}>\n//                     S'inscrire\n//                 </Button>\n//             </Grid>\n//         </Box>\n//     </div>\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: 48 * 4.5 + 8,\n//       width: 400,\n//     },\n//   },\n// };\n// const handleChange = (event) => {\n//   setNomsServicesCHoisis(event.target.value);\n// };\n// /**\n//  *  Envoi du formulaire d'inscription\n//  */\n// function sendForm() {\n//   let typesOrga = [];\n//   if (estArtisan === true) {\n//     typesOrga.push(\"Artisan\");\n//   }\n//   if (estMagasinSpe === true) {\n//     typesOrga.push(\"Magasin spécialisé\");\n//   }\n//   if (estMagasinGen === true) {\n//     typesOrga.push(\"Magasin généraliste\");\n//   }\n//   if (estAsso === true) {\n//     typesOrga.push(\"Association\");\n//   }\n//   if (estMarque === true) {\n//     typesOrga.push(\"Marque\");\n//   }\n//   let typeOffre = [];\n//   if (estAlim === true) {\n//     typeOffre.push(\"Alimentation\");\n//   }\n//   if (estAccess === true) {\n//     typeOffre.push(\"Accessoire\");\n//   }\n//   typeOffre = typeOffre.concat(nomsServicesCHoisis);\n//   fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({\n//       query: `\n//                   mutation($organization: OrganizationInput!, $adress:AdressInput!, $user:UserIntput!){\n//                       registerUserPro( organization: $organization,  adress:$adress, user:$user)\n//                       {​​​​​​\n//                           id\n//                           organization{\n//                               id\n//                               supplier{\n//                                   id\n//                               }\n//                           }\n//                       }​​​​​​​\n//                   }`,\n//       variables: {\n//         organization: {\n//           name: companyName,\n//           orgas: typesOrga,\n//           offers: typeOffre,\n//         },\n//         adress: {\n//           street: adresse,\n//           geoLocation: {\n//             latitude: coordinates.lat,\n//             longitude: coordinates.lng,\n//           },\n//         },\n//         user: {\n//           name: nom + \" \" + prenom,\n//           email: email,\n//           phone: phone,\n//           password: password1,\n//         },\n//       },\n//     }),\n//   })\n//     .then((res) => res.json())\n//     .then(function (result) {\n//       if (result.data.registerUserPro !== []) {\n//         localStorage.setItem(\"userId\", result.data.registerUserPro.id);\n//         localStorage.setItem(\n//           \"organizationId\",\n//           result.data.registerUserPro.organization.id\n//         );\n//         localStorage.setItem(\n//           \"supplierId\",\n//           result.data.registerUserPro.organization.supplier.id\n//         );\n//         window.location.href = \"/home\";\n//       }\n//     });\n//   return {\n//     nom: nom,\n//     prenom: prenom,\n//     email: email,\n//     phone: phone,\n//     companyName: companyName,\n//     estArtisan: estArtisan,\n//     estMagasinSpe: estMagasinSpe,\n//     estMagasinGen: estMagasinGen,\n//     estAsso: estAsso,\n//     estMarque: estMarque,\n//     estAlim: estAlim,\n//     estAccess: estAccess,\n//     estCession: estCession,\n//     password: password1,\n//     adresse: adresse,\n//     coordinates: coordinates,\n//   };\n// }\n// /**\n//  * Lors de la sélectoin d'une adresse\n//  * @param value\n//  * @returns {Promise<void>}\n//  */\n// const handleAddressSelect = async (value) => {\n//   const results = await geocodeByAddress(value);\n//   const latLng = await getLatLng(results[0]);\n//   setAdresse(value);\n//   setCoordinates(latLng);\n//   setValidAdresse(true);\n// };\n// /**\n//  * Gestion des pages du formulaire d'inscription et envoi du formulaire\n//  * @param event\n//  */\n// function handleSubmit(event) {\n//   event.preventDefault();\n//   let tmpPage = pageId;\n//   switch (tmpPage) {\n//     case 0: //page 0→1\n//       // fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\n//       //     method: 'POST',\n//       //     headers: {\n//       //         'Content-Type': 'application/json',\n//       //     },\n//       //     body: JSON.stringify({\n//       //         query: `\n//       //     query{​​​​​​​\n//       //         getMail(mail:\"${email}\"){​​​​​​​\n//       //             id\n//       //         }​​​​​​​\n//       //     }`,\n//       //     }),\n//       // })\n//       //     .then((res) => res.json())\n//       //     .then(function (result) {\n//       //         if (result.data.getMail !== null) {\n//       //             setAlertMail(\"email déjà utilisé!\");\n//       //         } else {\n//       //             setPageId(tmpPage + 1);\n//       //         }\n//       //     });\n//       if (password1 === password2 && password1.length >= 5) {\n//         // sendForm()\n//         setPageId(tmpPage + 1);\n//       } else if (password1.length < 5) {\n//         setAlert(\"La longueur des mots de passe doit excéder 5 caractères\");\n//       } else if (password1 !== password2) {\n//         setAlert(\"Mots de passe différents.\");\n//       }\n//       break;\n//       setPageId(tmpPage + 1);\n//       break;\n//     case 1: //page 1→2\n//       setSubmited(true);\n//       if (validAdresse === true) {\n//         fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             query: `\n//                   query{​​​​​​​\n//                       existsOrganizationByName(name:\"${companyName}\")​​​​​​​\n//                   }`,\n//           }),\n//         })\n//           .then((res) => res.json())\n//           .then(function (result) {\n//             if (result.data.existsOrganizationByName === false) {\n//               setPageId(tmpPage + 1);\n//             } else {\n//               setAlertOrganization(\"Nom d'organisation déjà utilisé!\");\n//             }\n//           });\n//       }\n//       break;\n//     // case 2: //envoi formulaire\n//     //     if (password1 === password2 && password1.length >= 5) {   //envoi du formulaire d'inscription\n//     //         sendForm()\n//     //     } else if (password1.length < 5) {\n//     //         setAlert(\"La longueur des mots de passe doit excéder 5 caractères\")\n//     //     } else if (password1 !== password2) {\n//     //         setAlert(\"Mots de passe différents.\")\n//     //     }\n//     //     break;\n//     default:\n//       break;\n//   }\n// }\n// const [pageId, setPageId] = useState(0); //numéro de page du formulaire d'inscription (0,1,2)\n// const [alert, setAlert] = useState(\"\"); //message d'alerte au niveau du mot de passe\n// const [alertMail, setAlertMail] = useState(\"\"); //message d'alerte au niveau de l'adresse mail\n// const [alertOrganization, setAlertOrganization] = useState(\"\"); //message d'alerte au niveau de l'organisation\n// const [nom, setNom] = useState(\"\"); //champs première page\n// const [prenom, setPrenom] = useState(\"\");\n// const [email, setEmail] = useState(\"\");\n// const [phone, setPhone] = useState(\"\");\n// const [companyName, setCompanyName] = useState(\"\"); //champs seconde page\n// const [estArtisan, setEstArtisan] = useState(false);\n// const [estMagasinSpe, setEstMagasinSpe] = useState(false);\n// const [estMagasinGen, setEstMagasinGen] = useState(false);\n// const [estAsso, setEstAsso] = useState(false);\n// const [estMarque, setEstMarque] = useState(false);\n// const [estAlim, setEstAlim] = useState(false);\n// const [estAccess, setEstAccess] = useState(false);\n// const [estCession, setEstCession] = useState(false);\n// const [nomsServicesCHoisis, setNomsServicesCHoisis] = useState([]);\n// const [password1, setPassword1] = useState(\"\"); //champs troisième page\n// const [password2, setPassword2] = useState(\"\");\n// const [adresse, setAdresse] = React.useState(\"\");\n// const [validAdresse, setValidAdresse] = useState(false);\n// const [submited, setSubmited] = useState(false);\n// const [coordinates, setCoordinates] = React.useState({\n//   lat: null,\n//   lng: null,\n// });\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["D:/All - Projects/PROJECTS - Gitkraken/Project-12 - BigNova PetsAnimals/animals-pets/src/pages/Register/Register.js"],"names":["React","useState","CssBaseline","Grid","useStyles","FormRegister","Register","classes","root","image","paper","logo","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;;AAEA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AACjC,QAAMC,OAAO,GAAGH,SAAS,EAAzB;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,SAAS,EAAC,MAA1B;AAAiC,IAAA,SAAS,EAAEG,OAAO,CAACC,IAApD;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,KAAf;AAAsB,MAAA,EAAE,EAAE,CAA1B;AAA6B,MAAA,EAAE,EAAE,CAAjC;AAAoC,MAAA,SAAS,EAAED,OAAO,CAACE;AAAvD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAA0B,MAAA,EAAE,EAAE,CAA9B;AAAA,6BACE;AAAK,QAAA,SAAS,EAAEF,OAAO,CAACG,KAAxB;AAAA,gCACE,QAAC,IAAD;AAAA,iCACE;AAAK,YAAA,GAAG,EAAC,oBAAT;AAA8B,YAAA,KAAK,EAAE,GAArC;AAA0C,YAAA,GAAG,EAAEC,IAA/C;AAAqD,YAAA,KAAK,EAAE;AAACC,cAAAA,MAAM,EAAC;AAAR;AAA5D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,C,CAqBD;AAEA;AACA;;GAzCwBN,Q;UACNF,S;;;KADME,Q;AA2CxB;AACE;AACF;AACA;AACC,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport logo from \"../../images/logo.svg\";\r\nimport { useStyles } from \"./hooks/Styles\";\r\nimport FormRegister from \"./Components/FormRegister\";\r\n\r\nexport default function Register() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <CssBaseline />\r\n      <Grid item xs={false} sm={6} md={6} className={classes.image} />\r\n      <Grid item xs={12} sm={6} md={6}>\r\n        <div className={classes.paper}>\r\n          <Grid>\r\n            <img alt=\"Logo Mister Coocky\" width={160} src={logo} style={{height:\"15vh\"}} />\r\n          </Grid>\r\n          <FormRegister />\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const nomsServices = [\"Cession d'animaux(don, échange, vente)\"];\r\n\r\n// import { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\r\n// import misterCoockyApi from \"../../constante/apiUrl\";\r\n\r\n{\r\n  /* <form className={classes.form} onSubmit={handleSubmit}>\r\n            {getFormContent()}\r\n          </form> */\r\n}\r\n\r\n// case 2:\r\n//     return <div style={{ marginTop: '50px' }} >\r\n//         <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass1\"\r\n//             id=\"password1\" label=\"Mot de passe\" onChange={e => setPassword1(e.target.value)}\r\n//             value={password1} />\r\n//         <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass2\"\r\n//             id=\"password2\" label=\"Valider le mot de passe\"\r\n//             onChange={e => setPassword2(e.target.value)} value={password2} />\r\n//         {alert ? <Alert severity=\"error\">{alert}</Alert> : <></>}\r\n//         <Box mt={10}>\r\n//             <Grid container spacing={10} justify=\"space-around\">\r\n//                 <Button variant=\"contained\" style={{ backgroundColor: colors.red }} className={classes.btn}\r\n//                     onClick={() => (setPageId(pageId - 1))}>\r\n//                     Précédent\r\n//                 </Button>\r\n//                 <Button type=\"submit\" variant=\"contained\" style={{ backgroundColor: colors.brown }}\r\n//                     className={classes.btn}>\r\n//                     S'inscrire\r\n//                 </Button>\r\n//             </Grid>\r\n//         </Box>\r\n//     </div>\r\n\r\n\r\n\r\n  // const MenuProps = {\r\n  //   PaperProps: {\r\n  //     style: {\r\n  //       maxHeight: 48 * 4.5 + 8,\r\n  //       width: 400,\r\n  //     },\r\n  //   },\r\n  // };\r\n\r\n  // const handleChange = (event) => {\r\n  //   setNomsServicesCHoisis(event.target.value);\r\n  // };\r\n\r\n  // /**\r\n  //  *  Envoi du formulaire d'inscription\r\n  //  */\r\n  // function sendForm() {\r\n  //   let typesOrga = [];\r\n  //   if (estArtisan === true) {\r\n  //     typesOrga.push(\"Artisan\");\r\n  //   }\r\n  //   if (estMagasinSpe === true) {\r\n  //     typesOrga.push(\"Magasin spécialisé\");\r\n  //   }\r\n  //   if (estMagasinGen === true) {\r\n  //     typesOrga.push(\"Magasin généraliste\");\r\n  //   }\r\n  //   if (estAsso === true) {\r\n  //     typesOrga.push(\"Association\");\r\n  //   }\r\n  //   if (estMarque === true) {\r\n  //     typesOrga.push(\"Marque\");\r\n  //   }\r\n  //   let typeOffre = [];\r\n  //   if (estAlim === true) {\r\n  //     typeOffre.push(\"Alimentation\");\r\n  //   }\r\n  //   if (estAccess === true) {\r\n  //     typeOffre.push(\"Accessoire\");\r\n  //   }\r\n  //   typeOffre = typeOffre.concat(nomsServicesCHoisis);\r\n  //   fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n  //     method: \"POST\",\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //     },\r\n  //     body: JSON.stringify({\r\n  //       query: `\r\n  //                   mutation($organization: OrganizationInput!, $adress:AdressInput!, $user:UserIntput!){\r\n  //                       registerUserPro( organization: $organization,  adress:$adress, user:$user)\r\n  //                       {​​​​​​\r\n  //                           id\r\n  //                           organization{\r\n  //                               id\r\n  //                               supplier{\r\n  //                                   id\r\n  //                               }\r\n  //                           }\r\n  //                       }​​​​​​​\r\n  //                   }`,\r\n  //       variables: {\r\n  //         organization: {\r\n  //           name: companyName,\r\n  //           orgas: typesOrga,\r\n  //           offers: typeOffre,\r\n  //         },\r\n  //         adress: {\r\n  //           street: adresse,\r\n  //           geoLocation: {\r\n  //             latitude: coordinates.lat,\r\n  //             longitude: coordinates.lng,\r\n  //           },\r\n  //         },\r\n  //         user: {\r\n  //           name: nom + \" \" + prenom,\r\n  //           email: email,\r\n  //           phone: phone,\r\n  //           password: password1,\r\n  //         },\r\n  //       },\r\n  //     }),\r\n  //   })\r\n  //     .then((res) => res.json())\r\n  //     .then(function (result) {\r\n  //       if (result.data.registerUserPro !== []) {\r\n  //         localStorage.setItem(\"userId\", result.data.registerUserPro.id);\r\n  //         localStorage.setItem(\r\n  //           \"organizationId\",\r\n  //           result.data.registerUserPro.organization.id\r\n  //         );\r\n  //         localStorage.setItem(\r\n  //           \"supplierId\",\r\n  //           result.data.registerUserPro.organization.supplier.id\r\n  //         );\r\n\r\n  //         window.location.href = \"/home\";\r\n  //       }\r\n  //     });\r\n  //   return {\r\n  //     nom: nom,\r\n  //     prenom: prenom,\r\n  //     email: email,\r\n  //     phone: phone,\r\n  //     companyName: companyName,\r\n  //     estArtisan: estArtisan,\r\n  //     estMagasinSpe: estMagasinSpe,\r\n  //     estMagasinGen: estMagasinGen,\r\n  //     estAsso: estAsso,\r\n  //     estMarque: estMarque,\r\n  //     estAlim: estAlim,\r\n  //     estAccess: estAccess,\r\n  //     estCession: estCession,\r\n  //     password: password1,\r\n  //     adresse: adresse,\r\n  //     coordinates: coordinates,\r\n  //   };\r\n  // }\r\n\r\n  // /**\r\n  //  * Lors de la sélectoin d'une adresse\r\n  //  * @param value\r\n  //  * @returns {Promise<void>}\r\n  //  */\r\n  // const handleAddressSelect = async (value) => {\r\n  //   const results = await geocodeByAddress(value);\r\n  //   const latLng = await getLatLng(results[0]);\r\n  //   setAdresse(value);\r\n  //   setCoordinates(latLng);\r\n  //   setValidAdresse(true);\r\n  // };\r\n\r\n  // /**\r\n  //  * Gestion des pages du formulaire d'inscription et envoi du formulaire\r\n  //  * @param event\r\n  //  */\r\n  // function handleSubmit(event) {\r\n  //   event.preventDefault();\r\n  //   let tmpPage = pageId;\r\n  //   switch (tmpPage) {\r\n  //     case 0: //page 0→1\r\n  //       // fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n  //       //     method: 'POST',\r\n  //       //     headers: {\r\n  //       //         'Content-Type': 'application/json',\r\n  //       //     },\r\n  //       //     body: JSON.stringify({\r\n  //       //         query: `\r\n  //       //     query{​​​​​​​\r\n  //       //         getMail(mail:\"${email}\"){​​​​​​​\r\n  //       //             id\r\n  //       //         }​​​​​​​\r\n  //       //     }`,\r\n  //       //     }),\r\n  //       // })\r\n  //       //     .then((res) => res.json())\r\n  //       //     .then(function (result) {\r\n  //       //         if (result.data.getMail !== null) {\r\n  //       //             setAlertMail(\"email déjà utilisé!\");\r\n  //       //         } else {\r\n  //       //             setPageId(tmpPage + 1);\r\n  //       //         }\r\n  //       //     });\r\n  //       if (password1 === password2 && password1.length >= 5) {\r\n  //         // sendForm()\r\n  //         setPageId(tmpPage + 1);\r\n  //       } else if (password1.length < 5) {\r\n  //         setAlert(\"La longueur des mots de passe doit excéder 5 caractères\");\r\n  //       } else if (password1 !== password2) {\r\n  //         setAlert(\"Mots de passe différents.\");\r\n  //       }\r\n  //       break;\r\n  //       setPageId(tmpPage + 1);\r\n  //       break;\r\n  //     case 1: //page 1→2\r\n  //       setSubmited(true);\r\n  //       if (validAdresse === true) {\r\n  //         fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n  //           method: \"POST\",\r\n  //           headers: {\r\n  //             \"Content-Type\": \"application/json\",\r\n  //           },\r\n  //           body: JSON.stringify({\r\n  //             query: `\r\n  //                   query{​​​​​​​\r\n  //                       existsOrganizationByName(name:\"${companyName}\")​​​​​​​\r\n  //                   }`,\r\n  //           }),\r\n  //         })\r\n  //           .then((res) => res.json())\r\n  //           .then(function (result) {\r\n  //             if (result.data.existsOrganizationByName === false) {\r\n  //               setPageId(tmpPage + 1);\r\n  //             } else {\r\n  //               setAlertOrganization(\"Nom d'organisation déjà utilisé!\");\r\n  //             }\r\n  //           });\r\n  //       }\r\n  //       break;\r\n  //     // case 2: //envoi formulaire\r\n  //     //     if (password1 === password2 && password1.length >= 5) {   //envoi du formulaire d'inscription\r\n  //     //         sendForm()\r\n  //     //     } else if (password1.length < 5) {\r\n  //     //         setAlert(\"La longueur des mots de passe doit excéder 5 caractères\")\r\n  //     //     } else if (password1 !== password2) {\r\n  //     //         setAlert(\"Mots de passe différents.\")\r\n  //     //     }\r\n  //     //     break;\r\n  //     default:\r\n  //       break;\r\n  //   }\r\n  // }\r\n  // const [pageId, setPageId] = useState(0); //numéro de page du formulaire d'inscription (0,1,2)\r\n  // const [alert, setAlert] = useState(\"\"); //message d'alerte au niveau du mot de passe\r\n  // const [alertMail, setAlertMail] = useState(\"\"); //message d'alerte au niveau de l'adresse mail\r\n  // const [alertOrganization, setAlertOrganization] = useState(\"\"); //message d'alerte au niveau de l'organisation\r\n\r\n  // const [nom, setNom] = useState(\"\"); //champs première page\r\n  // const [prenom, setPrenom] = useState(\"\");\r\n  // const [email, setEmail] = useState(\"\");\r\n  // const [phone, setPhone] = useState(\"\");\r\n\r\n  // const [companyName, setCompanyName] = useState(\"\"); //champs seconde page\r\n  // const [estArtisan, setEstArtisan] = useState(false);\r\n  // const [estMagasinSpe, setEstMagasinSpe] = useState(false);\r\n  // const [estMagasinGen, setEstMagasinGen] = useState(false);\r\n  // const [estAsso, setEstAsso] = useState(false);\r\n  // const [estMarque, setEstMarque] = useState(false);\r\n  // const [estAlim, setEstAlim] = useState(false);\r\n  // const [estAccess, setEstAccess] = useState(false);\r\n  // const [estCession, setEstCession] = useState(false);\r\n  // const [nomsServicesCHoisis, setNomsServicesCHoisis] = useState([]);\r\n\r\n  // const [password1, setPassword1] = useState(\"\"); //champs troisième page\r\n  // const [password2, setPassword2] = useState(\"\");\r\n  // const [adresse, setAdresse] = React.useState(\"\");\r\n  // const [validAdresse, setValidAdresse] = useState(false);\r\n  // const [submited, setSubmited] = useState(false);\r\n  // const [coordinates, setCoordinates] = React.useState({\r\n  //   lat: null,\r\n  //   lng: null,\r\n  // });"]},"metadata":{},"sourceType":"module"}
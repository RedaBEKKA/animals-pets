{"ast":null,"code":"var _jsxFileName = \"D:\\\\All - Projects\\\\PROJECTS - Gitkraken\\\\Project-12 - BigNova PetsAnimals\\\\animals-pets\\\\src\\\\pages\\\\Register\\\\Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport parrot from '../../images/parrot.png';\nimport { colors } from \"../../themes/colors\";\nimport Box from \"@material-ui/core/Box\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { Alert } from '@material-ui/lab';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport misterCoockyApi from '../../constante/apiUrl';\nimport Select from \"@material-ui/core/Select\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport logo from \"../../images/logo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst nomsServices = ['Cession d\\'animaux(don, échange, vente)'];\nconst useStyles = makeStyles(theme => ({\n  MenuProps: {\n    PaperProps: {\n      style: {\n        maxHeight: 300,\n        maxWidth: 50\n      }\n    },\n    // Show dropdow at bottom of select\n    getContentAnchorEl: null,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    }\n  },\n  root: {\n    height: '100vh'\n  },\n  image: {\n    backgroundImage: `url(${parrot})`,\n    backgroundRepeat: 'no-repeat',\n    backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center'\n  },\n  paper: {\n    margin: theme.spacing(5, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  form: {\n    width: '90%',\n    marginTop: \"0px\"\n  },\n  btn: {\n    padding: theme.spacing(1),\n    color: \"#000\",\n    width: '30%'\n  },\n  formText: {\n    width: '45%'\n  },\n  formControl: {\n    width: 200,\n    margin: theme.spacing(3)\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  chip: {\n    margin: 2\n  },\n  noLabel: {\n    marginTop: theme.spacing(3)\n  }\n}));\nexport default function Register() {\n  _s();\n\n  const classes = useStyles();\n  const [pageId, setPageId] = useState(0); //numéro de page du formulaire d'inscription (0,1,2)\n\n  const [alert, setAlert] = useState(\"\"); //message d'alerte au niveau du mot de passe\n\n  const [alertMail, setAlertMail] = useState(\"\"); //message d'alerte au niveau de l'adresse mail\n\n  const [alertOrganization, setAlertOrganization] = useState(\"\"); //message d'alerte au niveau de l'organisation\n\n  const [nom, setNom] = useState(\"\"); //champs première page\n\n  const [prenom, setPrenom] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [companyName, setCompanyName] = useState(\"\"); //champs seconde page\n\n  const [estArtisan, setEstArtisan] = useState(false);\n  const [estMagasinSpe, setEstMagasinSpe] = useState(false);\n  const [estMagasinGen, setEstMagasinGen] = useState(false);\n  const [estAsso, setEstAsso] = useState(false);\n  const [estMarque, setEstMarque] = useState(false);\n  const [estAlim, setEstAlim] = useState(false);\n  const [estAccess, setEstAccess] = useState(false);\n  const [estCession, setEstCession] = useState(false);\n  const [nomsServicesCHoisis, setNomsServicesCHoisis] = useState([]);\n  const [password1, setPassword1] = useState(\"\"); //champs troisième page\n\n  const [password2, setPassword2] = useState(\"\");\n  const [adresse, setAdresse] = React.useState(\"\");\n  const [validAdresse, setValidAdresse] = useState(false);\n  const [submited, setSubmited] = useState(false);\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: 48 * 4.5 + 8,\n        width: 400\n      }\n    }\n  };\n\n  const handleChange = event => {\n    setNomsServicesCHoisis(event.target.value);\n  };\n  /**\r\n   *  Envoi du formulaire d'inscription\r\n   */\n\n\n  function sendForm() {\n    let typesOrga = [];\n\n    if (estArtisan === true) {\n      typesOrga.push(\"Artisan\");\n    }\n\n    if (estMagasinSpe === true) {\n      typesOrga.push(\"Magasin spécialisé\");\n    }\n\n    if (estMagasinGen === true) {\n      typesOrga.push(\"Magasin généraliste\");\n    }\n\n    if (estAsso === true) {\n      typesOrga.push(\"Association\");\n    }\n\n    if (estMarque === true) {\n      typesOrga.push(\"Marque\");\n    }\n\n    let typeOffre = [];\n\n    if (estAlim === true) {\n      typeOffre.push(\"Alimentation\");\n    }\n\n    if (estAccess === true) {\n      typeOffre.push(\"Accessoire\");\n    }\n\n    typeOffre = typeOffre.concat(nomsServicesCHoisis);\n    fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `\n                    mutation($organization: OrganizationInput!, $adress:AdressInput!, $user:UserIntput!){\n                        registerUserPro( organization: $organization,  adress:$adress, user:$user)\n                        {​​​​​​\n                            id\n                            organization{\n                                id\n                                supplier{\n                                    id\n                                }\n                            }\n                        }​​​​​​​\n                    }`,\n        variables: {\n          \"organization\": {\n            \"name\": companyName,\n            \"orgas\": typesOrga,\n            \"offers\": typeOffre\n          },\n          \"adress\": {\n            \"street\": adresse,\n            \"geoLocation\": {\n              \"latitude\": coordinates.lat,\n              \"longitude\": coordinates.lng\n            }\n          },\n          \"user\": {\n            \"name\": nom + \" \" + prenom,\n            \"email\": email,\n            \"phone\": phone,\n            \"password\": password1\n          }\n        }\n      })\n    }).then(res => res.json()).then(function (result) {\n      if (result.data.registerUserPro !== []) {\n        localStorage.setItem('userId', result.data.registerUserPro.id);\n        localStorage.setItem('organizationId', result.data.registerUserPro.organization.id);\n        localStorage.setItem('supplierId', result.data.registerUserPro.organization.supplier.id);\n        window.location.href = '/home';\n      }\n    });\n    return {\n      nom: nom,\n      prenom: prenom,\n      email: email,\n      phone: phone,\n      companyName: companyName,\n      estArtisan: estArtisan,\n      estMagasinSpe: estMagasinSpe,\n      estMagasinGen: estMagasinGen,\n      estAsso: estAsso,\n      estMarque: estMarque,\n      estAlim: estAlim,\n      estAccess: estAccess,\n      estCession: estCession,\n      password: password1,\n      adresse: adresse,\n      coordinates: coordinates\n    };\n  }\n  /**\r\n   * Lors de la sélectoin d'une adresse\r\n   * @param value\r\n   * @returns {Promise<void>}\r\n   */\n\n\n  const handleAddressSelect = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    setAdresse(value);\n    setCoordinates(latLng);\n    setValidAdresse(true);\n  };\n  /**\r\n   * Gestion des pages du formulaire d'inscription et envoi du formulaire\r\n   * @param event\r\n   */\n\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    let tmpPage = pageId;\n\n    switch (tmpPage) {\n      case 0:\n        //page 0→1\n        // fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\n        //     method: 'POST',\n        //     headers: {\n        //         'Content-Type': 'application/json',\n        //     },\n        //     body: JSON.stringify({\n        //         query: `\n        //     query{​​​​​​​\n        //         getMail(mail:\"${email}\"){​​​​​​​\n        //             id\n        //         }​​​​​​​\n        //     }`,\n        //     }),\n        // })\n        //     .then((res) => res.json())\n        //     .then(function (result) {\n        //         if (result.data.getMail !== null) {\n        //             setAlertMail(\"email déjà utilisé!\");\n        //         } else {\n        //             setPageId(tmpPage + 1);\n        //         }\n        //     });\n        setPageId(tmpPage + 1);\n        break;\n\n      case 1:\n        //page 1→2\n        setSubmited(true);\n\n        if (validAdresse === true) {\n          fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              query: `\n                    query{​​​​​​​\n                        existsOrganizationByName(name:\"${companyName}\")​​​​​​​\n                    }`\n            })\n          }).then(res => res.json()).then(function (result) {\n            if (result.data.existsOrganizationByName === false) {\n              setPageId(tmpPage + 1);\n            } else {\n              setAlertOrganization(\"Nom d'organisation déjà utilisé!\");\n            }\n          });\n        }\n\n        break;\n\n      case 2:\n        //envoi formulaire\n        if (password1 === password2 && password1.length >= 5) {\n          //envoi du formulaire d'inscription\n          sendForm();\n        } else if (password1.length < 5) {\n          setAlert(\"La longueur des mots de passe doit excéder 5 caractères\");\n        } else if (password1 !== password2) {\n          setAlert(\"Mots de passe différents.\");\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }\n  /**\r\n   * Récupération du contenu de page selon le numéro de page\r\n   * page 0 : nom,prénom...\r\n   * page 1 : organisation\r\n   * page 2 : mot de passe\r\n   * @returns {*}\r\n   */\n\n\n  function getFormContent() {\n    switch (pageId) {\n      case 0:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '50px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"outlined\",\n              required: true,\n              name: \"nom\",\n              label: \"Nom\",\n              type: \"text\",\n              id: \"nom\",\n              className: classes.formText,\n              onChange: e => setNom(e.target.value),\n              value: nom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"outlined\",\n              required: true,\n              name: \"prenom\",\n              label: \"Pr\\xE9nom\",\n              type: \"text\",\n              id: \"prenom\",\n              className: classes.formText,\n              onChange: e => setPrenom(e.target.value),\n              value: prenom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"email\",\n            label: \"Email\",\n            type: \"email\",\n            name: \"email\",\n            onChange: e => setEmail(e.target.value),\n            value: email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"phone\",\n            label: \"T\\xE9l\\xE9phone\",\n            type: \"tel\",\n            name: \"phone\",\n            onChange: e => setPhone(e.target.value),\n            value: phone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 21\n          }, this), alertMail ? /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: alertMail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 34\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            type: \"password\",\n            name: \"pass1\",\n            id: \"password1\",\n            label: \"Mot de passe\",\n            onChange: e => setPassword1(e.target.value),\n            value: password1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            type: \"password\",\n            name: \"pass2\",\n            id: \"password2\",\n            label: \"Valider le mot de passe\",\n            onChange: e => setPassword2(e.target.value),\n            value: password2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 21\n          }, this), alert ? /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: alert\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 30\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 10,\n            style: {\n              backgroundColor: \"#ccc\",\n              width: '92%'\n            },\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 10,\n              justify: \"flex-end\",\n              mr: 15,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: e => handleSubmit(e),\n                variant: \"contained\",\n                style: {\n                  backgroundColor: colors.red\n                },\n                className: classes.btn,\n                children: \"Suivant >\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 24\n        }, this);\n\n      case 1:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            mb: 2,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"outlined\",\n              required: true,\n              fullWidth: true,\n              id: \"enseigne\",\n              label: \"Nom de l'enseigne\",\n              name: \"enseigne\",\n              value: companyName,\n              onChange: e => setCompanyName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n            value: adresse,\n            onChange: setAdresse,\n            onSelect: handleAddressSelect,\n            children: ({\n              getInputProps,\n              suggestions,\n              getSuggestionItemProps,\n              loading\n            }) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                variant: \"outlined\",\n                required: true,\n                fullWidth: true,\n                ...getInputProps({\n                  label: \"Adresse\",\n                  placeholder: \"Entrez l'adresse\"\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"Chargement...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 48\n                }, this) : null, suggestions.map((suggestion, i) => {\n                  const style = {\n                    backgroundColor: suggestion.active ? colors.brown : \"#fafafa\"\n                  };\n                  return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                      style\n                    }),\n                    children: suggestion.description\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 388,\n                    columnNumber: 45\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              item: true,\n              xs: 12,\n              sm: 6,\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                component: \"fieldset\",\n                className: classes.formControl,\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  component: \"legend\",\n                  children: \"Type de l'enseigne\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estArtisan,\n                      onChange: e => setEstArtisan(e.target.checked),\n                      name: \"estArtisan\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 404,\n                      columnNumber: 50\n                    }, this),\n                    label: \"Artisan\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 403,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estMagasinSpe,\n                      onChange: e => setEstMagasinSpe(e.target.checked),\n                      name: \"estMagasinSpe\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 410,\n                      columnNumber: 50\n                    }, this),\n                    label: \"Magasin sp\\xE9cialis\\xE9\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 409,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estMagasinGen,\n                      onChange: e => setEstMagasinGen(e.target.checked),\n                      name: \"estMagasinGen\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 416,\n                      columnNumber: 50\n                    }, this),\n                    label: \"Magasin g\\xE9n\\xE9raliste\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 415,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estAsso,\n                      onChange: e => setEstAsso(e.target.checked),\n                      name: \"estAsso\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 422,\n                      columnNumber: 50\n                    }, this),\n                    label: \"Association\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 421,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estMarque,\n                      onChange: e => setEstMarque(e.target.checked),\n                      name: \"estMarque\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 428,\n                      columnNumber: 50\n                    }, this),\n                    label: \"Marque\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 427,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 401,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                required: true,\n                component: \"fieldset\",\n                className: classes.formControl,\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  component: \"legend\",\n                  children: \"Type de l'offre\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 438,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estAlim,\n                      onChange: e => setEstAlim(e.target.checked),\n                      name: \"Alimentation\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 441,\n                      columnNumber: 50\n                    }, this),\n                    label: \"Alimentation\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 440,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estAccess,\n                      onChange: e => setEstAccess(e.target.checked),\n                      name: \"Accessoire\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 447,\n                      columnNumber: 50\n                    }, this),\n                    label: \"Accessoire\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 446,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                    children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                      children: \"Services\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 453,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(Select, {\n                      multiple: true,\n                      value: nomsServicesCHoisis,\n                      onChange: handleChange,\n                      input: /*#__PURE__*/_jsxDEV(Input, {\n                        id: \"select-multiple-checkbox\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 458,\n                        columnNumber: 52\n                      }, this),\n                      renderValue: selected => selected.join(\", \"),\n                      MenuProps: MenuProps,\n                      children: nomsServices.map(name => /*#__PURE__*/_jsxDEV(MenuItem, {\n                        value: name,\n                        children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                          checked: nomsServicesCHoisis.indexOf(name) > -1\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 464,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                          primary: name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 465,\n                          columnNumber: 53\n                        }, this)]\n                      }, name, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 463,\n                        columnNumber: 49\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 454,\n                      columnNumber: 41\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 452,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 439,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 21\n          }, this), alertOrganization ? /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: alertOrganization\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 42\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), validAdresse === false && submited === true ? /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: \"Adresse non compl\\xE9t\\xE9e\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 10,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 10,\n              justify: \"space-around\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                style: {\n                  backgroundColor: colors.red\n                },\n                className: classes.btn,\n                onClick: () => setPageId(pageId - 1),\n                children: \"Pr\\xE9c\\xE9dent\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                style: {\n                  backgroundColor: colors.red\n                },\n                className: classes.btn,\n                children: \"Suivant >\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true);\n      // case 2:\n      //     return <div style={{ marginTop: '50px' }} >\n      //         <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass1\"\n      //             id=\"password1\" label=\"Mot de passe\" onChange={e => setPassword1(e.target.value)}\n      //             value={password1} />\n      //         <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass2\"\n      //             id=\"password2\" label=\"Valider le mot de passe\"\n      //             onChange={e => setPassword2(e.target.value)} value={password2} />\n      //         {alert ? <Alert severity=\"error\">{alert}</Alert> : <></>}\n      //         <Box mt={10}>\n      //             <Grid container spacing={10} justify=\"space-around\">\n      //                 <Button variant=\"contained\" style={{ backgroundColor: colors.red }} className={classes.btn}\n      //                     onClick={() => (setPageId(pageId - 1))}>\n      //                     Précédent\n      //                 </Button>\n      //                 <Button type=\"submit\" variant=\"contained\" style={{ backgroundColor: colors.brown }}\n      //                     className={classes.btn}>\n      //                     S'inscrire\n      //                 </Button>\n      //             </Grid>\n      //         </Box>\n      //     </div>\n\n      default:\n        break;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    component: \"main\",\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: false,\n      sm: 6,\n      md: 6,\n      className: classes.image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 6,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.paper,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"Logo Mister Coocky\",\n            width: 120,\n            src: logo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.form,\n          onSubmit: handleSubmit,\n          children: getFormContent()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 520,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Register, \"sv2OUp6uKgHI8IxJl8bWfaQCjmg=\", false, function () {\n  return [useStyles];\n});\n\n_c = Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["D:/All - Projects/PROJECTS - Gitkraken/Project-12 - BigNova PetsAnimals/animals-pets/src/pages/Register/Register.js"],"names":["React","useState","Button","CssBaseline","TextField","Grid","parrot","colors","Box","Checkbox","FormControlLabel","Alert","FormControl","FormGroup","FormLabel","PlacesAutocomplete","geocodeByAddress","getLatLng","misterCoockyApi","Select","Input","InputLabel","MenuItem","makeStyles","ListItemText","nomsServices","useStyles","theme","MenuProps","PaperProps","style","maxHeight","maxWidth","getContentAnchorEl","anchorOrigin","vertical","horizontal","root","height","image","backgroundImage","backgroundRepeat","backgroundColor","palette","type","grey","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","form","width","marginTop","btn","padding","color","formText","formControl","chips","flexWrap","chip","noLabel","Register","classes","pageId","setPageId","alert","setAlert","alertMail","setAlertMail","alertOrganization","setAlertOrganization","nom","setNom","prenom","setPrenom","email","setEmail","phone","setPhone","companyName","setCompanyName","estArtisan","setEstArtisan","estMagasinSpe","setEstMagasinSpe","estMagasinGen","setEstMagasinGen","estAsso","setEstAsso","estMarque","setEstMarque","estAlim","setEstAlim","estAccess","setEstAccess","estCession","setEstCession","nomsServicesCHoisis","setNomsServicesCHoisis","password1","setPassword1","password2","setPassword2","adresse","setAdresse","validAdresse","setValidAdresse","submited","setSubmited","coordinates","setCoordinates","lat","lng","handleChange","event","target","value","sendForm","typesOrga","push","typeOffre","concat","fetch","method","headers","body","JSON","stringify","query","variables","then","res","json","result","data","registerUserPro","localStorage","setItem","id","organization","supplier","window","location","href","password","handleAddressSelect","results","latLng","handleSubmit","preventDefault","tmpPage","existsOrganizationByName","length","getFormContent","e","red","getInputProps","suggestions","getSuggestionItemProps","loading","label","placeholder","map","suggestion","i","active","brown","description","checked","selected","join","name","indexOf","logo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport parrot from '../../images/parrot.png'\r\nimport { colors } from \"../../themes/colors\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport { Alert } from '@material-ui/lab';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\r\nimport misterCoockyApi from '../../constante/apiUrl'\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport logo from \"../../images/logo.svg\"\r\n\r\nconst nomsServices = ['Cession d\\'animaux(don, échange, vente)'];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    MenuProps: {\r\n        PaperProps: {\r\n            style: {\r\n                maxHeight: 300,\r\n                maxWidth: 50\r\n            }\r\n        },\r\n        // Show dropdow at bottom of select\r\n        getContentAnchorEl: null,\r\n        anchorOrigin: {\r\n            vertical: \"bottom\",\r\n            horizontal: \"left\"\r\n        }\r\n    },\r\n    root: {\r\n        height: '100vh',\r\n    },\r\n    image: {\r\n        backgroundImage: `url(${parrot})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor:\r\n            theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(5, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        width: '90%',\r\n        marginTop: \"0px\"\r\n    },\r\n    btn: {\r\n        padding: theme.spacing(1),\r\n        color: \"#000\",\r\n        width: '30%',\r\n    },\r\n    formText: {\r\n        width: '45%'\r\n    },\r\n    formControl: {\r\n        width: 200,\r\n        margin: theme.spacing(3),\r\n    },\r\n    chips: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    chip: {\r\n        margin: 2,\r\n    },\r\n    noLabel: {\r\n        marginTop: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nexport default function Register() {\r\n    const classes = useStyles();\r\n    const [pageId, setPageId] = useState(0);    //numéro de page du formulaire d'inscription (0,1,2)\r\n    const [alert, setAlert] = useState(\"\");    //message d'alerte au niveau du mot de passe\r\n    const [alertMail, setAlertMail] = useState(\"\");    //message d'alerte au niveau de l'adresse mail\r\n    const [alertOrganization, setAlertOrganization] = useState(\"\");    //message d'alerte au niveau de l'organisation\r\n\r\n    const [nom, setNom] = useState(\"\"); //champs première page\r\n    const [prenom, setPrenom] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [phone, setPhone] = useState(\"\");\r\n\r\n    const [companyName, setCompanyName] = useState(\"\"); //champs seconde page\r\n    const [estArtisan, setEstArtisan] = useState(false);\r\n    const [estMagasinSpe, setEstMagasinSpe] = useState(false);\r\n    const [estMagasinGen, setEstMagasinGen] = useState(false);\r\n    const [estAsso, setEstAsso] = useState(false);\r\n    const [estMarque, setEstMarque] = useState(false);\r\n    const [estAlim, setEstAlim] = useState(false);\r\n    const [estAccess, setEstAccess] = useState(false);\r\n    const [estCession, setEstCession] = useState(false);\r\n    const [nomsServicesCHoisis, setNomsServicesCHoisis] = useState([]);\r\n\r\n    const [password1, setPassword1] = useState(\"\"); //champs troisième page\r\n    const [password2, setPassword2] = useState(\"\");\r\n    const [adresse, setAdresse] = React.useState(\"\");\r\n    const [validAdresse, setValidAdresse] = useState(false);\r\n    const [submited, setSubmited] = useState(false);\r\n    const [coordinates, setCoordinates] = React.useState({\r\n        lat: null,\r\n        lng: null\r\n    });\r\n\r\n    const MenuProps = {\r\n        PaperProps: {\r\n            style: {\r\n                maxHeight: 48 * 4.5 + 8,\r\n                width: 400,\r\n            },\r\n        },\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setNomsServicesCHoisis(event.target.value);\r\n    };\r\n\r\n    /**\r\n     *  Envoi du formulaire d'inscription\r\n     */\r\n    function sendForm() {\r\n        let typesOrga = [];\r\n        if (estArtisan === true) {\r\n            typesOrga.push(\"Artisan\")\r\n        }\r\n        if (estMagasinSpe === true) {\r\n            typesOrga.push(\"Magasin spécialisé\")\r\n        }\r\n        if (estMagasinGen === true) {\r\n            typesOrga.push(\"Magasin généraliste\")\r\n        }\r\n        if (estAsso === true) {\r\n            typesOrga.push(\"Association\")\r\n        }\r\n        if (estMarque === true) {\r\n            typesOrga.push(\"Marque\")\r\n        }\r\n        let typeOffre = [];\r\n        if (estAlim === true) {\r\n            typeOffre.push(\"Alimentation\")\r\n        }\r\n        if (estAccess === true) {\r\n            typeOffre.push(\"Accessoire\")\r\n        }\r\n        typeOffre = typeOffre.concat(nomsServicesCHoisis);\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    mutation($organization: OrganizationInput!, $adress:AdressInput!, $user:UserIntput!){\r\n                        registerUserPro( organization: $organization,  adress:$adress, user:$user)\r\n                        {​​​​​​\r\n                            id\r\n                            organization{\r\n                                id\r\n                                supplier{\r\n                                    id\r\n                                }\r\n                            }\r\n                        }​​​​​​​\r\n                    }`,\r\n                variables: {\r\n                    \"organization\": {\r\n                        \"name\": companyName,\r\n                        \"orgas\": typesOrga,\r\n                        \"offers\": typeOffre\r\n                    },\r\n                    \"adress\": {\r\n                        \"street\": adresse,\r\n                        \"geoLocation\": {\r\n                            \"latitude\": coordinates.lat,\r\n                            \"longitude\": coordinates.lng\r\n                        }\r\n                    },\r\n                    \"user\": {\r\n                        \"name\": nom + \" \" + prenom,\r\n                        \"email\": email,\r\n                        \"phone\": phone,\r\n                        \"password\": password1\r\n                    }\r\n                },\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                if (result.data.registerUserPro !== []) {\r\n                    localStorage.setItem('userId', result.data.registerUserPro.id);\r\n                    localStorage.setItem('organizationId', result.data.registerUserPro.organization.id);\r\n                    localStorage.setItem('supplierId', result.data.registerUserPro.organization.supplier.id);\r\n\r\n                    window.location.href = '/home';\r\n\r\n                }\r\n            });\r\n        return {\r\n            nom: nom,\r\n            prenom: prenom,\r\n            email: email,\r\n            phone: phone,\r\n            companyName: companyName,\r\n            estArtisan: estArtisan,\r\n            estMagasinSpe: estMagasinSpe,\r\n            estMagasinGen: estMagasinGen,\r\n            estAsso: estAsso,\r\n            estMarque: estMarque,\r\n            estAlim: estAlim,\r\n            estAccess: estAccess,\r\n            estCession: estCession,\r\n            password: password1,\r\n            adresse: adresse,\r\n            coordinates: coordinates,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Lors de la sélectoin d'une adresse\r\n     * @param value\r\n     * @returns {Promise<void>}\r\n     */\r\n    const handleAddressSelect = async value => {\r\n        const results = await geocodeByAddress(value);\r\n        const latLng = await getLatLng(results[0]);\r\n        setAdresse(value);\r\n        setCoordinates(latLng);\r\n        setValidAdresse(true)\r\n    };\r\n\r\n    /**\r\n     * Gestion des pages du formulaire d'inscription et envoi du formulaire\r\n     * @param event\r\n     */\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        let tmpPage = pageId;\r\n        switch (tmpPage) {\r\n            case 0: //page 0→1\r\n                // fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                //     method: 'POST',\r\n                //     headers: {\r\n                //         'Content-Type': 'application/json',\r\n                //     },\r\n                //     body: JSON.stringify({\r\n                //         query: `\r\n                //     query{​​​​​​​\r\n                //         getMail(mail:\"${email}\"){​​​​​​​\r\n                //             id\r\n                //         }​​​​​​​\r\n                //     }`,\r\n                //     }),\r\n                // })\r\n                //     .then((res) => res.json())\r\n                //     .then(function (result) {\r\n                //         if (result.data.getMail !== null) {\r\n                //             setAlertMail(\"email déjà utilisé!\");\r\n                //         } else {\r\n                //             setPageId(tmpPage + 1);\r\n                //         }\r\n                //     });\r\n                setPageId(tmpPage + 1);\r\n                break;\r\n            case 1: //page 1→2\r\n                setSubmited(true);\r\n                if (validAdresse === true) {\r\n                    fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({\r\n                            query: `\r\n                    query{​​​​​​​\r\n                        existsOrganizationByName(name:\"${companyName}\")​​​​​​​\r\n                    }`,\r\n                        }),\r\n                    })\r\n                        .then((res) => res.json())\r\n                        .then(function (result) {\r\n                            if (result.data.existsOrganizationByName === false) {\r\n                                setPageId(tmpPage + 1);\r\n                            } else {\r\n                                setAlertOrganization(\"Nom d'organisation déjà utilisé!\");\r\n                            }\r\n                        });\r\n                }\r\n                break;\r\n            case 2: //envoi formulaire\r\n                if (password1 === password2 && password1.length >= 5) {   //envoi du formulaire d'inscription\r\n                    sendForm()\r\n                } else if (password1.length < 5) {\r\n                    setAlert(\"La longueur des mots de passe doit excéder 5 caractères\")\r\n                } else if (password1 !== password2) {\r\n                    setAlert(\"Mots de passe différents.\")\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Récupération du contenu de page selon le numéro de page\r\n     * page 0 : nom,prénom...\r\n     * page 1 : organisation\r\n     * page 2 : mot de passe\r\n     * @returns {*}\r\n     */\r\n    function getFormContent() {\r\n        switch (pageId) {\r\n            case 0:\r\n                return <div style={{ marginTop: '50px' }} >\r\n                    <Grid container justify=\"space-between\">\r\n                        <TextField variant=\"outlined\" required name=\"nom\" label=\"Nom\" type=\"text\" id=\"nom\"\r\n                            className={classes.formText} onChange={e => setNom(e.target.value)} value={nom} />\r\n                        <TextField variant=\"outlined\" required name=\"prenom\" label=\"Prénom\" type=\"text\" id=\"prenom\"\r\n                            className={classes.formText} onChange={e => setPrenom(e.target.value)}\r\n                            value={prenom} />\r\n                    </Grid>\r\n                    <TextField variant=\"outlined\" margin=\"normal\" required fullWidth id=\"email\" label=\"Email\"\r\n                        type=\"email\"\r\n                        name=\"email\" onChange={e => setEmail(e.target.value)} value={email} />\r\n                    <TextField variant=\"outlined\" margin=\"normal\" required fullWidth id=\"phone\"\r\n                        label=\"Téléphone\" type=\"tel\" name=\"phone\"\r\n                        onChange={e => setPhone(e.target.value)} value={phone} />\r\n                    {alertMail ? <Alert severity=\"error\">{alertMail}</Alert> : <></>}\r\n                    <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass1\"\r\n                        id=\"password1\" label=\"Mot de passe\" onChange={e => setPassword1(e.target.value)}\r\n                        value={password1} />\r\n                    <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass2\"\r\n                        id=\"password2\" label=\"Valider le mot de passe\"\r\n                        onChange={e => setPassword2(e.target.value)} value={password2} />\r\n                    {alert ? <Alert severity=\"error\">{alert}</Alert> : <></>}\r\n\r\n\r\n\r\n                    <Box mt={10} style={{backgroundColor: \"#ccc\",width:'92%'}}>\r\n                        <Grid container spacing={10} justify=\"flex-end\" mr={15} >\r\n                            <Button onClick={(e) => handleSubmit(e)} variant=\"contained\"\r\n                                style={{ backgroundColor: colors.red }} className={classes.btn}>\r\n                                Suivant &gt;\r\n                            </Button>\r\n                        </Grid>\r\n                    </Box>\r\n                </ div >;\r\n            case 1:\r\n                return <>\r\n                    <Box mb={2}>\r\n                        <TextField variant=\"outlined\" required fullWidth id=\"enseigne\" label=\"Nom de l'enseigne\"\r\n                            name=\"enseigne\" value={companyName} onChange={e => setCompanyName(e.target.value)} />\r\n                    </Box>\r\n                    <PlacesAutocomplete\r\n                        value={adresse}\r\n                        onChange={setAdresse}\r\n                        onSelect={handleAddressSelect}\r\n                    >\r\n                        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n                            <div>\r\n                                <TextField variant=\"outlined\" required fullWidth {...getInputProps({\r\n                                    label: \"Adresse\",\r\n                                    placeholder: \"Entrez l'adresse\"\r\n                                })} />\r\n                                <div>\r\n                                    {loading ? <div>Chargement...</div> : null}\r\n\r\n                                    {suggestions.map((suggestion, i) => {\r\n                                        const style = {\r\n                                            backgroundColor: suggestion.active ? colors.brown : \"#fafafa\"\r\n                                        };\r\n                                        return (\r\n                                            <div key={i} {...getSuggestionItemProps(suggestion, { style })}>\r\n                                                {suggestion.description}\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </PlacesAutocomplete>\r\n                    <Grid container>\r\n                        <Grid container item xs={12} sm={6} md={6}>\r\n                            <FormControl component=\"fieldset\" className={classes.formControl} required={true}>\r\n                                <FormLabel component=\"legend\">Type de l'enseigne</FormLabel>\r\n                                <FormGroup>\r\n\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox checked={estArtisan}\r\n                                            onChange={e => (setEstArtisan(e.target.checked))}\r\n                                            name=\"estArtisan\" color=\"default\" />}\r\n                                        label=\"Artisan\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox checked={estMagasinSpe}\r\n                                            onChange={e => (setEstMagasinSpe(e.target.checked))}\r\n                                            name=\"estMagasinSpe\" color=\"default\" />}\r\n                                        label=\"Magasin spécialisé\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox checked={estMagasinGen}\r\n                                            onChange={e => (setEstMagasinGen(e.target.checked))}\r\n                                            name=\"estMagasinGen\" color=\"default\" />}\r\n                                        label=\"Magasin généraliste\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox checked={estAsso}\r\n                                            onChange={e => (setEstAsso(e.target.checked))} name=\"estAsso\"\r\n                                            color=\"default\" />}\r\n                                        label=\"Association\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox checked={estMarque}\r\n                                            onChange={e => (setEstMarque(e.target.checked))}\r\n                                            name=\"estMarque\" color=\"default\" />}\r\n                                        label=\"Marque\"\r\n                                    />\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={6}>\r\n                            <FormControl required component=\"fieldset\" className={classes.formControl}>\r\n                                <FormLabel component=\"legend\">Type de l'offre</FormLabel>\r\n                                <FormGroup>\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox checked={estAlim}\r\n                                            onChange={e => (setEstAlim(e.target.checked))}\r\n                                            name=\"Alimentation\" color=\"default\" />}\r\n                                        label=\"Alimentation\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox checked={estAccess}\r\n                                            onChange={e => (setEstAccess(e.target.checked))}\r\n                                            name=\"Accessoire\" color=\"default\" />}\r\n                                        label=\"Accessoire\"\r\n                                    />\r\n                                    <FormControl >\r\n                                        <InputLabel>Services</InputLabel>\r\n                                        <Select\r\n                                            multiple\r\n                                            value={nomsServicesCHoisis}\r\n                                            onChange={handleChange}\r\n                                            input={<Input id=\"select-multiple-checkbox\" />}\r\n                                            renderValue={selected => selected.join(\", \")}\r\n                                            MenuProps={MenuProps}\r\n                                        >\r\n                                            {nomsServices.map((name) => (\r\n                                                <MenuItem key={name} value={name}>\r\n                                                    <Checkbox checked={nomsServicesCHoisis.indexOf(name) > -1} />\r\n                                                    <ListItemText primary={name} />\r\n                                                </MenuItem>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n                    {alertOrganization ? <Alert severity=\"error\">{alertOrganization}</Alert> : <></>}\r\n                    {\r\n                        validAdresse === false && submited === true ?\r\n                            <Alert severity=\"error\" >Adresse non complétée</Alert> : <></>\r\n                    }\r\n                    <Box mt={10}>\r\n                        <Grid container spacing={10} justify=\"space-around\">\r\n                            <Button variant=\"contained\" style={{ backgroundColor: colors.red }} className={classes.btn}\r\n                                onClick={() => (setPageId(pageId - 1))}>\r\n                                Précédent\r\n                            </Button>\r\n                            <Button type=\"submit\" variant=\"contained\" style={{ backgroundColor: colors.red }}\r\n                                className={classes.btn}>\r\n                                Suivant &gt;\r\n                            </Button>\r\n                        </Grid>\r\n                    </Box>\r\n                </>;\r\n            // case 2:\r\n            //     return <div style={{ marginTop: '50px' }} >\r\n            //         <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass1\"\r\n            //             id=\"password1\" label=\"Mot de passe\" onChange={e => setPassword1(e.target.value)}\r\n            //             value={password1} />\r\n            //         <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass2\"\r\n            //             id=\"password2\" label=\"Valider le mot de passe\"\r\n            //             onChange={e => setPassword2(e.target.value)} value={password2} />\r\n            //         {alert ? <Alert severity=\"error\">{alert}</Alert> : <></>}\r\n            //         <Box mt={10}>\r\n            //             <Grid container spacing={10} justify=\"space-around\">\r\n            //                 <Button variant=\"contained\" style={{ backgroundColor: colors.red }} className={classes.btn}\r\n            //                     onClick={() => (setPageId(pageId - 1))}>\r\n            //                     Précédent\r\n            //                 </Button>\r\n            //                 <Button type=\"submit\" variant=\"contained\" style={{ backgroundColor: colors.brown }}\r\n            //                     className={classes.btn}>\r\n            //                     S'inscrire\r\n            //                 </Button>\r\n            //             </Grid>\r\n            //         </Box>\r\n            //     </div>\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid container component=\"main\" className={classes.root}>\r\n            <CssBaseline />\r\n            <Grid item xs={false} sm={6} md={6} className={classes.image} />\r\n            <Grid item xs={12} sm={6} md={6}>\r\n                <div className={classes.paper}>\r\n                    <Grid>\r\n                        <img alt=\"Logo Mister Coocky\" width={120} src={logo} />\r\n                    </Grid>\r\n                    <form className={classes.form} onSubmit={handleSubmit}>\r\n                        {getFormContent()}\r\n                    </form>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\BigNova-Projects\\\\BigNova-Pets Animals\\\\ClonedFromGitHub\\\\animals-pets\\\\src\\\\pages\\\\Register\\\\Components\\\\Form2\\\\From2.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Grid, TextField } from \"@material-ui/core\";\nimport React from \"react\";\nimport PlacesAutocomplete from \"react-places-autocomplete\";\nimport { Field } from \"formik\";\nimport { colors } from \"../../../../themes/colors\";\nimport { useStyles } from \"../../hooks/Styles\"; // import Question from \"../../../images/Question.png\";\n\nimport FormikControl from \"../../hooks/FormikControl\";\nimport Buttons from \"./Components/Buttons\";\nimport Select from \"./Components/Select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction From2({\n  onReturn,\n  TypeLenseigne,\n  formik,\n  Addresses\n}) {\n  _s();\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.ContainerForm2,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: classes.inputBox,\n      children: /*#__PURE__*/_jsxDEV(Field, {\n        variant: \"outlined\",\n        required: true,\n        fullWidth: true,\n        id: \"nomentreprise\",\n        label: \"Nom de l'enseigne\",\n        name: \"nomentreprise\",\n        as: TextField,\n        error: formik.errors.nomentreprise && formik.touched.nomentreprise ? true : false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.inputBox,\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        id: \"Addresses\",\n        label: \"Adresses\",\n        name: \"Addresses\",\n        options: Addresses,\n        errorMsg: formik.errors.Addresses && formik.touched.Addresses ? true : false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.inputBox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Buttons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n_s(From2, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = From2;\nexport default From2; // const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: 48 * 4.5 + 8,\n//       width: 400,\n//     },\n//   },\n// };\n// <PlacesAutocomplete\n// //   value={adresse}\n// //   onChange={setAdresse}\n// //   onSelect={handleAddressSelect}\n// >\n//   {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n//     <div>\n//       <Field\n//         variant=\"outlined\"\n//         required\n//         fullWidth\n//         {...getInputProps({\n//           label: \"Adresse\",\n//           placeholder: \"Entrez l'adresse\",\n//         })}\n//         as={TextField}\n//       />\n//       <div>\n//         {loading ? <div>Chargement...</div> : null}\n//         {suggestions.map((suggestion, i) => {\n//           const style = {\n//             backgroundColor: suggestion.active ? colors.brown : \"#fafafa\",\n//           };\n//           return (\n//             <div\n//               key={i}\n//               {...getSuggestionItemProps(suggestion, { style })}\n//             >\n//               {suggestion.description}\n//             </div>\n//           );\n//         })}\n//       </div>\n//     </div>\n//   )}\n// </PlacesAutocomplete>\n\n{\n  /* <FormControl\r\n  component=\"fieldset\"\r\n  className={classes.formControl}\r\n  required={true}\r\n  >\r\n  <FormLabel\r\n  component=\"legend\"\r\n  style={{ fontWeight: \"800\", color: \"#000\" }}\r\n  >\r\n  Type de l'enseigne\r\n  </FormLabel>\r\n  <FormGroup>\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estArtisan}\r\n        //   onChange={(e) => setEstArtisan(e.target.checked)}\r\n        name=\"estArtisan\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Artisan\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMagasinSpe}\r\n        //   onChange={(e) => setEstMagasinSpe(e.target.checked)}\r\n        name=\"estMagasinSpe\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Magasin spécialisé\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMagasinGen}\r\n        //   onChange={(e) => setEstMagasinGen(e.target.checked)}\r\n        name=\"estMagasinGen\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Magasin généraliste\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estAsso}\r\n        //   onChange={(e) => setEstAsso(e.target.checked)}\r\n        name=\"estAsso\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Association\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMarque}\r\n        //   onChange={(e) => setEstMarque(e.target.checked)}\r\n        name=\"estMarque\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Marque\"\r\n  />\r\n    <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMarque}\r\n        //   onChange={(e) => setEstMarque(e.target.checked)}\r\n        name=\"MarketPlace\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"MarketPlace\"\r\n  />\r\n  </FormGroup>\r\n  </FormControl> */\n}\n{\n  /* <Select\r\n                  multiple\r\n                  value={nomsServicesCHoisis}\r\n                  onChange={handleChange}\r\n                  input={<Input id=\"select-multiple-checkbox\" />}\r\n                  renderValue={(selected) => selected.join(\", \")}\r\n                  MenuProps={MenuProps}\r\n                > */\n}\n{\n  /* {nomsServices.map((name) => (\r\n                  <MenuItem key={name} value={name}>\r\n                    <Checkbox\r\n                      checked={nomsServicesCHoisis.indexOf(name) > -1}\r\n                    />\r\n                    <ListItemText primary={name} />\r\n                  </MenuItem>\r\n                ))} */\n} // </Select>\n//\n\nvar _c;\n\n$RefreshReg$(_c, \"From2\");","map":{"version":3,"sources":["C:/Users/PC/Desktop/BigNova-Projects/BigNova-Pets Animals/ClonedFromGitHub/animals-pets/src/pages/Register/Components/Form2/From2.js"],"names":["Box","Grid","TextField","React","PlacesAutocomplete","Field","colors","useStyles","FormikControl","Buttons","Select","From2","onReturn","TypeLenseigne","formik","Addresses","classes","ContainerForm2","inputBox","errors","nomentreprise","touched"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,SAApB,QAAqC,mBAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,SAAT,QAA0B,oBAA1B,C,CACA;;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,aAAZ;AAA2BC,EAAAA,MAA3B;AAAmCC,EAAAA;AAAnC,CAAf,EAA+D;AAAA;;AAC7D,QAAMC,OAAO,GAAGT,SAAS,EAAzB;AAEA,sBACE,QAAC,GAAD;AAAK,IAAA,SAAS,EAAES,OAAO,CAACC,cAAxB;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAED,OAAO,CAACE,QAAxB;AAAA,6BACE,QAAC,KAAD;AACE,QAAA,OAAO,EAAC,UADV;AAEE,QAAA,QAAQ,MAFV;AAGE,QAAA,SAAS,MAHX;AAIE,QAAA,EAAE,EAAC,eAJL;AAKE,QAAA,KAAK,EAAC,mBALR;AAME,QAAA,IAAI,EAAC,eANP;AAOE,QAAA,EAAE,EAAEhB,SAPN;AAQE,QAAA,KAAK,EACHY,MAAM,CAACK,MAAP,CAAcC,aAAd,IAA+BN,MAAM,CAACO,OAAP,CAAeD,aAA9C,GACI,IADJ,GAEI;AAXR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAiBE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAEJ,OAAO,CAACE,QAAxB;AAAA,6BACE,QAAC,MAAD;AACE,QAAA,EAAE,EAAC,WADL;AAEE,QAAA,KAAK,EAAC,UAFR;AAGE,QAAA,IAAI,EAAC,WAHP;AAIE,QAAA,OAAO,EAAEH,SAJX;AAKE,QAAA,QAAQ,EACND,MAAM,CAACK,MAAP,CAAcJ,SAAd,IAA2BD,MAAM,CAACO,OAAP,CAAeN,SAA1C,GAAsD,IAAtD,GAA6D;AANjE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAjBF,eA4BE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAEC,OAAO,CAACE;AAAxB;AAAA;AAAA;AAAA;AAAA,YA5BF,eAoCE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YApCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwCD;;GA3CQP,K;UACSJ,S;;;KADTI,K;AA6CT,eAAeA,KAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC;AAED;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AACD;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACC,C,CACD;AACA","sourcesContent":["import { Box, Grid, TextField } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport PlacesAutocomplete from \"react-places-autocomplete\";\r\nimport { Field } from \"formik\";\r\nimport { colors } from \"../../../../themes/colors\";\r\nimport { useStyles } from \"../../hooks/Styles\";\r\n// import Question from \"../../../images/Question.png\";\r\nimport FormikControl from \"../../hooks/FormikControl\";\r\nimport Buttons from \"./Components/Buttons\";\r\nimport Select from \"./Components/Select\";\r\n\r\nfunction From2({ onReturn, TypeLenseigne, formik, Addresses }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box className={classes.ContainerForm2}>\r\n      <Box className={classes.inputBox}>\r\n        <Field\r\n          variant=\"outlined\"\r\n          required\r\n          fullWidth\r\n          id=\"nomentreprise\"\r\n          label=\"Nom de l'enseigne\"\r\n          name=\"nomentreprise\"\r\n          as={TextField}\r\n          error={\r\n            formik.errors.nomentreprise && formik.touched.nomentreprise\r\n              ? true\r\n              : false\r\n          }\r\n        />\r\n      </Box>\r\n      <Box className={classes.inputBox}>\r\n        <Select\r\n          id=\"Addresses\"\r\n          label=\"Adresses\"\r\n          name=\"Addresses\"\r\n          options={Addresses}\r\n          errorMsg={\r\n            formik.errors.Addresses && formik.touched.Addresses ? true : false\r\n          }\r\n        />\r\n      </Box>\r\n      <Box className={classes.inputBox}>\r\n        {/* <FormikControl\r\n            control=\"checkbox\"\r\n            label=\"Type de l'enseigne\"\r\n            name=\"CheckkboxOption\"\r\n            options={TypeLenseigne}\r\n          /> */}\r\n      </Box>\r\n      <Buttons />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default From2;\r\n\r\n// const MenuProps = {\r\n//   PaperProps: {\r\n//     style: {\r\n//       maxHeight: 48 * 4.5 + 8,\r\n//       width: 400,\r\n//     },\r\n//   },\r\n// };\r\n// <PlacesAutocomplete\r\n// //   value={adresse}\r\n// //   onChange={setAdresse}\r\n// //   onSelect={handleAddressSelect}\r\n// >\r\n//   {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n//     <div>\r\n//       <Field\r\n//         variant=\"outlined\"\r\n//         required\r\n//         fullWidth\r\n//         {...getInputProps({\r\n//           label: \"Adresse\",\r\n//           placeholder: \"Entrez l'adresse\",\r\n//         })}\r\n//         as={TextField}\r\n//       />\r\n//       <div>\r\n//         {loading ? <div>Chargement...</div> : null}\r\n\r\n//         {suggestions.map((suggestion, i) => {\r\n//           const style = {\r\n//             backgroundColor: suggestion.active ? colors.brown : \"#fafafa\",\r\n//           };\r\n//           return (\r\n//             <div\r\n//               key={i}\r\n//               {...getSuggestionItemProps(suggestion, { style })}\r\n//             >\r\n//               {suggestion.description}\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//     </div>\r\n//   )}\r\n// </PlacesAutocomplete>\r\n{\r\n  /* <FormControl\r\ncomponent=\"fieldset\"\r\nclassName={classes.formControl}\r\nrequired={true}\r\n>\r\n<FormLabel\r\n  component=\"legend\"\r\n  style={{ fontWeight: \"800\", color: \"#000\" }}\r\n>\r\n  Type de l'enseigne\r\n</FormLabel>\r\n<FormGroup>\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estArtisan}\r\n        //   onChange={(e) => setEstArtisan(e.target.checked)}\r\n        name=\"estArtisan\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Artisan\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMagasinSpe}\r\n        //   onChange={(e) => setEstMagasinSpe(e.target.checked)}\r\n        name=\"estMagasinSpe\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Magasin spécialisé\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMagasinGen}\r\n        //   onChange={(e) => setEstMagasinGen(e.target.checked)}\r\n        name=\"estMagasinGen\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Magasin généraliste\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estAsso}\r\n        //   onChange={(e) => setEstAsso(e.target.checked)}\r\n        name=\"estAsso\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Association\"\r\n  />\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMarque}\r\n        //   onChange={(e) => setEstMarque(e.target.checked)}\r\n        name=\"estMarque\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"Marque\"\r\n  />\r\n\r\n  <FormControlLabel\r\n    control={\r\n      <Checkbox\r\n        //   checked={estMarque}\r\n        //   onChange={(e) => setEstMarque(e.target.checked)}\r\n        name=\"MarketPlace\"\r\n        color=\"default\"\r\n      />\r\n    }\r\n    label=\"MarketPlace\"\r\n  />\r\n</FormGroup>\r\n</FormControl> */\r\n}\r\n\r\n{\r\n  /* <Select\r\n                  multiple\r\n                  value={nomsServicesCHoisis}\r\n                  onChange={handleChange}\r\n                  input={<Input id=\"select-multiple-checkbox\" />}\r\n                  renderValue={(selected) => selected.join(\", \")}\r\n                  MenuProps={MenuProps}\r\n                > */\r\n}\r\n{\r\n  /* {nomsServices.map((name) => (\r\n                  <MenuItem key={name} value={name}>\r\n                    <Checkbox\r\n                      checked={nomsServicesCHoisis.indexOf(name) > -1}\r\n                    />\r\n                    <ListItemText primary={name} />\r\n                  </MenuItem>\r\n                ))} */\r\n}\r\n// </Select>\r\n//\r\n"]},"metadata":{},"sourceType":"module"}
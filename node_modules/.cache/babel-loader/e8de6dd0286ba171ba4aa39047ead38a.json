{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { fr } from 'yup-locales';\nimport { setLocale } from 'yup';\nimport { useState } from 'react';\nsetLocale(fr);\nexport function UseRegister() {\n  _s();\n\n  const [isSelected, setSelection] = useState(false);\n  const [hidePass, setHidePass] = useState(false);\n\n  const hadelChnageCheck = () => {\n    setSelection(!isSelected);\n  };\n\n  const auth = useSelector(state => state.auth);\n  const {\n    isLogged,\n    loading\n  } = auth;\n  const registerValues = {\n    login: '',\n    password: ''\n  };\n  let configHead = {\n    headers: {\n      // method: 'POST',\n      'Content-Type': 'application/json',\n      'Accept-Language': 'fr' // Authorization: 'Bearer ' + token,\n\n    }\n  };\n  const dispatch = useDispatch();\n\n  const onSubmit = async values => {\n    await dispatchLogin(dispatch, configHead, values, isLogged, loading);\n  };\n\n  const HandlehidePass = () => {\n    setHidePass(!hidePass);\n  };\n\n  const lowercaseRegEx = /(?=.*[a-z])/;\n  const uppercaseRegEx = /(?=.*[A-Z])/;\n  const numericRegEx = /(?=.*[0-9])/;\n  const specialsRegEx = /[^A-Za-z 0-9]/g;\n  const emailRegex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\n  let RegsiterSchema = Yup.object().shape({\n    nom: Yup.string().max(15, 'identifiant est trop long - doit être de 15 caractères maximum.').required('identifiant est requis').min(4, 'identifiant est trop court - doit comporter au moins 4 caractères.'),\n    prenom: Yup.string().max(15, 'identifiant est trop long - doit être de 15 caractères maximum.').required('identifiant est requis').min(4, 'identifiant est trop court - doit comporter au moins 4 caractères.'),\n    email: Yup.string().max(15, 'identifiant est trop long - doit être de 15 caractères maximum.').required('identifiant est requis').min(4, 'identifiant est trop court - doit comporter au moins 4 caractères.'),\n    phone: Yup.string().min(10, \"Numéro téléphone is too short - should be 10 number Minimum.\").matches(phoneRegex, \"Doit être un numéro valide !\").required(\"Numéro téléphone est requis\"),\n    password: Yup.string().max(15, 'Le mot de passe est trop long - doit être de 15 caractères maximum.').min(4, 'Le mot de passe est trop court - doit comporter au moins 4 caractères.') //   .matches(lowercaseRegEx,'Doit contenir un caractère alphabétique minuscule!',)\n    //   .matches(uppercaseRegEx,'Doit contenir un caractère alphabétique majuscule!',)\n    // .matches(numericRegEx, 'Doit contenir un caractère numérique!')\n    //   .matches(specialsRegEx, 'Doit contenir un caractère spécial')\n    .required('Mot de passe requis')\n  });\n  return {\n    registerValues,\n    RegsiterSchema\n  };\n}\n\n_s(UseRegister, \"SGp9EHWnGbGZLjnbIxustYkajZk=\", true);\n\n_c = UseRegister;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseRegister\");","map":{"version":3,"sources":["D:/All - Projects/PROJECTS - Gitkraken/Project-12 - BigNova PetsAnimals/animals-pets/src/pages/Register/hooks/useForm.js"],"names":["Yup","fr","setLocale","useState","UseRegister","isSelected","setSelection","hidePass","setHidePass","hadelChnageCheck","auth","useSelector","state","isLogged","loading","registerValues","login","password","configHead","headers","dispatch","useDispatch","onSubmit","values","dispatchLogin","HandlehidePass","lowercaseRegEx","uppercaseRegEx","numericRegEx","specialsRegEx","emailRegex","RegsiterSchema","object","shape","nom","string","max","required","min","prenom","email","phone","matches","phoneRegex"],"mappings":";;AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,SAAR,QAAwB,KAAxB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AAEAD,SAAS,CAACD,EAAD,CAAT;AAEA,OAAO,SAASG,WAAT,GAAuB;AAAA;;AAC5B,QAAM,CAACC,UAAD,EAAaC,YAAb,IAA6BH,QAAQ,CAAC,KAAD,CAA3C;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;;AACA,QAAMM,gBAAgB,GAAG,MAAM;AAC7BH,IAAAA,YAAY,CAAC,CAACD,UAAF,CAAZ;AACD,GAFD;;AAGA,QAAMK,IAAI,GAAGC,WAAW,CAACC,KAAK,IAAIA,KAAK,CAACF,IAAhB,CAAxB;AAEA,QAAM;AAACG,IAAAA,QAAD;AAAUC,IAAAA;AAAV,MAAqBJ,IAA3B;AAEA,QAAMK,cAAc,GAAG;AACrBC,IAAAA,KAAK,EAAE,EADc;AAErBC,IAAAA,QAAQ,EAAE;AAFW,GAAvB;AAIA,MAAIC,UAAU,GAAG;AACfC,IAAAA,OAAO,EAAE;AACP;AACA,sBAAgB,kBAFT;AAGP,yBAAmB,IAHZ,CAIP;;AAJO;AADM,GAAjB;AASA,QAAMC,QAAQ,GAAGC,WAAW,EAA5B;;AAEA,QAAMC,QAAQ,GAAG,MAAOC,MAAP,IAAkB;AAChC,UAAMC,aAAa,CAACJ,QAAD,EAAWF,UAAX,EAAuBK,MAAvB,EAA8BV,QAA9B,EAAuCC,OAAvC,CAAnB;AACF,GAFD;;AAGA,QAAMW,cAAc,GAAG,MAAM;AAC3BjB,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACD,GAFD;;AAKA,QAAMmB,cAAc,GAAG,aAAvB;AACA,QAAMC,cAAc,GAAG,aAAvB;AACA,QAAMC,YAAY,GAAG,aAArB;AACA,QAAMC,aAAa,GAAG,gBAAtB;AACA,QAAMC,UAAU,GACd,gcADF;AAGA,MAAIC,cAAc,GAAG/B,GAAG,CAACgC,MAAJ,GAAaC,KAAb,CAAmB;AACtCC,IAAAA,GAAG,EAAElC,GAAG,CAACmC,MAAJ,GACFC,GADE,CAED,EAFC,EAGD,iEAHC,EAKFC,QALE,CAKO,wBALP,EAMFC,GANE,CAOD,CAPC,EAQD,oEARC,CADiC;AAWpCC,IAAAA,MAAM,EAAEvC,GAAG,CAACmC,MAAJ,GACPC,GADO,CAEN,EAFM,EAGN,iEAHM,EAKPC,QALO,CAKE,wBALF,EAMPC,GANO,CAON,CAPM,EAQN,oEARM,CAX4B;AAqBpCE,IAAAA,KAAK,EAAExC,GAAG,CAACmC,MAAJ,GACNC,GADM,CAEL,EAFK,EAGL,iEAHK,EAKNC,QALM,CAKG,wBALH,EAMNC,GANM,CAOL,CAPK,EAQL,oEARK,CArB6B;AA+BpCG,IAAAA,KAAK,EAAEzC,GAAG,CAACmC,MAAJ,GACNG,GADM,CACF,EADE,EACE,8DADF,EAENI,OAFM,CAEEC,UAFF,EAEc,8BAFd,EAGNN,QAHM,CAGG,6BAHH,CA/B6B;AAoCpCpB,IAAAA,QAAQ,EAAEjB,GAAG,CAACmC,MAAJ,GACTC,GADS,CAER,EAFQ,EAGR,qEAHQ,EAKTE,GALS,CAMR,CANQ,EAOR,wEAPQ,EASV;AACA;AACA;AACA;AAZU,KAaTD,QAbS,CAaA,qBAbA;AApC0B,GAAnB,CAArB;AAoDA,SAAO;AACLtB,IAAAA,cADK;AAELgB,IAAAA;AAFK,GAAP;AAID;;GAhGe3B,W;;KAAAA,W","sourcesContent":["import * as Yup from 'yup';\r\nimport {fr} from 'yup-locales';\r\nimport {setLocale} from 'yup';\r\nimport {useState} from 'react';\r\n\r\nsetLocale(fr);\r\n\r\nexport function UseRegister() {\r\n  const [isSelected, setSelection] = useState(false);\r\n  const [hidePass, setHidePass] = useState(false);\r\n  const hadelChnageCheck = () => {\r\n    setSelection(!isSelected);\r\n  };\r\n  const auth = useSelector(state => state.auth);\r\n\r\n  const {isLogged,loading} = auth;\r\n  \r\n  const registerValues = {\r\n    login: '',\r\n    password: '',\r\n  };\r\n  let configHead = {\r\n    headers: {\r\n      // method: 'POST',\r\n      'Content-Type': 'application/json',\r\n      'Accept-Language': 'fr',\r\n      // Authorization: 'Bearer ' + token,\r\n    },\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  const onSubmit = async (values) => {\r\n     await dispatchLogin(dispatch, configHead, values,isLogged,loading)\r\n  };\r\n  const HandlehidePass = () => {\r\n    setHidePass(!hidePass);\r\n  };\r\n\r\n\r\n  const lowercaseRegEx = /(?=.*[a-z])/;\r\n  const uppercaseRegEx = /(?=.*[A-Z])/;\r\n  const numericRegEx = /(?=.*[0-9])/;\r\n  const specialsRegEx = /[^A-Za-z 0-9]/g;\r\n  const emailRegex =\r\n    /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\r\n\r\n  let RegsiterSchema = Yup.object().shape({\r\n    nom: Yup.string()\r\n      .max(\r\n        15,\r\n        'identifiant est trop long - doit être de 15 caractères maximum.',\r\n      )\r\n      .required('identifiant est requis')\r\n      .min(\r\n        4,\r\n        'identifiant est trop court - doit comporter au moins 4 caractères.',\r\n      ),\r\n      prenom: Yup.string()\r\n      .max(\r\n        15,\r\n        'identifiant est trop long - doit être de 15 caractères maximum.',\r\n      )\r\n      .required('identifiant est requis')\r\n      .min(\r\n        4,\r\n        'identifiant est trop court - doit comporter au moins 4 caractères.',\r\n      ),\r\n      email: Yup.string()\r\n      .max(\r\n        15,\r\n        'identifiant est trop long - doit être de 15 caractères maximum.',\r\n      )\r\n      .required('identifiant est requis')\r\n      .min(\r\n        4,\r\n        'identifiant est trop court - doit comporter au moins 4 caractères.',\r\n      ),\r\n      phone: Yup.string()\r\n      .min(10, \"Numéro téléphone is too short - should be 10 number Minimum.\")\r\n      .matches(phoneRegex, \"Doit être un numéro valide !\")\r\n      .required(\"Numéro téléphone est requis\"),\r\n\r\n      password: Yup.string()\r\n      .max(\r\n        15,\r\n        'Le mot de passe est trop long - doit être de 15 caractères maximum.',\r\n      )\r\n      .min(\r\n        4,\r\n        'Le mot de passe est trop court - doit comporter au moins 4 caractères.',\r\n      )\r\n      //   .matches(lowercaseRegEx,'Doit contenir un caractère alphabétique minuscule!',)\r\n      //   .matches(uppercaseRegEx,'Doit contenir un caractère alphabétique majuscule!',)\r\n      // .matches(numericRegEx, 'Doit contenir un caractère numérique!')\r\n      //   .matches(specialsRegEx, 'Doit contenir un caractère spécial')\r\n      .required('Mot de passe requis'),\r\n  });\r\n\r\n  return {\r\n    registerValues,\r\n    RegsiterSchema\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\BigNova-Projects\\\\Project - 12 - BigNova-Pets Animals-web\\\\ClonedFromGitHub\\\\animals-pets\\\\src\\\\pages\\\\Register\\\\Components\\\\Form2\\\\Components\\\\Inputs.js\",\n    _s = $RefreshSig$();\n\nimport { Box, TextField } from \"@material-ui/core\";\nimport { Field } from \"formik\";\nimport React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { colors } from \"../../../../../themes/colors\";\nimport { useStyles } from \"./styles\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport { FormControl } from \"@material-ui/core\";\nimport { GET_ADDRESS, GET_CORDINATES } from \"../../../../../Redux/Types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Inputs({\n  formik,\n  HandelValues\n}) {\n  _s();\n\n  const classes = useStyles();\n  const [adresse, setAdresse] = useState(\"\");\n  const [Valide, setValide] = useState(false);\n  const [coordinates, setCoordinates] = useState({\n    lat: null,\n    lng: null\n  }); // console.log(\"formik\", formik, coordinates);\n\n  const handleAddressSelect = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    setAdresse(value);\n    setCoordinates(latLng);\n    setValide(true);\n  };\n\n  useLayoutEffect(() => {\n    if (Valide) {\n      dispatch({\n        type: GET_ADDRESS,\n        payload: adresse\n      });\n      dispatch({\n        type: GET_CORDINATES,\n        payload: coordinates\n      }); // setValide(false);\n    }\n  }, [Valide == true]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.inputBox,\n    children: [/*#__PURE__*/_jsxDEV(Field, {\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true,\n      id: \"nomentreprise\",\n      label: \"Nom de l'enseigne\",\n      name: \"nomentreprise\",\n      as: TextField,\n      className: classes.Field,\n      error: formik.errors.nomentreprise && formik.touched.nomentreprise ? true : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: adresse,\n      onChange: setAdresse // onChange={(e, value) => setFieldValue(\"city_id\", value)}\n      ,\n      onSelect: handleAddressSelect,\n      children: ({\n        getInputProps,\n        suggestions,\n        getSuggestionItemProps,\n        loading\n      }) => {\n        {}\n        return [/*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            variant: \"outlined\",\n            required: true,\n            fullWidth: true,\n            id: \"Addresses\",\n            label: \"Addresses\",\n            as: TextField,\n            value: adresse,\n            error: (adresse === null || adresse === void 0 ? void 0 : adresse.length) < 3 && (adresse === null || adresse === void 0 ? void 0 : adresse.length) !== 0 ? true : false,\n            ...getInputProps({\n              label: \"Adresse\",\n              placeholder: \"Entrez l'adresse\"\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Chargement...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 28\n            }, this) : null, suggestions.map((suggestion, i) => {\n              const style = {\n                backgroundColor: suggestion.active ? colors.brown : \"#fafafa\"\n              };\n              return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                  style\n                }),\n                children: suggestion.description\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)];\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Inputs, \"v2giLNf/Qnky5AtaqkkKdlEXmls=\", false, function () {\n  return [useStyles];\n});\n\n_c = Inputs;\nexport default Inputs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Inputs\");","map":{"version":3,"sources":["C:/Users/PC/Desktop/BigNova-Projects/Project - 12 - BigNova-Pets Animals-web/ClonedFromGitHub/animals-pets/src/pages/Register/Components/Form2/Components/Inputs.js"],"names":["Box","TextField","Field","React","useEffect","useLayoutEffect","useState","colors","useStyles","PlacesAutocomplete","geocodeByAddress","getLatLng","FormControl","GET_ADDRESS","GET_CORDINATES","Inputs","formik","HandelValues","classes","adresse","setAdresse","Valide","setValide","coordinates","setCoordinates","lat","lng","handleAddressSelect","value","results","latLng","dispatch","type","payload","inputBox","errors","nomentreprise","touched","getInputProps","suggestions","getSuggestionItemProps","loading","length","label","placeholder","map","suggestion","i","style","backgroundColor","active","brown","description"],"mappings":"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","sourcesContent":["import { Box, TextField } from \"@material-ui/core\";\r\nimport { Field } from \"formik\";\r\nimport React, { useEffect, useLayoutEffect, useState } from \"react\";\r\nimport { colors } from \"../../../../../themes/colors\";\r\nimport { useStyles } from \"./styles\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from \"react-places-autocomplete\";\r\nimport { FormControl } from \"@material-ui/core\";\r\nimport { GET_ADDRESS, GET_CORDINATES } from \"../../../../../Redux/Types\";\r\n\r\nfunction Inputs({ formik, HandelValues }) {\r\n  const classes = useStyles();\r\n  const [adresse, setAdresse] = useState(\"\");\r\n  const [Valide, setValide] = useState(false);\r\n  const [coordinates, setCoordinates] = useState({\r\n    lat: null,\r\n    lng: null,\r\n  });\r\n\r\n  // console.log(\"formik\", formik, coordinates);\r\n  const handleAddressSelect = async (value) => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n    setAdresse(value);\r\n    setCoordinates(latLng);\r\n    setValide(true);\r\n  };\r\n  useLayoutEffect(() => {\r\n    if (Valide) {\r\n      dispatch({ type: GET_ADDRESS, payload: adresse });\r\n      dispatch({ type: GET_CORDINATES, payload: coordinates });\r\n      // setValide(false);\r\n    }\r\n  }, [Valide == true]);\r\n\r\n  return (\r\n    <Box className={classes.inputBox}>\r\n      <Field\r\n        variant=\"outlined\"\r\n        required\r\n        fullWidth\r\n        id=\"nomentreprise\"\r\n        label=\"Nom de l'enseigne\"\r\n        name=\"nomentreprise\"\r\n        as={TextField}\r\n        className={classes.Field}\r\n        error={\r\n          formik.errors.nomentreprise && formik.touched.nomentreprise\r\n            ? true\r\n            : false\r\n        }\r\n      />\r\n\r\n      <PlacesAutocomplete\r\n        value={adresse}\r\n        onChange={setAdresse}\r\n        // onChange={(e, value) => setFieldValue(\"city_id\", value)}\r\n        onSelect={handleAddressSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => {\r\n          {\r\n          }\r\n          return [\r\n            <>\r\n              <Field\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"Addresses\"\r\n                label=\"Addresses\"\r\n                as={TextField}\r\n                value={adresse}\r\n                error={\r\n                  adresse?.length < 3 && adresse?.length !== 0 ? true : false\r\n                }\r\n                {...getInputProps({\r\n                  label: \"Adresse\",\r\n                  placeholder: \"Entrez l'adresse\",\r\n                })}\r\n              />\r\n              <div>\r\n                {loading ? <div>Chargement...</div> : null}\r\n\r\n                {suggestions.map((suggestion, i) => {\r\n                  const style = {\r\n                    backgroundColor: suggestion.active\r\n                      ? colors.brown\r\n                      : \"#fafafa\",\r\n                  };\r\n                  return (\r\n                    <div\r\n                      key={i}\r\n                      {...getSuggestionItemProps(suggestion, { style })}\r\n                    >\r\n                      {suggestion.description}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </>,\r\n          ];\r\n        }}\r\n      </PlacesAutocomplete>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Inputs;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\All - Projects\\\\PROJECTS - Gitkraken\\\\Project-12 - BigNova PetsAnimals\\\\animals-pets\\\\src\\\\pages\\\\Register\\\\Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport parrot from \"../../images/parrot.png\";\nimport { colors } from \"../../themes/colors\";\nimport Box from \"@material-ui/core/Box\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { Alert } from \"@material-ui/lab\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport misterCoockyApi from \"../../constante/apiUrl\";\nimport Select from \"@material-ui/core/Select\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport logo from \"../../images/logo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst nomsServices = [\"Cession d'animaux(don, échange, vente)\"];\nconst useStyles = makeStyles(theme => ({\n  MenuProps: {\n    PaperProps: {\n      style: {\n        maxHeight: 300,\n        maxWidth: 50\n      }\n    },\n    // Show dropdow at bottom of select\n    getContentAnchorEl: null,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    }\n  },\n  root: {\n    height: \"100vh\"\n  },\n  image: {\n    backgroundImage: `url(${parrot})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor: theme.palette.type === \"light\" ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\"\n  },\n  paper: {\n    margin: theme.spacing(5, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  form: {\n    width: \"90%\",\n    marginTop: \"0px\"\n  },\n  btn: {\n    padding: theme.spacing(1),\n    color: \"#000\",\n    width: \"30%\"\n  },\n  formText: {\n    width: \"45%\"\n  },\n  formControl: {\n    width: 200,\n    margin: theme.spacing(3)\n  },\n  chips: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  chip: {\n    margin: 2\n  },\n  noLabel: {\n    marginTop: theme.spacing(3)\n  }\n}));\nexport default function Register() {\n  _s();\n\n  const classes = useStyles();\n  const [pageId, setPageId] = useState(0); //numéro de page du formulaire d'inscription (0,1,2)\n\n  const [alert, setAlert] = useState(\"\"); //message d'alerte au niveau du mot de passe\n\n  const [alertMail, setAlertMail] = useState(\"\"); //message d'alerte au niveau de l'adresse mail\n\n  const [alertOrganization, setAlertOrganization] = useState(\"\"); //message d'alerte au niveau de l'organisation\n\n  const [nom, setNom] = useState(\"\"); //champs première page\n\n  const [prenom, setPrenom] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [companyName, setCompanyName] = useState(\"\"); //champs seconde page\n\n  const [estArtisan, setEstArtisan] = useState(false);\n  const [estMagasinSpe, setEstMagasinSpe] = useState(false);\n  const [estMagasinGen, setEstMagasinGen] = useState(false);\n  const [estAsso, setEstAsso] = useState(false);\n  const [estMarque, setEstMarque] = useState(false);\n  const [estAlim, setEstAlim] = useState(false);\n  const [estAccess, setEstAccess] = useState(false);\n  const [estCession, setEstCession] = useState(false);\n  const [nomsServicesCHoisis, setNomsServicesCHoisis] = useState([]);\n  const [password1, setPassword1] = useState(\"\"); //champs troisième page\n\n  const [password2, setPassword2] = useState(\"\");\n  const [adresse, setAdresse] = React.useState(\"\");\n  const [validAdresse, setValidAdresse] = useState(false);\n  const [submited, setSubmited] = useState(false);\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n  let regexName = /^[a-z ,.'-]+$/i;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: 48 * 4.5 + 8,\n        width: 400\n      }\n    }\n  };\n\n  const handleChange = event => {\n    setNomsServicesCHoisis(event.target.value);\n  };\n  /**\r\n   *  Envoi du formulaire d'inscription\r\n   */\n\n\n  function sendForm() {\n    let typesOrga = [];\n\n    if (estArtisan === true) {\n      typesOrga.push(\"Artisan\");\n    }\n\n    if (estMagasinSpe === true) {\n      typesOrga.push(\"Magasin spécialisé\");\n    }\n\n    if (estMagasinGen === true) {\n      typesOrga.push(\"Magasin généraliste\");\n    }\n\n    if (estAsso === true) {\n      typesOrga.push(\"Association\");\n    }\n\n    if (estMarque === true) {\n      typesOrga.push(\"Marque\");\n    }\n\n    let typeOffre = [];\n\n    if (estAlim === true) {\n      typeOffre.push(\"Alimentation\");\n    }\n\n    if (estAccess === true) {\n      typeOffre.push(\"Accessoire\");\n    }\n\n    typeOffre = typeOffre.concat(nomsServicesCHoisis);\n    fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n                    mutation($organization: OrganizationInput!, $adress:AdressInput!, $user:UserIntput!){\n                        registerUserPro( organization: $organization,  adress:$adress, user:$user)\n                        {​​​​​​\n                            id\n                            organization{\n                                id\n                                supplier{\n                                    id\n                                }\n                            }\n                        }​​​​​​​\n                    }`,\n        variables: {\n          organization: {\n            name: companyName,\n            orgas: typesOrga,\n            offers: typeOffre\n          },\n          adress: {\n            street: adresse,\n            geoLocation: {\n              latitude: coordinates.lat,\n              longitude: coordinates.lng\n            }\n          },\n          user: {\n            name: nom + \" \" + prenom,\n            email: email,\n            phone: phone,\n            password: password1\n          }\n        }\n      })\n    }).then(res => res.json()).then(function (result) {\n      if (result.data.registerUserPro !== []) {\n        localStorage.setItem(\"userId\", result.data.registerUserPro.id);\n        localStorage.setItem(\"organizationId\", result.data.registerUserPro.organization.id);\n        localStorage.setItem(\"supplierId\", result.data.registerUserPro.organization.supplier.id);\n        window.location.href = \"/home\";\n      }\n    });\n    return {\n      nom: nom,\n      prenom: prenom,\n      email: email,\n      phone: phone,\n      companyName: companyName,\n      estArtisan: estArtisan,\n      estMagasinSpe: estMagasinSpe,\n      estMagasinGen: estMagasinGen,\n      estAsso: estAsso,\n      estMarque: estMarque,\n      estAlim: estAlim,\n      estAccess: estAccess,\n      estCession: estCession,\n      password: password1,\n      adresse: adresse,\n      coordinates: coordinates\n    };\n  }\n  /**\r\n   * Lors de la sélectoin d'une adresse\r\n   * @param value\r\n   * @returns {Promise<void>}\r\n   */\n\n\n  const handleAddressSelect = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    setAdresse(value);\n    setCoordinates(latLng);\n    setValidAdresse(true);\n  };\n  /**\r\n   * Gestion des pages du formulaire d'inscription et envoi du formulaire\r\n   * @param event\r\n   */\n\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    let tmpPage = pageId;\n\n    switch (tmpPage) {\n      case 0:\n        //page 0→1\n        // fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\n        //     method: 'POST',\n        //     headers: {\n        //         'Content-Type': 'application/json',\n        //     },\n        //     body: JSON.stringify({\n        //         query: `\n        //     query{​​​​​​​\n        //         getMail(mail:\"${email}\"){​​​​​​​\n        //             id\n        //         }​​​​​​​\n        //     }`,\n        //     }),\n        // })\n        //     .then((res) => res.json())\n        //     .then(function (result) {\n        //         if (result.data.getMail !== null) {\n        //             setAlertMail(\"email déjà utilisé!\");\n        //         } else {\n        //             setPageId(tmpPage + 1);\n        //         }\n        //     });\n        if (password1 === password2 && password1.length >= 5) {\n          // sendForm()\n          setPageId(tmpPage + 1);\n        } else if (password1.length < 5) {\n          setAlert(\"La longueur des mots de passe doit excéder 5 caractères\");\n        } else if (password1 !== password2) {\n          setAlert(\"Mots de passe différents.\");\n        }\n\n        break;\n        setPageId(tmpPage + 1);\n        break;\n\n      case 1:\n        //page 1→2\n        setSubmited(true);\n\n        if (validAdresse === true) {\n          fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              query: `\n                    query{​​​​​​​\n                        existsOrganizationByName(name:\"${companyName}\")​​​​​​​\n                    }`\n            })\n          }).then(res => res.json()).then(function (result) {\n            if (result.data.existsOrganizationByName === false) {\n              setPageId(tmpPage + 1);\n            } else {\n              setAlertOrganization(\"Nom d'organisation déjà utilisé!\");\n            }\n          });\n        }\n\n        break;\n      // case 2: //envoi formulaire\n      //     if (password1 === password2 && password1.length >= 5) {   //envoi du formulaire d'inscription\n      //         sendForm()\n      //     } else if (password1.length < 5) {\n      //         setAlert(\"La longueur des mots de passe doit excéder 5 caractères\")\n      //     } else if (password1 !== password2) {\n      //         setAlert(\"Mots de passe différents.\")\n      //     }\n      //     break;\n\n      default:\n        break;\n    }\n  }\n  /**\r\n   * Récupération du contenu de page selon le numéro de page\r\n   * page 0 : nom,prénom...\r\n   * page 1 : organisation\r\n   * page 2 : mot de passe\r\n   * @returns {*}\r\n   */\n\n\n  const [Focus, setFocus] = useState(false);\n\n  const FocusItem = () => {\n    setFocus(true);\n  };\n\n  function getFormContent() {\n    switch (pageId) {\n      case 0:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: \"50px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"outlined\",\n              required: true,\n              name: \"nom\",\n              label: \"Nom\",\n              type: \"text\",\n              id: \"nom\",\n              className: classes.formText,\n              onChange: e => setNom(e.target.value),\n              value: nom,\n              onFocus: FocusItem,\n              error: !nom.length >= 4 && !regexName && Focus ? true : false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"outlined\",\n              required: true,\n              name: \"prenom\",\n              label: \"Pr\\xE9nom\",\n              type: \"text\",\n              id: \"prenom\",\n              className: classes.formText,\n              onChange: e => setPrenom(e.target.value),\n              value: prenom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"email\",\n            label: \"Email\",\n            type: \"email\",\n            name: \"email\",\n            onChange: e => setEmail(e.target.value),\n            value: email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"phone\",\n            label: \"T\\xE9l\\xE9phone\",\n            type: \"tel\",\n            name: \"phone\",\n            onChange: e => setPhone(e.target.value),\n            value: phone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this), alertMail ? /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: alertMail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 26\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            type: \"password\",\n            name: \"pass1\",\n            id: \"password1\",\n            label: \"Mot de passe\",\n            onChange: e => setPassword1(e.target.value),\n            value: password1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            type: \"password\",\n            name: \"pass2\",\n            id: \"password2\",\n            label: \"Valider le mot de passe\",\n            onChange: e => setPassword2(e.target.value),\n            value: password2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this), alert ? /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: alert\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 22\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 10,\n            style: {\n              width: \"93%\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 10,\n              justify: \"flex-end\",\n              mr: 15,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: e => handleSubmit(e),\n                variant: \"contained\",\n                style: {\n                  backgroundColor: colors.brown\n                },\n                className: classes.btn,\n                children: \"Suivant >\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this);\n\n      case 1:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            mb: 2,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"outlined\",\n              required: true,\n              fullWidth: true,\n              id: \"enseigne\",\n              label: \"Nom de l'enseigne\",\n              name: \"enseigne\",\n              value: companyName,\n              onChange: e => setCompanyName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n            value: adresse,\n            onChange: setAdresse,\n            onSelect: handleAddressSelect,\n            children: ({\n              getInputProps,\n              suggestions,\n              getSuggestionItemProps,\n              loading\n            }) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                variant: \"outlined\",\n                required: true,\n                fullWidth: true,\n                ...getInputProps({\n                  label: \"Adresse\",\n                  placeholder: \"Entrez l'adresse\"\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"Chargement...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 481,\n                  columnNumber: 32\n                }, this) : null, suggestions.map((suggestion, i) => {\n                  const style = {\n                    backgroundColor: suggestion.active ? colors.brown : \"#fafafa\"\n                  };\n                  return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                      style\n                    }),\n                    children: suggestion.description\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 490,\n                    columnNumber: 25\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              item: true,\n              xs: 12,\n              sm: 6,\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                component: \"fieldset\",\n                className: classes.formControl,\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  component: \"legend\",\n                  children: \"Type de l'enseigne\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 509,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estArtisan,\n                      onChange: e => setEstArtisan(e.target.checked),\n                      name: \"estArtisan\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 513,\n                      columnNumber: 25\n                    }, this),\n                    label: \"Artisan\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 511,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estMagasinSpe,\n                      onChange: e => setEstMagasinSpe(e.target.checked),\n                      name: \"estMagasinSpe\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 524,\n                      columnNumber: 25\n                    }, this),\n                    label: \"Magasin sp\\xE9cialis\\xE9\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 522,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estMagasinGen,\n                      onChange: e => setEstMagasinGen(e.target.checked),\n                      name: \"estMagasinGen\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 535,\n                      columnNumber: 25\n                    }, this),\n                    label: \"Magasin g\\xE9n\\xE9raliste\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 533,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estAsso,\n                      onChange: e => setEstAsso(e.target.checked),\n                      name: \"estAsso\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 546,\n                      columnNumber: 25\n                    }, this),\n                    label: \"Association\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 544,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estMarque,\n                      onChange: e => setEstMarque(e.target.checked),\n                      name: \"estMarque\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 557,\n                      columnNumber: 25\n                    }, this),\n                    label: \"Marque\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 555,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 510,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                required: true,\n                component: \"fieldset\",\n                className: classes.formControl,\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  component: \"legend\",\n                  children: \"Type de l'offre\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 575,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estAlim,\n                      onChange: e => setEstAlim(e.target.checked),\n                      name: \"Alimentation\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 579,\n                      columnNumber: 25\n                    }, this),\n                    label: \"Alimentation\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 577,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: estAccess,\n                      onChange: e => setEstAccess(e.target.checked),\n                      name: \"Accessoire\",\n                      color: \"default\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 590,\n                      columnNumber: 25\n                    }, this),\n                    label: \"Accessoire\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 588,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                    children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                      children: \"Services\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 600,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Select, {\n                      multiple: true,\n                      value: nomsServicesCHoisis,\n                      onChange: handleChange,\n                      input: /*#__PURE__*/_jsxDEV(Input, {\n                        id: \"select-multiple-checkbox\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 605,\n                        columnNumber: 32\n                      }, this),\n                      renderValue: selected => selected.join(\", \"),\n                      MenuProps: MenuProps,\n                      children: nomsServices.map(name => /*#__PURE__*/_jsxDEV(MenuItem, {\n                        value: name,\n                        children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                          checked: nomsServicesCHoisis.indexOf(name) > -1\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 611,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                          primary: name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 614,\n                          columnNumber: 29\n                        }, this)]\n                      }, name, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 610,\n                        columnNumber: 27\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 601,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 599,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 576,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this), alertOrganization ? /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: alertOrganization\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), validAdresse === false && submited === true ? /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: \"Adresse non compl\\xE9t\\xE9e\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 10,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 10,\n              justify: \"space-around\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                style: {\n                  backgroundColor: colors.red\n                },\n                className: classes.btn,\n                onClick: () => setPageId(pageId - 1),\n                children: \"Pr\\xE9c\\xE9dent\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 635,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                style: {\n                  backgroundColor: colors.red\n                },\n                className: classes.btn,\n                children: \"Suivant >\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 643,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 634,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      // case 2:\n      //     return <div style={{ marginTop: '50px' }} >\n      //         <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass1\"\n      //             id=\"password1\" label=\"Mot de passe\" onChange={e => setPassword1(e.target.value)}\n      //             value={password1} />\n      //         <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass2\"\n      //             id=\"password2\" label=\"Valider le mot de passe\"\n      //             onChange={e => setPassword2(e.target.value)} value={password2} />\n      //         {alert ? <Alert severity=\"error\">{alert}</Alert> : <></>}\n      //         <Box mt={10}>\n      //             <Grid container spacing={10} justify=\"space-around\">\n      //                 <Button variant=\"contained\" style={{ backgroundColor: colors.red }} className={classes.btn}\n      //                     onClick={() => (setPageId(pageId - 1))}>\n      //                     Précédent\n      //                 </Button>\n      //                 <Button type=\"submit\" variant=\"contained\" style={{ backgroundColor: colors.brown }}\n      //                     className={classes.btn}>\n      //                     S'inscrire\n      //                 </Button>\n      //             </Grid>\n      //         </Box>\n      //     </div>\n\n      default:\n        break;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    component: \"main\",\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: false,\n      sm: 6,\n      md: 6,\n      className: classes.image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 6,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.paper,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"Logo Mister Coocky\",\n            width: 120,\n            src: logo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.form,\n          onSubmit: handleSubmit,\n          children: getFormContent()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 686,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 683,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Register, \"kW7mh2jEQdGg9TnfLKU66GYONok=\", false, function () {\n  return [useStyles];\n});\n\n_c = Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["D:/All - Projects/PROJECTS - Gitkraken/Project-12 - BigNova PetsAnimals/animals-pets/src/pages/Register/Register.js"],"names":["React","useState","Button","CssBaseline","TextField","Grid","parrot","colors","Box","Checkbox","FormControlLabel","Alert","FormControl","FormGroup","FormLabel","PlacesAutocomplete","geocodeByAddress","getLatLng","misterCoockyApi","Select","Input","InputLabel","MenuItem","makeStyles","ListItemText","nomsServices","useStyles","theme","MenuProps","PaperProps","style","maxHeight","maxWidth","getContentAnchorEl","anchorOrigin","vertical","horizontal","root","height","image","backgroundImage","backgroundRepeat","backgroundColor","palette","type","grey","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","form","width","marginTop","btn","padding","color","formText","formControl","chips","flexWrap","chip","noLabel","Register","classes","pageId","setPageId","alert","setAlert","alertMail","setAlertMail","alertOrganization","setAlertOrganization","nom","setNom","prenom","setPrenom","email","setEmail","phone","setPhone","companyName","setCompanyName","estArtisan","setEstArtisan","estMagasinSpe","setEstMagasinSpe","estMagasinGen","setEstMagasinGen","estAsso","setEstAsso","estMarque","setEstMarque","estAlim","setEstAlim","estAccess","setEstAccess","estCession","setEstCession","nomsServicesCHoisis","setNomsServicesCHoisis","password1","setPassword1","password2","setPassword2","adresse","setAdresse","validAdresse","setValidAdresse","submited","setSubmited","coordinates","setCoordinates","lat","lng","regexName","handleChange","event","target","value","sendForm","typesOrga","push","typeOffre","concat","fetch","method","headers","body","JSON","stringify","query","variables","organization","name","orgas","offers","adress","street","geoLocation","latitude","longitude","user","password","then","res","json","result","data","registerUserPro","localStorage","setItem","id","supplier","window","location","href","handleAddressSelect","results","latLng","handleSubmit","preventDefault","tmpPage","length","existsOrganizationByName","Focus","setFocus","FocusItem","getFormContent","e","brown","getInputProps","suggestions","getSuggestionItemProps","loading","label","placeholder","map","suggestion","i","active","description","checked","selected","join","indexOf","red","logo"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport parrot from \"../../images/parrot.png\";\r\nimport { colors } from \"../../themes/colors\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from \"react-places-autocomplete\";\r\nimport misterCoockyApi from \"../../constante/apiUrl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport logo from \"../../images/logo.svg\";\r\n\r\nconst nomsServices = [\"Cession d'animaux(don, échange, vente)\"];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  MenuProps: {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: 300,\r\n        maxWidth: 50,\r\n      },\r\n    },\r\n    // Show dropdow at bottom of select\r\n    getContentAnchorEl: null,\r\n    anchorOrigin: {\r\n      vertical: \"bottom\",\r\n      horizontal: \"left\",\r\n    },\r\n  },\r\n  root: {\r\n    height: \"100vh\",\r\n  },\r\n  image: {\r\n    backgroundImage: `url(${parrot})`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundColor:\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[50]\r\n        : theme.palette.grey[900],\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(5, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"90%\",\r\n    marginTop: \"0px\",\r\n  },\r\n  btn: {\r\n    padding: theme.spacing(1),\r\n    color: \"#000\",\r\n    width: \"30%\",\r\n  },\r\n  formText: {\r\n    width: \"45%\",\r\n  },\r\n  formControl: {\r\n    width: 200,\r\n    margin: theme.spacing(3),\r\n  },\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function Register() {\r\n  const classes = useStyles();\r\n  const [pageId, setPageId] = useState(0); //numéro de page du formulaire d'inscription (0,1,2)\r\n  const [alert, setAlert] = useState(\"\"); //message d'alerte au niveau du mot de passe\r\n  const [alertMail, setAlertMail] = useState(\"\"); //message d'alerte au niveau de l'adresse mail\r\n  const [alertOrganization, setAlertOrganization] = useState(\"\"); //message d'alerte au niveau de l'organisation\r\n\r\n  const [nom, setNom] = useState(\"\"); //champs première page\r\n  const [prenom, setPrenom] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n\r\n  const [companyName, setCompanyName] = useState(\"\"); //champs seconde page\r\n  const [estArtisan, setEstArtisan] = useState(false);\r\n  const [estMagasinSpe, setEstMagasinSpe] = useState(false);\r\n  const [estMagasinGen, setEstMagasinGen] = useState(false);\r\n  const [estAsso, setEstAsso] = useState(false);\r\n  const [estMarque, setEstMarque] = useState(false);\r\n  const [estAlim, setEstAlim] = useState(false);\r\n  const [estAccess, setEstAccess] = useState(false);\r\n  const [estCession, setEstCession] = useState(false);\r\n  const [nomsServicesCHoisis, setNomsServicesCHoisis] = useState([]);\r\n\r\n  const [password1, setPassword1] = useState(\"\"); //champs troisième page\r\n  const [password2, setPassword2] = useState(\"\");\r\n  const [adresse, setAdresse] = React.useState(\"\");\r\n  const [validAdresse, setValidAdresse] = useState(false);\r\n  const [submited, setSubmited] = useState(false);\r\n  const [coordinates, setCoordinates] = React.useState({\r\n    lat: null,\r\n    lng: null,\r\n  });\r\nlet regexName = /^[a-z ,.'-]+$/i\r\n  const MenuProps = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: 48 * 4.5 + 8,\r\n        width: 400,\r\n      },\r\n    },\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setNomsServicesCHoisis(event.target.value);\r\n  };\r\n\r\n  /**\r\n   *  Envoi du formulaire d'inscription\r\n   */\r\n  function sendForm() {\r\n    let typesOrga = [];\r\n    if (estArtisan === true) {\r\n      typesOrga.push(\"Artisan\");\r\n    }\r\n    if (estMagasinSpe === true) {\r\n      typesOrga.push(\"Magasin spécialisé\");\r\n    }\r\n    if (estMagasinGen === true) {\r\n      typesOrga.push(\"Magasin généraliste\");\r\n    }\r\n    if (estAsso === true) {\r\n      typesOrga.push(\"Association\");\r\n    }\r\n    if (estMarque === true) {\r\n      typesOrga.push(\"Marque\");\r\n    }\r\n    let typeOffre = [];\r\n    if (estAlim === true) {\r\n      typeOffre.push(\"Alimentation\");\r\n    }\r\n    if (estAccess === true) {\r\n      typeOffre.push(\"Accessoire\");\r\n    }\r\n    typeOffre = typeOffre.concat(nomsServicesCHoisis);\r\n    fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        query: `\r\n                    mutation($organization: OrganizationInput!, $adress:AdressInput!, $user:UserIntput!){\r\n                        registerUserPro( organization: $organization,  adress:$adress, user:$user)\r\n                        {​​​​​​\r\n                            id\r\n                            organization{\r\n                                id\r\n                                supplier{\r\n                                    id\r\n                                }\r\n                            }\r\n                        }​​​​​​​\r\n                    }`,\r\n        variables: {\r\n          organization: {\r\n            name: companyName,\r\n            orgas: typesOrga,\r\n            offers: typeOffre,\r\n          },\r\n          adress: {\r\n            street: adresse,\r\n            geoLocation: {\r\n              latitude: coordinates.lat,\r\n              longitude: coordinates.lng,\r\n            },\r\n          },\r\n          user: {\r\n            name: nom + \" \" + prenom,\r\n            email: email,\r\n            phone: phone,\r\n            password: password1,\r\n          },\r\n        },\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(function (result) {\r\n        if (result.data.registerUserPro !== []) {\r\n          localStorage.setItem(\"userId\", result.data.registerUserPro.id);\r\n          localStorage.setItem(\r\n            \"organizationId\",\r\n            result.data.registerUserPro.organization.id\r\n          );\r\n          localStorage.setItem(\r\n            \"supplierId\",\r\n            result.data.registerUserPro.organization.supplier.id\r\n          );\r\n\r\n          window.location.href = \"/home\";\r\n        }\r\n      });\r\n    return {\r\n      nom: nom,\r\n      prenom: prenom,\r\n      email: email,\r\n      phone: phone,\r\n      companyName: companyName,\r\n      estArtisan: estArtisan,\r\n      estMagasinSpe: estMagasinSpe,\r\n      estMagasinGen: estMagasinGen,\r\n      estAsso: estAsso,\r\n      estMarque: estMarque,\r\n      estAlim: estAlim,\r\n      estAccess: estAccess,\r\n      estCession: estCession,\r\n      password: password1,\r\n      adresse: adresse,\r\n      coordinates: coordinates,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Lors de la sélectoin d'une adresse\r\n   * @param value\r\n   * @returns {Promise<void>}\r\n   */\r\n  const handleAddressSelect = async (value) => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n    setAdresse(value);\r\n    setCoordinates(latLng);\r\n    setValidAdresse(true);\r\n  };\r\n\r\n  /**\r\n   * Gestion des pages du formulaire d'inscription et envoi du formulaire\r\n   * @param event\r\n   */\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    let tmpPage = pageId;\r\n    switch (tmpPage) {\r\n      case 0: //page 0→1\r\n        // fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n        //     method: 'POST',\r\n        //     headers: {\r\n        //         'Content-Type': 'application/json',\r\n        //     },\r\n        //     body: JSON.stringify({\r\n        //         query: `\r\n        //     query{​​​​​​​\r\n        //         getMail(mail:\"${email}\"){​​​​​​​\r\n        //             id\r\n        //         }​​​​​​​\r\n        //     }`,\r\n        //     }),\r\n        // })\r\n        //     .then((res) => res.json())\r\n        //     .then(function (result) {\r\n        //         if (result.data.getMail !== null) {\r\n        //             setAlertMail(\"email déjà utilisé!\");\r\n        //         } else {\r\n        //             setPageId(tmpPage + 1);\r\n        //         }\r\n        //     });\r\n        if (password1 === password2 && password1.length >= 5) {\r\n          // sendForm()\r\n          setPageId(tmpPage + 1);\r\n        } else if (password1.length < 5) {\r\n          setAlert(\"La longueur des mots de passe doit excéder 5 caractères\");\r\n        } else if (password1 !== password2) {\r\n          setAlert(\"Mots de passe différents.\");\r\n        }\r\n        break;\r\n        setPageId(tmpPage + 1);\r\n        break;\r\n      case 1: //page 1→2\r\n        setSubmited(true);\r\n        if (validAdresse === true) {\r\n          fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              query: `\r\n                    query{​​​​​​​\r\n                        existsOrganizationByName(name:\"${companyName}\")​​​​​​​\r\n                    }`,\r\n            }),\r\n          })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n              if (result.data.existsOrganizationByName === false) {\r\n                setPageId(tmpPage + 1);\r\n              } else {\r\n                setAlertOrganization(\"Nom d'organisation déjà utilisé!\");\r\n              }\r\n            });\r\n        }\r\n        break;\r\n      // case 2: //envoi formulaire\r\n      //     if (password1 === password2 && password1.length >= 5) {   //envoi du formulaire d'inscription\r\n      //         sendForm()\r\n      //     } else if (password1.length < 5) {\r\n      //         setAlert(\"La longueur des mots de passe doit excéder 5 caractères\")\r\n      //     } else if (password1 !== password2) {\r\n      //         setAlert(\"Mots de passe différents.\")\r\n      //     }\r\n      //     break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Récupération du contenu de page selon le numéro de page\r\n   * page 0 : nom,prénom...\r\n   * page 1 : organisation\r\n   * page 2 : mot de passe\r\n   * @returns {*}\r\n   */\r\nconst [Focus, setFocus] = useState(false)\r\n  const FocusItem = ()=>{\r\n      setFocus(true)\r\n  }\r\n  function getFormContent() {\r\n    switch (pageId) {\r\n      case 0:\r\n        return (\r\n          <div style={{ marginTop: \"50px\" }}>\r\n            <Grid container justify=\"space-between\">\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                name=\"nom\"\r\n                label=\"Nom\"\r\n                type=\"text\"\r\n                id=\"nom\"\r\n                className={classes.formText}\r\n                onChange={(e) => setNom(e.target.value)}\r\n                value={nom}\r\n                onFocus={FocusItem}\r\n                error={!nom.length >= 4  && !regexName  && Focus ? true : false}\r\n              />\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                name=\"prenom\"\r\n                label=\"Prénom\"\r\n                type=\"text\"\r\n                id=\"prenom\"\r\n                className={classes.formText}\r\n                onChange={(e) => setPrenom(e.target.value)}\r\n                value={prenom}\r\n              />\r\n            </Grid>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email\"\r\n              type=\"email\"\r\n              name=\"email\"\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              value={email}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"phone\"\r\n              label=\"Téléphone\"\r\n              type=\"tel\"\r\n              name=\"phone\"\r\n              onChange={(e) => setPhone(e.target.value)}\r\n              value={phone}\r\n            />\r\n            {alertMail ? <Alert severity=\"error\">{alertMail}</Alert> : <></>}\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              type=\"password\"\r\n              name=\"pass1\"\r\n              id=\"password1\"\r\n              label=\"Mot de passe\"\r\n              onChange={(e) => setPassword1(e.target.value)}\r\n              value={password1}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              type=\"password\"\r\n              name=\"pass2\"\r\n              id=\"password2\"\r\n              label=\"Valider le mot de passe\"\r\n              onChange={(e) => setPassword2(e.target.value)}\r\n              value={password2}\r\n            />\r\n            {alert ? <Alert severity=\"error\">{alert}</Alert> : <></>}\r\n\r\n            <Box mt={10} style={{ width: \"93%\" }}>\r\n              <Grid container spacing={10} justify=\"flex-end\" mr={15}>\r\n                <Button\r\n                  onClick={(e) => handleSubmit(e)}\r\n                  variant=\"contained\"\r\n                  style={{ backgroundColor: colors.brown }}\r\n                  className={classes.btn}\r\n                >\r\n                  Suivant &gt;\r\n                </Button>\r\n              </Grid>\r\n            </Box>\r\n          </div>\r\n        );\r\n      case 1:\r\n        return (\r\n          <>\r\n            <Box mb={2}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"enseigne\"\r\n                label=\"Nom de l'enseigne\"\r\n                name=\"enseigne\"\r\n                value={companyName}\r\n                onChange={(e) => setCompanyName(e.target.value)}\r\n              />\r\n            </Box>\r\n            <PlacesAutocomplete\r\n              value={adresse}\r\n              onChange={setAdresse}\r\n              onSelect={handleAddressSelect}\r\n            >\r\n              {({\r\n                getInputProps,\r\n                suggestions,\r\n                getSuggestionItemProps,\r\n                loading,\r\n              }) => (\r\n                <div>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    {...getInputProps({\r\n                      label: \"Adresse\",\r\n                      placeholder: \"Entrez l'adresse\",\r\n                    })}\r\n                  />\r\n                  <div>\r\n                    {loading ? <div>Chargement...</div> : null}\r\n\r\n                    {suggestions.map((suggestion, i) => {\r\n                      const style = {\r\n                        backgroundColor: suggestion.active\r\n                          ? colors.brown\r\n                          : \"#fafafa\",\r\n                      };\r\n                      return (\r\n                        <div\r\n                          key={i}\r\n                          {...getSuggestionItemProps(suggestion, { style })}\r\n                        >\r\n                          {suggestion.description}\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </PlacesAutocomplete>\r\n            <Grid container>\r\n              <Grid container item xs={12} sm={6} md={6}>\r\n                <FormControl\r\n                  component=\"fieldset\"\r\n                  className={classes.formControl}\r\n                  required={true}\r\n                >\r\n                  <FormLabel component=\"legend\">Type de l'enseigne</FormLabel>\r\n                  <FormGroup>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={estArtisan}\r\n                          onChange={(e) => setEstArtisan(e.target.checked)}\r\n                          name=\"estArtisan\"\r\n                          color=\"default\"\r\n                        />\r\n                      }\r\n                      label=\"Artisan\"\r\n                    />\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={estMagasinSpe}\r\n                          onChange={(e) => setEstMagasinSpe(e.target.checked)}\r\n                          name=\"estMagasinSpe\"\r\n                          color=\"default\"\r\n                        />\r\n                      }\r\n                      label=\"Magasin spécialisé\"\r\n                    />\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={estMagasinGen}\r\n                          onChange={(e) => setEstMagasinGen(e.target.checked)}\r\n                          name=\"estMagasinGen\"\r\n                          color=\"default\"\r\n                        />\r\n                      }\r\n                      label=\"Magasin généraliste\"\r\n                    />\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={estAsso}\r\n                          onChange={(e) => setEstAsso(e.target.checked)}\r\n                          name=\"estAsso\"\r\n                          color=\"default\"\r\n                        />\r\n                      }\r\n                      label=\"Association\"\r\n                    />\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={estMarque}\r\n                          onChange={(e) => setEstMarque(e.target.checked)}\r\n                          name=\"estMarque\"\r\n                          color=\"default\"\r\n                        />\r\n                      }\r\n                      label=\"Marque\"\r\n                    />\r\n                  </FormGroup>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                <FormControl\r\n                  required\r\n                  component=\"fieldset\"\r\n                  className={classes.formControl}\r\n                >\r\n                  <FormLabel component=\"legend\">Type de l'offre</FormLabel>\r\n                  <FormGroup>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={estAlim}\r\n                          onChange={(e) => setEstAlim(e.target.checked)}\r\n                          name=\"Alimentation\"\r\n                          color=\"default\"\r\n                        />\r\n                      }\r\n                      label=\"Alimentation\"\r\n                    />\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={estAccess}\r\n                          onChange={(e) => setEstAccess(e.target.checked)}\r\n                          name=\"Accessoire\"\r\n                          color=\"default\"\r\n                        />\r\n                      }\r\n                      label=\"Accessoire\"\r\n                    />\r\n                    <FormControl>\r\n                      <InputLabel>Services</InputLabel>\r\n                      <Select\r\n                        multiple\r\n                        value={nomsServicesCHoisis}\r\n                        onChange={handleChange}\r\n                        input={<Input id=\"select-multiple-checkbox\" />}\r\n                        renderValue={(selected) => selected.join(\", \")}\r\n                        MenuProps={MenuProps}\r\n                      >\r\n                        {nomsServices.map((name) => (\r\n                          <MenuItem key={name} value={name}>\r\n                            <Checkbox\r\n                              checked={nomsServicesCHoisis.indexOf(name) > -1}\r\n                            />\r\n                            <ListItemText primary={name} />\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </FormGroup>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n            {alertOrganization ? (\r\n              <Alert severity=\"error\">{alertOrganization}</Alert>\r\n            ) : (\r\n              <></>\r\n            )}\r\n            {validAdresse === false && submited === true ? (\r\n              <Alert severity=\"error\">Adresse non complétée</Alert>\r\n            ) : (\r\n              <></>\r\n            )}\r\n            <Box mt={10}>\r\n              <Grid container spacing={10} justify=\"space-around\">\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ backgroundColor: colors.red }}\r\n                  className={classes.btn}\r\n                  onClick={() => setPageId(pageId - 1)}\r\n                >\r\n                  Précédent\r\n                </Button>\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  style={{ backgroundColor: colors.red }}\r\n                  className={classes.btn}\r\n                >\r\n                  Suivant &gt;\r\n                </Button>\r\n              </Grid>\r\n            </Box>\r\n          </>\r\n        );\r\n      // case 2:\r\n      //     return <div style={{ marginTop: '50px' }} >\r\n      //         <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass1\"\r\n      //             id=\"password1\" label=\"Mot de passe\" onChange={e => setPassword1(e.target.value)}\r\n      //             value={password1} />\r\n      //         <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass2\"\r\n      //             id=\"password2\" label=\"Valider le mot de passe\"\r\n      //             onChange={e => setPassword2(e.target.value)} value={password2} />\r\n      //         {alert ? <Alert severity=\"error\">{alert}</Alert> : <></>}\r\n      //         <Box mt={10}>\r\n      //             <Grid container spacing={10} justify=\"space-around\">\r\n      //                 <Button variant=\"contained\" style={{ backgroundColor: colors.red }} className={classes.btn}\r\n      //                     onClick={() => (setPageId(pageId - 1))}>\r\n      //                     Précédent\r\n      //                 </Button>\r\n      //                 <Button type=\"submit\" variant=\"contained\" style={{ backgroundColor: colors.brown }}\r\n      //                     className={classes.btn}>\r\n      //                     S'inscrire\r\n      //                 </Button>\r\n      //             </Grid>\r\n      //         </Box>\r\n      //     </div>\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <CssBaseline />\r\n      <Grid item xs={false} sm={6} md={6} className={classes.image} />\r\n      <Grid item xs={12} sm={6} md={6}>\r\n        <div className={classes.paper}>\r\n          <Grid>\r\n            <img alt=\"Logo Mister Coocky\" width={120} src={logo} />\r\n          </Grid>\r\n          <form className={classes.form} onSubmit={handleSubmit}>\r\n            {getFormContent()}\r\n          </form>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
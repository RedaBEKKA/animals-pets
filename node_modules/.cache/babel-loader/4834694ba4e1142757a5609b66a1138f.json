{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as Yup from \"yup\";\nimport { fr } from \"yup-locales\";\nimport { setLocale } from \"yup\";\nimport { useState } from \"react\";\nsetLocale(fr);\nexport function UseRegister() {\n  _s();\n\n  const [isSelected, setSelection] = useState(false);\n  const [hidePass, setHidePass] = useState(false);\n\n  const hadelChnageCheck = () => {\n    setSelection(!isSelected);\n  };\n\n  const registerValues = {\n    nom: \"\",\n    prenom: \"\",\n    email: \"\",\n    phone: \"\",\n    nom: \"\",\n    password: \"\",\n    cfpassword: \"\"\n  };\n\n  const onSubmit = async values => {//  await dispatchLogin(dispatch, configHead, values,isLogged,loading)\n  };\n\n  const lowercaseRegEx = /(?=.*[a-z])/;\n  const uppercaseRegEx = /(?=.*[A-Z])/;\n  const numericRegEx = /(?=.*[0-9])/;\n  const specialsRegEx = /[^A-Za-z 0-9]/g;\n  const emailRegex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\n  const phoneRegex = /(\\+\\d{1,3}\\s?)?((\\(\\d{3}\\)\\s?)|(\\d{3})(\\s|-?))(\\d{3}(\\s|-?))(\\d{4})(\\s?(([E|e]xt[:|.|]?)|x|X)(\\s?\\d+))?/g;\n  let RegsiterSchema = Yup.object().shape({\n    nom: Yup.string().max(15, \"nom est trop long - doit être de 15 caractères maximum.\").required(\"nom est requis\").min(4, \"nom est trop court - doit comporter au moins 4 caractères.\"),\n    prenom: Yup.string().max(15, \"prenom est trop long - doit être de 15 caractères maximum.\").required(\"prenom est requis\").min(4, \"prenom est trop court - doit comporter au moins 4 caractères.\"),\n    email: Yup.string().matches(emailRegex, \"Doit être un email valide !\").max(25, \"email est trop long - doit être de 15 caractères maximum.\").required(\"email est requis\").min(4, \"email est trop court - doit comporter au moins 4 caractères.\"),\n    phone: Yup.string().min(10, \"Numéro téléphone is too short - should be 10 number Minimum.\").matches(phoneRegex, \"Doit être un numéro valide !\").required(\"Numéro téléphone est requis\"),\n    password: Yup.string().max(15, \"Le mot de passe est trop long - doit être de 15 caractères maximum.\").min(4, \"Le mot de passe est trop court - doit comporter au moins 4 caractères.\").required(\"Mot de passe requis\"),\n    cfpassword: Yup.string().required(\"Confirme mot de passe est requis\").oneOf([Yup.ref(\"password\")], \"Les mots de passe ne correspondent pas\")\n  });\n\n  const fetchEmail = () => {\n    fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n            query{​​​​​​​\n                getMail(mail:\"${email}\"){​​​​​​​\n                    id\n                }​​​​​​​\n            }`\n      })\n    }).then(res => res.json()).then(function (result) {\n      if (result.data.getMail !== null) {\n        setAlertMail(\"email déjà utilisé!\");\n      } else {\n        setPageId(tmpPage + 1);\n      }\n    });\n  };\n\n  return {\n    registerValues,\n    RegsiterSchema,\n    fetchEmail\n  };\n}\n\n_s(UseRegister, \"bB65vvCZnKh0twbK8oFeDD7TwfI=\");\n\n_c = UseRegister;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseRegister\");","map":{"version":3,"sources":["D:/All - Projects/PROJECTS - Gitkraken/Project-12 - BigNova PetsAnimals/animals-pets/src/pages/Register/hooks/useForm.js"],"names":["Yup","fr","setLocale","useState","UseRegister","isSelected","setSelection","hidePass","setHidePass","hadelChnageCheck","registerValues","nom","prenom","email","phone","password","cfpassword","onSubmit","values","lowercaseRegEx","uppercaseRegEx","numericRegEx","specialsRegEx","emailRegex","phoneRegex","RegsiterSchema","object","shape","string","max","required","min","matches","oneOf","ref","fetchEmail","fetch","misterCoockyApi","method","headers","body","JSON","stringify","query","then","res","json","result","data","getMail","setAlertMail","setPageId","tmpPage"],"mappings":"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","sourcesContent":["import * as Yup from \"yup\";\r\nimport { fr } from \"yup-locales\";\r\nimport { setLocale } from \"yup\";\r\nimport { useState } from \"react\";\r\n\r\nsetLocale(fr);\r\n\r\nexport function UseRegister() {\r\n  const [isSelected, setSelection] = useState(false);\r\n  const [hidePass, setHidePass] = useState(false);\r\n  const hadelChnageCheck = () => {\r\n    setSelection(!isSelected);\r\n  };\r\n\r\n  const registerValues = {\r\n    nom: \"\",\r\n    prenom: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    nom: \"\",\r\n    password: \"\",\r\n    cfpassword: \"\",\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    //  await dispatchLogin(dispatch, configHead, values,isLogged,loading)\r\n  };\r\n\r\n  const lowercaseRegEx = /(?=.*[a-z])/;\r\n  const uppercaseRegEx = /(?=.*[A-Z])/;\r\n  const numericRegEx = /(?=.*[0-9])/;\r\n  const specialsRegEx = /[^A-Za-z 0-9]/g;\r\n  const emailRegex =\r\n    /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\r\n  const phoneRegex =\r\n    /(\\+\\d{1,3}\\s?)?((\\(\\d{3}\\)\\s?)|(\\d{3})(\\s|-?))(\\d{3}(\\s|-?))(\\d{4})(\\s?(([E|e]xt[:|.|]?)|x|X)(\\s?\\d+))?/g;\r\n\r\n  let RegsiterSchema = Yup.object().shape({\r\n    nom: Yup.string()\r\n      .max(15, \"nom est trop long - doit être de 15 caractères maximum.\")\r\n      .required(\"nom est requis\")\r\n      .min(4, \"nom est trop court - doit comporter au moins 4 caractères.\"),\r\n    prenom: Yup.string()\r\n      .max(15, \"prenom est trop long - doit être de 15 caractères maximum.\")\r\n      .required(\"prenom est requis\")\r\n      .min(4, \"prenom est trop court - doit comporter au moins 4 caractères.\"),\r\n    email: Yup.string()\r\n      .matches(emailRegex, \"Doit être un email valide !\")\r\n\r\n      .max(25, \"email est trop long - doit être de 15 caractères maximum.\")\r\n      .required(\"email est requis\")\r\n      .min(4, \"email est trop court - doit comporter au moins 4 caractères.\"),\r\n    phone: Yup.string()\r\n      .min(10, \"Numéro téléphone is too short - should be 10 number Minimum.\")\r\n      .matches(phoneRegex, \"Doit être un numéro valide !\")\r\n      .required(\"Numéro téléphone est requis\"),\r\n\r\n    password: Yup.string()\r\n      .max(\r\n        15,\r\n        \"Le mot de passe est trop long - doit être de 15 caractères maximum.\"\r\n      )\r\n      .min(\r\n        4,\r\n        \"Le mot de passe est trop court - doit comporter au moins 4 caractères.\"\r\n      )\r\n      .required(\"Mot de passe requis\"),\r\n\r\n    cfpassword: Yup.string()\r\n      .required(\"Confirme mot de passe est requis\")\r\n      .oneOf([Yup.ref(\"password\")], \"Les mots de passe ne correspondent pas\"),\r\n  });\r\n\r\n  const fetchEmail = () => {\r\n    fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        query: `\r\n            query{​​​​​​​\r\n                getMail(mail:\"${email}\"){​​​​​​​\r\n                    id\r\n                }​​​​​​​\r\n            }`,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(function (result) {\r\n        if (result.data.getMail !== null) {\r\n          setAlertMail(\"email déjà utilisé!\");\r\n        } else {\r\n          setPageId(tmpPage + 1);\r\n        }\r\n      });\r\n  };\r\n\r\n  return {\r\n    registerValues,\r\n    RegsiterSchema,\r\n    fetchEmail\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
[{"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\index.js":"1","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\reportWebVitals.js":"2","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\App.js":"3","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\components\\SecuredRoute.js":"4","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\index.js":"5","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\AddAnnonce.js":"6","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Home.js":"7","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\MyProductPage.js":"8","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Statistics.js":"9","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Addproduct.js":"10","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\SignIn.js":"11","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\StatisticsMrAdopt.js":"12","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\OrganizationInfo.js":"13","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\HomeAdmin.js":"14","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\MyAnnoncesPage.js":"15","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\FilesControlPanel.js":"16","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\UserProfile.js":"17","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\themes\\colors.js":"18","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\constante\\apiUrl.js":"19","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\components\\index.js":"20","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\components\\CardComponent.js":"21","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\components\\PersistantDrawer.js":"22","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\components\\Title.js":"23","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\components\\Header.js":"24","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\Register.js":"25","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\Components\\FormRegister.js":"26","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\Components\\From1.js":"27","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\hooks\\Styles.js":"28","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\hooks\\useForm.js":"29","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\Components\\From2.js":"30","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\Components\\Error.js":"31"},{"size":380,"mtime":1647158964036,"results":"32","hashOfConfig":"33"},{"size":375,"mtime":1647158964044,"results":"34","hashOfConfig":"33"},{"size":1586,"mtime":1647177301862,"results":"35","hashOfConfig":"33"},{"size":305,"mtime":1647158963988,"results":"36","hashOfConfig":"33"},{"size":805,"mtime":1647177280099,"results":"37","hashOfConfig":"33"},{"size":33852,"mtime":1647158964037,"results":"38","hashOfConfig":"33"},{"size":2093,"mtime":1647158964038,"results":"39","hashOfConfig":"33"},{"size":10780,"mtime":1647158964040,"results":"40","hashOfConfig":"33"},{"size":8852,"mtime":1647158964042,"results":"41","hashOfConfig":"33"},{"size":37973,"mtime":1647158964038,"results":"42","hashOfConfig":"33"},{"size":5899,"mtime":1647158964041,"results":"43","hashOfConfig":"33"},{"size":8849,"mtime":1647158964042,"results":"44","hashOfConfig":"33"},{"size":8696,"mtime":1647158964041,"results":"45","hashOfConfig":"33"},{"size":2677,"mtime":1647158964039,"results":"46","hashOfConfig":"33"},{"size":10213,"mtime":1647158964039,"results":"47","hashOfConfig":"33"},{"size":8848,"mtime":1647158964038,"results":"48","hashOfConfig":"33"},{"size":43139,"mtime":1647158964043,"results":"49","hashOfConfig":"33"},{"size":112,"mtime":1647158964044,"results":"50","hashOfConfig":"33"},{"size":81,"mtime":1647158963989,"results":"51","hashOfConfig":"33"},{"size":280,"mtime":1647158963988,"results":"52","hashOfConfig":"33"},{"size":1714,"mtime":1647158963986,"results":"53","hashOfConfig":"33"},{"size":9274,"mtime":1647158963987,"results":"54","hashOfConfig":"33"},{"size":334,"mtime":1647158963988,"results":"55","hashOfConfig":"33"},{"size":6465,"mtime":1647158963987,"results":"56","hashOfConfig":"33"},{"size":10681,"mtime":1647186339818,"results":"57","hashOfConfig":"33"},{"size":1837,"mtime":1647192109711,"results":"58","hashOfConfig":"33"},{"size":2867,"mtime":1647191813792,"results":"59","hashOfConfig":"33"},{"size":1872,"mtime":1647188475346,"results":"60","hashOfConfig":"33"},{"size":3411,"mtime":1647187360037,"results":"61","hashOfConfig":"33"},{"size":6667,"mtime":1647187422474,"results":"62","hashOfConfig":"33"},{"size":706,"mtime":1647190465087,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"114tenn",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\index.js",[],["140","141"],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\reportWebVitals.js",[],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\App.js",[],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\components\\SecuredRoute.js",[],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\index.js",[],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\AddAnnonce.js",["142","143","144","145","146","147","148","149"],"import React, {useEffect, useState} from 'react'\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport {Header, Title} from \"../components\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {colors} from \"../themes/colors\";\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport misterCoockyApi from '../constante/apiUrl'\r\nimport PlacesAutocomplete, {geocodeByAddress, getLatLng} from \"react-places-autocomplete\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\n\r\n\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: 300,\r\n            maxWidth: 50\r\n        }\r\n    },\r\n    getContentAnchorEl: null,\r\n    anchorOrigin: {\r\n        vertical: \"bottom\",\r\n        horizontal: \"left\"\r\n    },\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    btn: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        width: '100%',\r\n        height: '0px',\r\n    },\r\n    btn2: {\r\n        fontSize: \"0.7em\",\r\n        marginTop: \"10px\"\r\n    },\r\n    formControl: {\r\n        width: 200,\r\n        margin: \"5px 0 5px 0\"\r\n    },\r\n    item: {\r\n        maxWidth: 400,\r\n        padding: theme.spacing(2),\r\n    },\r\n    typotext: {\r\n        fontSize: '1.4em'\r\n    },\r\n\r\n}));\r\n\r\n/**\r\n * Page d'ajout d'une annonce\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction AddAnnonce(props) {\r\n    const classes = useStyles();\r\n    const [pageId, setPageId] = useState(0);\r\n    const [selectedAnnouncementToEdit, setSelectedAnnouncementToEdit] = useState(props.announcementId);\r\n\r\n    const [image, setImage] = useState(\"\");\r\n    const [addressMessageAlert, setAddressMessageAlert] = useState(null);\r\n    const [prix, setPrix] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [age, setAge] = useState(\"\");   //date de naissance\r\n    const [estVaccine, setEstVaccine] = useState(\"\");\r\n    const [titreAnnonce, setTitreAnnonce] = useState(\"\");\r\n    const [race, setRace] = useState(\"\");\r\n    const [estPuce, setEstPuce] = useState(\"\");\r\n    const [estTatoue, setEstTatoue] = useState(\"\");\r\n    const [numId, setNumId] = useState(\"\");\r\n    const [animalId, setAnimalId] = useState(\"\");\r\n    const [animalList, setAnimalList] = useState([]);\r\n    const [adress, setAdress] = useState(\"\");\r\n    const [fileTransmited, setFileTransmited] = useState(false);\r\n    const [coordinates, setCoordinates] = React.useState({\r\n        lat: null,\r\n        lng: null\r\n    });\r\n\r\n    /**\r\n     * Récupération de l'annonce si en mode édition\r\n     * et récupération des animaux\r\n     */\r\n    useEffect(() => {\r\n        //si mode édition\r\n        if (selectedAnnouncementToEdit) {\r\n            fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {    //on récupère l'item\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    query: `\r\n                    query{​​​​​​​\r\n                        announcement(id:\"${selectedAnnouncementToEdit}\"){​​​​​​​\r\n                            id\r\n                            platform\r\n                            title\r\n                            description\r\n                            date\r\n                            valid\r\n                            url\r\n                            image\r\n                            numberOfClick\r\n                            petAnnouncementInfo{\r\n                                pet{\r\n                                    id\r\n                                    name\r\n                                }\r\n                                price\r\n                                race\r\n                                age\r\n                                tattoo\r\n                                puce\r\n                                vaccine\r\n                                identificationNumber\r\n                            }\r\n                            postalAddress{\r\n                                street\r\n                                geoLocation{\r\n                                    latitude\r\n                                    longitude\r\n                                }\r\n                            }\r\n                        }\r\n                    }`,\r\n                }),\r\n            })\r\n                .then((res) => res.json())\r\n                .then(function (result) {\r\n                    setTitreAnnonce(result.data.announcement.title);\r\n                    setDescription(result.data.announcement.description);\r\n                    setImage((result.data.announcement.image));\r\n                    setAnimalId(result.data.announcement.petAnnouncementInfo.pet.id);\r\n                    setPrix(result.data.announcement.petAnnouncementInfo.price);\r\n                    setEstTatoue(result.data.announcement.petAnnouncementInfo.tattoo);\r\n                    setEstPuce(result.data.announcement.petAnnouncementInfo.puce);\r\n                    setEstVaccine(result.data.announcement.petAnnouncementInfo.vaccine);\r\n                    setNumId(result.data.announcement.petAnnouncementInfo.identificationNumber);\r\n                    setAge(result.data.announcement.petAnnouncementInfo.age);\r\n                    setRace(result.data.announcement.petAnnouncementInfo.race);\r\n                    setAdress(result.data.announcement.postalAddress.street);\r\n                    setCoordinates({\r\n                        lat: result.data.announcement.postalAddress.geoLocation.latitude,\r\n                        lng: result.data.announcement.postalAddress.geoLocation.longitude\r\n                    });\r\n                });\r\n        }\r\n\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                query{​​​​​​​\r\n                    pets{​​​​​​​\r\n                        id\r\n                        name\r\n                    }​​​​​​​\r\n                }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                setAnimalList(result.data.pets);\r\n            });\r\n    }, []);\r\n\r\n\r\n    /**\r\n     * lors de l'import du fichier\r\n     */\r\n    function handleFile(event) {\r\n        const file = event.target.files[0];\r\n        let data = new FormData();\r\n        data.append(\"file\", file);\r\n        const userId = localStorage.getItem('userId');\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/uploadFile?sectionName=adopt&userId=${userId}`, {\r\n            method: 'POST',\r\n            body: data\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                setFileTransmited(true);\r\n            }).catch(function (error) {\r\n            console.log('Erreur pendant l\\'upload : ' + error.message);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Mise en base 64 d'une image importée\r\n     * @param file\r\n     */\r\n    function imageUploaded(file) {\r\n        let base64String = \"\";\r\n        let reader = new FileReader();\r\n        reader.onload = function () {\r\n            base64String = reader.result.replace(\"data:\", \"\")\r\n                .replace(/^.+,/, \"\");\r\n            setImage(base64String);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    /**\r\n     * Apercu de l'image importée\r\n     * @param e\r\n     */\r\n    function handleImagePreview(e) {\r\n        if (e.target.files[0]) {\r\n            imageUploaded(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Lors de la sélection d'une adresse\r\n     * @param value\r\n     * @returns {Promise<void>}\r\n     */\r\n    const handleAddressSelect = async value => {\r\n        const results = await geocodeByAddress(value);\r\n        const latLng = await getLatLng(results[0]);\r\n        setAdress(value);\r\n        setCoordinates(latLng);\r\n    };\r\n\r\n    /**\r\n     * Lors de l'envoi du formulaire de création\r\n     * @param e\r\n     */\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (coordinates.lng !== null) {\r\n            if (selectedAnnouncementToEdit) { //si mode d'édition\r\n                fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        query: `\r\n                        mutation updateAnnouncement(\r\n                        $announcementInput : AnnouncementInput!,\r\n                        $petAnnouncementInfosInput : PetAnnouncementInfosInput!){\r\n                            updateAnnouncement(\r\n                                id: \"${selectedAnnouncementToEdit}\",\r\n                                announcementInput : $announcementInput,\r\n                                petAnnouncementInfosInput : $petAnnouncementInfosInput \r\n                            ){​​​​​​\r\n                            id\r\n                          }​​​​​​​\r\n                        }`,\r\n                        variables: {\r\n                            \"announcementInput\": {\r\n                                \"platform\": \"Mister Coocky\",\r\n                                \"title\": titreAnnonce,\r\n                                \"description\": description,\r\n                                \"url\": \"\",\r\n                                \"image\": image,\r\n                                \"postalAddress\": {\r\n                                    \"street\": adress,\r\n                                    \"geoLocation\": {\r\n                                        \"latitude\": coordinates.lat,\r\n                                        \"longitude\": coordinates.lng\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"petAnnouncementInfosInput\": {\r\n                                \"petId\": animalId,\r\n                                \"price\": prix,\r\n                                \"race\": race,\r\n                                \"age\": age,\r\n                                \"tattoo\": estTatoue,\r\n                                \"puce\": estPuce,\r\n                                \"vaccine\": estVaccine,\r\n                                \"identificationNumber\": numId\r\n                            }\r\n                        }\r\n                    }),\r\n                })\r\n                    .then((res) => res.json())\r\n                    .then(function (result) {\r\n                        if (result.data.updateAnnouncement.id !== null) {\r\n                            window.location.href = '/annonces';\r\n                        }\r\n                    });\r\n            } else {\r\n                fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        query: `\r\n                            mutation CreateAnnouncement($userId:String!, $announcementInput:AnnouncementInput!, $petAnnouncementInfosInput:PetAnnouncementInfosInput!){\r\n                            createAnnouncement( userId : $userId, announcementInput : $announcementInput, petAnnouncementInfosInput : $petAnnouncementInfosInput\r\n                            ) {​​​​​​\r\n                                id\r\n                            }​​​​​​   ​\r\n                    }`,\r\n                        variables:\r\n                            {\r\n                                \"userId\": localStorage.getItem('userId'),\r\n                                \"announcementInput\": {\r\n                                    \"platform\": \"Mister Coocky\",\r\n                                    \"title\": titreAnnonce,\r\n                                    \"description\": description,\r\n                                    \"url\": \"\",\r\n                                    \"image\": image,\r\n                                    \"postalAddress\": {\r\n                                        \"street\": adress,\r\n                                        \"geoLocation\": {\r\n                                            \"latitude\": coordinates.lat,\r\n                                            \"longitude\": coordinates.lng\r\n                                        }\r\n                                    }\r\n                                },\r\n                                \"petAnnouncementInfosInput\": {\r\n                                    \"petId\": animalId,\r\n                                    \"price\": prix,\r\n                                    \"race\": race,\r\n                                    \"age\": age,\r\n                                    \"tattoo\": estTatoue,\r\n                                    \"puce\": estPuce,\r\n                                    \"vaccine\": estVaccine,\r\n                                    \"identificationNumber\": numId\r\n                                }\r\n                            }\r\n                    }),\r\n                })\r\n                    .then((res) => res.json())\r\n                    .then(function (result) {\r\n                        if (result.data.createAnnouncement.id !== null) {\r\n                            window.location.href = '/annonces';\r\n                        }\r\n                    });\r\n            }\r\n        } else {\r\n            setAddressMessageAlert(\"Addresse incomplète\")\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Renvoi du contenu de la page\r\n     * @returns {*}\r\n     */\r\n    function getAddProductContent() {\r\n        let dataImg = \"data:image/png;base64,\" + image;\r\n        switch (pageId) {\r\n            case 0:\r\n                return <Box mt={10}>\r\n                    {\r\n                        selectedAnnouncementToEdit ?\r\n                            <h2 style={{color: colors.brown}}>Mode édition Annonce </h2> : <></>\r\n                    }\r\n                    <form className={classes.form} onSubmit={handleSubmit}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid container item xs={12} spacing={2}>\r\n                                <Grid item xs={12} sm={3} align={'center'}>\r\n                                    {\r\n                                        image ?\r\n                                            <img src={dataImg} xs={12} width={200}/> :\r\n                                            null\r\n                                    }\r\n                                    <Button variant=\"outlined\" xs={12} component=\"label\" size={'small'}>\r\n                                        {image ? \"Remplacer l'image\" : \"Ajouter une image\"}\r\n                                        <input type=\"file\" accept=\"image/*\" hidden onChange={handleImagePreview}/>\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item sm={12} md={6} lg={3}>\r\n                                    <FormControl variant=\"outlined\" className={classes.formControl} required={true}\r\n                                                 spacing={3}>\r\n                                        <InputLabel id=\"select-animal\">Animal</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"select-animal\"\r\n                                            id=\"select-animal\"\r\n                                            onChange={e => setAnimalId(e.target.value)}\r\n                                            value={animalId}\r\n                                            label=\"Animal\">\r\n                                            {\r\n                                                animalList.map(ani => {\r\n                                                    return <MenuItem key={ani.id} value={ani.id}>{ani.name}</MenuItem>\r\n                                                })\r\n                                            }\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                    <TextField\r\n                                        className={classes.formControl}\r\n                                        id=\"idRace\"\r\n                                        label=\"Race\"\r\n                                        value={race}\r\n                                        onChange={e => (setRace(e.target.value))}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                    <TextField\r\n                                        required\r\n                                        className={classes.formControl}\r\n                                        id=\"idPrix\"\r\n                                        label=\"Prix\"\r\n                                        inputmode=\"decimal\"\r\n                                        type=\"number\"\r\n                                        InputProps={{ inputProps: { min: 0, step: \"0.01\"} }}\r\n                                        value={prix}\r\n                                        onChange={e => (setPrix(e.target.value))}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                    <FormControl variant=\"outlined\" className={classes.formControl} required={true}\r\n                                                 spacing={3}>\r\n                                        <InputLabel id=\"select-animal\">Age</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"select-age\"\r\n                                            id=\"select-age\"\r\n                                            onChange={e => setAge(e.target.value)}\r\n                                            value={age}\r\n                                            label=\"age\">\r\n                                            <MenuItem key=\"1\" value=\"Moins de 8 semaines\">Moins de 8 semaines</MenuItem>\r\n                                            <MenuItem key=\"2\" value=\"Plus de 8 semaines\">Plus de 8 semaines</MenuItem>\r\n                                            <MenuItem key=\"3\" value=\"Adulte\">Adulte</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item sm={12} md={6} lg={3}>\r\n                                    <TextField\r\n                                        required\r\n                                        className={classes.formControl}\r\n                                        id=\"idTitreAnnonce\"\r\n                                        label=\"Titre annonce\"\r\n                                        value={titreAnnonce}\r\n                                        onChange={e => (setTitreAnnonce(e.target.value))}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n\r\n                                    <FormControl variant=\"outlined\" className={classes.formControl} spacing={3}>\r\n                                        <InputLabel id=\"select-vaccine\">Vacciné</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"select-vaccine\"\r\n                                            id=\"select-vaccine\"\r\n                                            value={estVaccine}\r\n                                            onChange={e => setEstVaccine(e.target.value)}\r\n                                            label=\"vaccine\">\r\n                                            <MenuItem value={false}>Non</MenuItem>\r\n                                            <MenuItem value={true}>Oui</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n\r\n                                    <FormControl variant=\"outlined\" className={classes.formControl} spacing={3}>\r\n                                        <InputLabel id=\"select-puce\">Pucé</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"select-puce\"\r\n                                            id=\"select-puce\"\r\n                                            value={estPuce}\r\n                                            onChange={e => setEstPuce(e.target.value)}\r\n                                            label=\"puce\">\r\n                                            <MenuItem value={false}>Non</MenuItem>\r\n                                            <MenuItem value={true}>Oui</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                    <FormControl variant=\"outlined\" className={classes.formControl} spacing={3}>\r\n                                        <InputLabel id=\"select-puce\">Tattoué</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"select-tattoue\"\r\n                                            id=\"select-tattoue\"\r\n                                            value={estTatoue}\r\n                                            onChange={e => setEstTatoue(e.target.value)}\r\n                                            label=\"puce\">\r\n                                            <MenuItem value={false}>Non</MenuItem>\r\n                                            <MenuItem value={true}>Oui</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n\r\n                                </Grid>\r\n                                <Grid item sm={12} md={6} lg={3}>\r\n                                    <TextField\r\n                                        id=\"description\"\r\n                                        label=\"Description\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        className={classes.formControl}\r\n                                        onChange={e => setDescription(e.target.value)}\r\n                                        value={description}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                    <TextField\r\n                                        className={classes.formControl}\r\n                                        id=\"idNumId\"\r\n                                        label=\"Numéro d'identification\"\r\n                                        variant=\"outlined\"\r\n                                        value={numId}\r\n                                        onChange={e => (setNumId(e.target.value))}\r\n                                    />\r\n\r\n                                    <PlacesAutocomplete\r\n                                        value={adress}\r\n                                        onChange={setAdress}\r\n                                        onSelect={handleAddressSelect}\r\n                                    >\r\n                                        {({getInputProps, suggestions, getSuggestionItemProps, loading}) => (\r\n                                            <div>\r\n                                                <TextField className={classes.formControl} variant=\"outlined\" required\r\n                                                           fullWidth {...getInputProps({\r\n                                                    label: \"Adresse\",\r\n                                                    placeholder: \"Entrez l'adresse\"\r\n                                                })} />\r\n                                                {addressMessageAlert ? <Alert className={classes.formControl}\r\n                                                                              severity=\"error\">{addressMessageAlert}</Alert> : <></>}\r\n                                                <div>\r\n                                                    {loading ? <div>Chargement...</div> : null}\r\n\r\n                                                    {suggestions.map(suggestion => {\r\n                                                        const style = {\r\n                                                            backgroundColor: suggestion.active ? colors.brown : \"#fafafa\"\r\n                                                        };\r\n                                                        return (\r\n                                                            <div  {...getSuggestionItemProps(suggestion, {style})}>\r\n                                                                {suggestion.description}\r\n                                                            </div>\r\n                                                        );\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </PlacesAutocomplete>\r\n\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container item xs={12} spacing={1}>\r\n                                <React.Fragment>\r\n                                    <Grid item xs={12} sm={3} align={'center'}>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={3}>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={3}>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={3} align={'center'}>\r\n                                        <Button type=\"submit\" variant=\"contained\"\r\n                                                style={{backgroundColor: colors.brown}}>Valider</Button>\r\n                                    </Grid>\r\n                                </React.Fragment>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Box>;\r\n                break;\r\n            case 1:\r\n                return <Grid container spacing={3} direction={\"column\"} align={\"center\"} className={classes.root}>\r\n                    <Grid className={classes.paper}>\r\n                        <Grid container spacing={2} className={classes.item}>\r\n                            <Grid item>\r\n                                <Avatar>1</Avatar>\r\n                            </Grid>\r\n                            <Grid item xs zeroMinWidth>\r\n                                <Typography className={classes.typotext}>Télécharger le template</Typography>\r\n                                <Button href={\"files/formulaire_produits.xlsx\"} className={classes.btn2}\r\n                                        style={{backgroundColor: colors.red}} download target=\"_blank\"\r\n                                        startIcon={<GetAppIcon/>}> Télécharger le template</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid className={classes.paper}>\r\n                        <Grid container spacing={2} className={classes.item}>\r\n                            <Grid item>\r\n                                <Avatar>2</Avatar>\r\n                            </Grid>\r\n                            <Grid item xs zeroMinWidth>\r\n                                <span className={classes.typotext}>Remplir le document Excel avec vos différents produits</span>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid className={classes.paper}>\r\n                        <Grid container spacing={2} className={classes.item}>\r\n                            <Grid item>\r\n                                <Avatar>3</Avatar>\r\n                            </Grid>\r\n                            <Grid item xs zeroMinWidth>\r\n                                <Typography noWrap className={classes.typotext}>Déposer le template rempli</Typography>\r\n                                <Button className={classes.btn2} variant=\"contained\"\r\n                                        style={{backgroundColor: colors.red}} component=\"label\"\r\n                                        startIcon={<GetAppIcon/>}>Déposer le template <input accept=\".xlsx\" type=\"file\"\r\n                                                                                             onChange={e => (handleFile(e))}\r\n                                                                                             hidden/> </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    {\r\n                        <Snackbar open={fileTransmited} autoHideDuration={6000} anchorOrigin={{vertical: \"top\",horizontal: \"center\"}}\r\n                                  onClose={() => setFileTransmited(false)}>\r\n                            <Alert severity=\"success\">Fichier transmis, il sera bientôt traîté</Alert>\r\n                        </Snackbar>\r\n                    }\r\n                </Grid>;\r\n                break;\r\n            case 2:\r\n                return <Grid className={classes.paper} align={'center'}>\r\n                    <Grid container spacing={2} className={classes.item}>\r\n                        <Grid item>\r\n                            <Avatar>1</Avatar>\r\n                        </Grid>\r\n                        <Grid item xs zeroMinWidth>\r\n                            <Typography noWrap className={classes.typotext}>Déposer le template rempli</Typography>\r\n                            <Button className={classes.btn2} variant=\"contained\" style={{backgroundColor: colors.red}}\r\n                                    component=\"label\" startIcon={<GetAppIcon/>}>Déposer le template <input\r\n                                accept=\".xlsx\" type=\"file\" onChange={e => (handleFile(e))} hidden/> </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    {\r\n                        <Snackbar open={fileTransmited} autoHideDuration={6000} anchorOrigin={{vertical: \"top\",horizontal: \"center\"}}\r\n                                  onClose={() => setFileTransmited(false)}>\r\n                            <Alert severity=\"success\">Fichier transmis, il sera bientôt traîté</Alert>\r\n                        </Snackbar>\r\n                    }\r\n                </Grid>;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Container>\r\n                <Title name={\"Mr.Adopt — Ajouter des annonces\"}/>\r\n                <Grid container spacing={5} justify=\"center\">\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button onClick={() => window.location.href = '/annonces'} className={classes.btn}\r\n                                variant=\"contained\" style={{backgroundColor: colors.grey}}>Mes annonces</Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button onClick={() => window.location.href = '/addAnnonce'} className={classes.btn}\r\n                                variant=\"contained\" style={{backgroundColor: colors.brown}}>Ajouter une annonce</Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button onClick={() => window.location.href = '/statisticsMrAdopt'} className={classes.btn}\r\n                                variant=\"contained\" style={{backgroundColor: colors.grey}}>Statistiques</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={5} justify=\"center\">\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button className={classes.btn} variant=\"contained\"\r\n                                style={pageId === 0 ? {backgroundColor: colors.brown} : {backgroundColor: colors.grey}}\r\n                                onClick={e => (setPageId(0))}>Remplir un formulaire</Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button className={classes.btn} variant=\"contained\"\r\n                                style={pageId === 1 ? {backgroundColor: colors.brown} : {backgroundColor: colors.grey}}\r\n                                startIcon={< GetAppIcon/>} onClick={e => (setPageId(1))}>Remplir un template</Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button className={classes.btn} variant=\"contained\"\r\n                                style={pageId === 2 ? {backgroundColor: colors.brown} : {backgroundColor: colors.grey}}\r\n                                startIcon={<GetAppIcon/>} onClick={e => (setPageId(2))}>Importer un fichier</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Box mt={5}>\r\n                    {getAddProductContent()}\r\n                </Box>\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default AddAnnonce\r\n","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Home.js",["150","151","152"],"import {Box, Container} from '@material-ui/core'\r\nimport React, {useEffect, useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {CardComponent, Header} from '../components';\r\nimport mrAdoptLogo from \"../images/mrAdoptLogo.jpg\"\r\nimport smrLogo from \"../images/smrLogo.jpg\";\r\nimport misterCoockyApi from \"../constante/apiUrl\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    centerElements: {\r\n        height: '90vh',\r\n        display: 'flex',\r\n        'justify-content': 'center',\r\n        'align-items': 'center'\r\n    }\r\n}));\r\n\r\n/**\r\n * Page principale d'un utilisateur pro standard (pas admin)\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction Home() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Container className={classes.centerElements}>\r\n                <Box my={5}>\r\n                    <Grid container spacing={5}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <CardComponent path={\"/products\"} image={smrLogo} title=\"SMR\"\r\n                                           description=\"Notre solution va vous aider à faire connaître vos offre de produits(Alimentation, Accessoire). Elle va vous permettre ainsi de mettre en avant leurs aspects Saint, Malin et/ou Responsable (SMR).\"/>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <CardComponent path={\"/annonces\"} image={mrAdoptLogo} title=\"Mr.Adopt\"\r\n                                           description=\"Notre solution vous aidera à trouver un refuge à vos animaux simplement et rapidement. Vendre, donner et/ou échanger vos animaux se fait en 5 minutes grâceà une image !\"/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Home\r\n","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\MyProductPage.js",["153","154"],"import React, {useEffect, useState} from 'react'\r\nimport {Checkbox, makeStyles} from \"@material-ui/core\";\r\nimport {Header, Title} from \"../components\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {colors} from \"../themes/colors\";\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Modal from 'react-modal';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport {createMuiTheme, MuiThemeProvider} from '@material-ui/core/styles';\r\nimport misterCoockyApi from '../constante/apiUrl'\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)',\r\n    },\r\n};\r\n\r\n\r\nconst getMuiTheme = () => createMuiTheme({\r\n    overrides: {\r\n        MuiTableHead: {\r\n            root: {\r\n                position: 'sticky'\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    btn: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        width: '100%',\r\n        height: '0px',\r\n    },\r\n\r\n}));\r\n\r\n/**\r\n * Page d'affichage des Produits de l'utilisateur\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction MyProductPage() {\r\n    const [data, setData] = useState([]);   //produits de l'utilisateur\r\n    const [selectedItemId, setSelectedItemId] = useState(false);   //produits de l'utilisateur\r\n    const [selectedItemIdToDelete, setSelectedItemIdToDelete] = useState(null);   //produits de l'utilisateur\r\n    const classes = useStyles();\r\n\r\n    function arrangeParameters(arr) {\r\n        var items = [];\r\n        arr.forEach(i => {\r\n            items.push({\r\n                'product': i.product.name,\r\n                'mark': i.mark.name,\r\n                'ttcPrice': Math.round(i.ttcPrice/(1-Math.abs(i.discount/100))),\r\n                'pet': i.pet.name,\r\n                'offer': i.offer.name,\r\n                'category': i.category.name,\r\n                'discount': i.discount,\r\n                'isSmart': i.isSmart,\r\n                'isHealthy': i.isHealthy,\r\n                'isResponsible': i.isResponsible,\r\n                'img': i.uri,\r\n                'id': i.id,\r\n                'priceDeducted': i.ttcPrice\r\n            })\r\n        });\r\n        setData(items)\r\n    }\r\n    const options = {\r\n        selectableRows: false,\r\n        customHeadRender: {\r\n            position: 'absolute'\r\n        },\r\n        textLabels: {\r\n            body: {\r\n                noMatch: 'Aucun produit trouvé'\r\n            },\r\n            pagination: {\r\n                next: \"Page suivante\",\r\n                previous: \"Page précédente\",\r\n                rowsPerPage: \"Produits par page:\",\r\n                displayRows: \"sur\",\r\n            },\r\n        }\r\n    };\r\n    const columns = [\r\n        {\r\n            name: \"img\",\r\n            label: \"Image\",\r\n            options: {\r\n                customBodyRender: function (data) {\r\n                    if (data) {\r\n                        const dataImg = \"data:image/png;base64,\" + data;\r\n                        return <img src={dataImg} width={80}/>;\r\n                    } else return 'N/A'\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: \"product\",\r\n            label: \"Nom\"\r\n        },\r\n        {\r\n            name: \"mark\",\r\n            label: \"Marque\"\r\n        },\r\n        {\r\n            name: \"ttcPrice\",\r\n            label: \"Prix (€)\"\r\n        },\r\n        {\r\n            name: \"discount\",\r\n            label: \"Discount (%)\"\r\n        },\r\n        {\r\n            name: \"priceDeducted\",\r\n            label: \"Prix affiché (€)\"\r\n        },\r\n        {\r\n            name: \"pet\",\r\n            label: \"Animal\"\r\n        },\r\n        {\r\n            name: \"offer\",\r\n            label: \"Type de produit\"\r\n        },\r\n        {\r\n            name: \"category\",\r\n            label: \"Catégorie\"\r\n        },\r\n        {\r\n            name: \"isHealthy\",\r\n            label: \"Sain\",\r\n            options: {\r\n                customBodyRender: function (data) {\r\n                    return <Checkbox checked={data} disabled={true}/>;\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: \"isSmart\",\r\n            label: \"Malin\",\r\n            options: {\r\n                customBodyRender: function (data) {\r\n                    return <Checkbox checked={data} disabled={true}/>;\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: \"isResponsible\",\r\n            label: \"Responsable\",\r\n            options: {\r\n                customBodyRender: function (data) {\r\n                    return <Checkbox checked={data} disabled={true}/>;\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: \"id\",\r\n            label: \"Actions\",\r\n            options: {\r\n                customBodyRender: function (res) {\r\n                    return <div>\r\n                        <IconButton aria-label=\"Editer\" style={{padding: \"3px\"}} onClick={() => setSelectedItemId(res)}>\r\n                            <EditOutlinedIcon style={{color: colors.grey}}/>\r\n                        </IconButton>\r\n                        <IconButton aria-label=\"Supprimer\" style={{padding: \"3px\"}}\r\n                                    onClick={() => setSelectedItemIdToDelete(res)}>\r\n                            <DeleteOutlinedIcon style={{color: colors.grey}}/>\r\n                        </IconButton>\r\n                    </div>\r\n                }\r\n            }\r\n        },\r\n\r\n    ];\r\n\r\n    useEffect(() => {\r\n        refreshList()\r\n    }, []);\r\n\r\n\r\n    /**\r\n     * Suppression de l'item sélectionné\r\n     * @param id\r\n     */\r\n    function deleteItem(id) {\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    mutation DeleteItemById($id: String!) {\r\n                      deleteItemById(id: $id)\r\n                    }`,\r\n                variables: {\r\n                    \"id\": id\r\n                }\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                refreshList();\r\n                setSelectedItemIdToDelete(null)\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Récupération des produits\r\n     */\r\n    function refreshList() {\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query{​​​​​​​\r\n                        getItemsBySupplierId(id:\"${localStorage.getItem('supplierId')}\"){​​​​​​​\r\n                            product{\r\n                                name\r\n                            }\r\n                            mark{\r\n                                name\r\n                            }\r\n                            ttcPrice\r\n                            discount\r\n                            pet{\r\n                                name\r\n                            }\r\n                            offer{\r\n                                name\r\n                            }\r\n                            category{\r\n                                name\r\n                            }\r\n                            subCategories{\r\n                                name\r\n                            }\r\n                            isHealthy\r\n                            isResponsible\r\n                            isSmart\r\n                            uri\r\n                            id\r\n                          }​​​​​​​\r\n                    }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                arrangeParameters(result.data.getItemsBySupplierId);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                selectedItemId ?\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: \"/addProduct\",\r\n                            state: {itemId: selectedItemId}\r\n                        }}\r\n                    />\r\n                    : null\r\n            }\r\n            <Header/>\r\n            <Container>\r\n                <Modal\r\n                    isOpen={selectedItemIdToDelete !== null}\r\n                    onRequestClose={() => setSelectedItemIdToDelete(null)}\r\n                    style={customStyles}\r\n                >\r\n                    <Grid>Etes vous sûr de vouloir supprimer l'article?</Grid>\r\n                    <Button onClick={() => deleteItem(selectedItemIdToDelete)}>Oui</Button>\r\n                    <Button onClick={() => setSelectedItemIdToDelete(null)}>Non</Button>\r\n                </Modal>\r\n                <Title name={\"SMR — Produits\"}/>\r\n                <Grid container spacing={5} justify=\"center\">\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button component={Link} to=\"/products\" className={classes.btn} variant=\"contained\"\r\n                                style={{backgroundColor: colors.brown}}>Produits ajoutés</Button>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button component={Link} to=\"/addproduct\" className={classes.btn} variant=\"contained\"\r\n                                style={{backgroundColor: colors.grey}}>Ajout d'un produit</Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button component={Link} to=\"/statistics\" className={classes.btn} variant=\"contained\"\r\n                                style={{backgroundColor: colors.grey}}>Statistiques</Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Box mt={5}>\r\n                    <MuiThemeProvider theme={getMuiTheme()}>\r\n                        <MUIDataTable\r\n                            title={\"Produits\"}\r\n                            data={data}\r\n                            columns={columns}\r\n                            options={options}\r\n                        />\r\n                    </MuiThemeProvider>\r\n                </Box>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyProductPage\r\n","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Statistics.js",["155","156"],"import React, {useEffect, useState} from 'react'\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport {Header, Title} from \"../components\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {colors} from \"../themes/colors\";\r\nimport {Bar} from 'react-chartjs-2';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {Link} from \"react-router-dom\";\r\nimport misterCoockyApi from '../constante/apiUrl'\r\n\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: 300,\r\n            maxWidth: 50\r\n        }\r\n    },\r\n    // Show dropdow at bottom of select\r\n    getContentAnchorEl: null,\r\n    anchorOrigin: {\r\n        vertical: \"bottom\",\r\n        horizontal: \"left\"\r\n    }\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    btn: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        width: '100%',\r\n        height: '0px',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing.unit,\r\n        minWidth: 120,\r\n        maxWidth: 300\r\n    }\r\n}));\r\n\r\n/**\r\n * Page de statistiques de produits\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction Statistics() {\r\n    const classes = useStyles();\r\n    const [productsNames, setProductsNames] = useState([]);\r\n    const [productsClicks, setProductsClicks] = useState([]);\r\n    const [productsSelected, setProductsSelected] = useState([]);\r\n\r\n    /**\r\n     * Récupération des produits de l'utilisateur\r\n     */\r\n    useEffect(() => {\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query{​​​​​​​\r\n                        getItemsBySupplierId(id:\"${localStorage.getItem('supplierId')}\"){​​​​​​​\r\n                            id\r\n                            product{\r\n                                name\r\n                            }\r\n                            numberOfClick\r\n                        }​​​​​​​\r\n                    }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then((json) => {\r\n                let tmpProductsName = [];\r\n                let tmpProductsClicks = [];\r\n                if (json.data.getItemsBySupplierId)\r\n                    json.data.getItemsBySupplierId.forEach((produit) => {\r\n                        tmpProductsName.push(produit.product.name);\r\n                        tmpProductsClicks.push(produit.numberOfClick)\r\n                    });\r\n                setProductsNames(tmpProductsName);\r\n                setProductsClicks(tmpProductsClicks);\r\n                setProductsSelected([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])   //on n'affiche que les 20premiers\r\n            })\r\n    }, []);\r\n\r\n    /**\r\n     * Récupération des noms des produits\r\n     * @returns {Array}\r\n     */\r\n    function getSelectedNames() {\r\n        let selectedNames = [];\r\n        for (let i = 0; i < productsNames.length; i++) {\r\n            if (productsSelected.includes(i)) {\r\n                selectedNames.push(productsNames[i])\r\n            }\r\n        }\r\n        return selectedNames\r\n    }\r\n\r\n    /**\r\n     * Récupération des nombres de clicks des produits\r\n     * @returns {Array}\r\n     */\r\n    function getSelectedClicks() {\r\n        let selectedClicks = [];\r\n        for (let i = 0; i < productsClicks.length; i++) {\r\n            if (productsSelected.includes(i)) {\r\n                selectedClicks.push(productsClicks[i])\r\n            }\r\n        }\r\n        return selectedClicks\r\n    }\r\n\r\n    /**\r\n     * Lors du click sur un select\r\n     * @param event\r\n     */\r\n    function handleChange(event) {\r\n        let changeProductState = -1;\r\n        //on récupère le produit changé\r\n        productsNames.map((product, index) => {\r\n            if (!event.target.value.includes(product)) {\r\n                changeProductState = index\r\n            }\r\n        });\r\n        //on change le produit concerné\r\n        let tmpSelected = [];\r\n        productsSelected.map(selec => {\r\n            tmpSelected.push(selec)\r\n        });   //on rerempli par les valeurs initiales\r\n        if (tmpSelected.includes(changeProductState)) {  //lors d'une suppression\r\n            const index = tmpSelected.indexOf(changeProductState);\r\n            if (index > -1) {\r\n                tmpSelected.splice(index, 1);\r\n            }\r\n        } else {  //lors d'un ajout\r\n            tmpSelected.push(changeProductState)\r\n        }\r\n        setProductsSelected(tmpSelected)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Container>\r\n                <Title name={\"SMR — Statistiques\"}/>\r\n                <Grid container spacing={5} justify=\"center\">\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button component={Link} to=\"/products\" className={classes.btn} variant=\"contained\"\r\n                                style={{backgroundColor: colors.grey}}>Produits ajoutés</Button>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button component={Link} to=\"/addproduct\" className={classes.btn} variant=\"contained\"\r\n                                style={{backgroundColor: colors.grey}}>Ajout d'un produit</Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button component={Link} to=\"/statistics\" className={classes.btn} variant=\"contained\"\r\n                                style={{backgroundColor: colors.brown}}>Statistiques</Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Box mt={3}>\r\n                    <Grid container justify=\"flex-end\">\r\n                        <FormControl className={classes.formControl}>\r\n                            <InputLabel htmlFor=\"select-multiple-checkbox\">Filtrer</InputLabel>\r\n                            <Select\r\n                                multiple\r\n                                value={productsNames}\r\n                                onChange={handleChange}\r\n                                input={<Input id=\"select-multiple-checkbox\"/>}\r\n                                renderValue={selected => selected.join(\", \")}\r\n                                MenuProps={MenuProps}\r\n                            >\r\n                                {productsNames.map((name, index) => (\r\n                                    <MenuItem key={name} value={name}>\r\n                                        <Checkbox checked={productsSelected.includes(name)}/>\r\n                                        <ListItemText primary={name}/>\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Bar\r\n                        data={{\r\n                            labels: getSelectedNames(),\r\n                            datasets: [{\r\n                                label: 'Nombre de vues',\r\n                                data: getSelectedClicks(),\r\n                                backgroundColor: [\r\n                                    'rgba(255, 99, 132, 0.2)',\r\n                                    'rgba(54, 162, 235, 0.2)',\r\n                                    'rgba(255, 206, 86, 0.2)',\r\n                                    'rgba(75, 192, 192, 0.2)',\r\n                                    'rgba(153, 102, 255, 0.2)',\r\n                                    'rgba(255, 159, 64, 0.2)'\r\n                                ],\r\n                                borderColor: [\r\n                                    'rgba(255, 99, 132, 1)',\r\n                                    'rgba(54, 162, 235, 1)',\r\n                                    'rgba(255, 206, 86, 1)',\r\n                                    'rgba(75, 192, 192, 1)',\r\n                                    'rgba(153, 102, 255, 1)',\r\n                                    'rgba(255, 159, 64, 1)'\r\n                                ],\r\n                                borderWidth: 1\r\n                            }]\r\n                        }}\r\n                    />\r\n                </Box>\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Statistics\r\n","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Addproduct.js",["157","158","159","160","161"],"import React, {useEffect, useState} from 'react'\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport {Header, Title} from \"../components\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {colors} from \"../themes/colors\";\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport {Link} from 'react-router-dom';\r\nimport misterCoockyApi from '../constante/apiUrl'\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\n\r\n\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: 300,\r\n            maxWidth: 50\r\n        }\r\n    },\r\n    getContentAnchorEl: null,\r\n    anchorOrigin: {\r\n        vertical: \"bottom\",\r\n        horizontal: \"left\"\r\n    },\r\n\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    btn: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        width: '100%',\r\n        height: '0px',\r\n    },\r\n    btn2: {\r\n        fontSize: \"0.7em\",\r\n        marginTop: \"10px\"\r\n    },\r\n    formControl: {\r\n        width: 200,\r\n        margin: \"5px 0 5px 0\"\r\n    },\r\n    descriptionControl: {\r\n        width: 200,\r\n        height: 300,\r\n        margin: \"5px 0 5px 0\"\r\n    },\r\n    item: {\r\n        maxWidth: 400,\r\n        padding: theme.spacing(2),\r\n    },\r\n    typotext: {\r\n        fontSize: '1.4em'\r\n    },\r\n\r\n}));\r\n\r\n/**\r\n * Composant de page d'ajout d'un produit\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction AddProduct(props) {\r\n    const classes = useStyles();\r\n    const [selectedItemToEdit, setSelectedItemToEdit] = useState(props.itemId);\r\n\r\n    const [pageId, setPageId] = useState(0);\r\n    const [prix, setPrix] = useState(\"\");\r\n    const [nomProduit, setNomProduit] = useState(\"\");\r\n    const [marque, setMarque] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [image, setImage] = useState(\"\");\r\n    const [estSain, setEstSain] = useState(false);\r\n    const [estMalin, setEstMalin] = useState(false);\r\n    const [estResponsable, setEstResponsable] = useState(false);\r\n    const [typeProduitId, setTypeProduitId] = useState([]);\r\n    const [typeProduitList, setTypeProduitList] = useState([]);\r\n    const [lienProduit, setLienProduit] = useState(\"\");\r\n    const [animalId, setAnimalId] = useState(\"\");\r\n    const [animalList, setAnimalList] = useState([]);\r\n    const [fileTransmited, setFileTransmited] = useState(false);\r\n    const [discount, setDiscount] = useState(\"\");\r\n\r\n    const [categoryList, setCategoryList] = useState([]);\r\n    const [categoryId, setCategoryId] = useState(\"\");\r\n    const [sousCateroriesList, setSousCateroriesList] = useState([]);\r\n    const [sousCategorieId, setSousCategorieId] = useState(\"\");\r\n\r\n    /**\r\n     * récupère l'item si en mode édition produit\r\n     * et récupère la liste des animaux\r\n     * et récupère les offres\r\n     */\r\n    useEffect(() => {\r\n        if (selectedItemToEdit) {    //si mode configuration\r\n            fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {    //on récupère l'item\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    query: `\r\n                    query{​​​​​​​\r\n                      item(id:\"${selectedItemToEdit}\"){​​​​​​​\r\n                        id\r\n                        ttcPrice\r\n                        mark{\r\n                            id\r\n                            name\r\n                        }\r\n                        isHealthy\r\n                        isSmart\r\n                        isResponsible\r\n                        discount\r\n                        pet{\r\n                            id\r\n                            name\r\n                        }\r\n                        product{\r\n                            id\r\n                            name\r\n                        }\r\n                        offer{\r\n                            id\r\n                            name\r\n                        }\r\n                        comment\r\n                        link\r\n                        uri\r\n                        category{\r\n                            id\r\n                            name\r\n                        }\r\n                        subCategories{\r\n                            id\r\n                            name\r\n                        }\r\n                      }​​​​​​​\r\n                    }`,\r\n                }),\r\n            })\r\n                .then((res) => res.json())\r\n                .then(function (result) {\r\n                    setDescription(result.data.item.comment);\r\n                    setEstMalin(result.data.item.isSmart);\r\n                    setEstResponsable(result.data.item.isResponsible);\r\n                    setEstSain(result.data.item.isHealthy);\r\n                    setPrix(Math.round(result.data.item.ttcPrice / (1 - Math.abs(result.data.item.discount / 100))));\r\n                    setImage((result.data.item.uri));\r\n                    setMarque(result.data.item.mark.name);\r\n                    setDiscount(result.data.item.discount);\r\n                    setNomProduit(result.data.item.product.name);\r\n                    setLienProduit(result.data.item.link);\r\n                    setTypeProduitId(result.data.item.offer.id);\r\n                    setAnimalId(result.data.item.pet.id);\r\n                    if (result.data.item.subCategories[0] != null) {\r\n                        setSousCategorieId(result.data.item.subCategories[0].id);\r\n                    }\r\n                    generateCategories(result.data.item.pet.id, result.data.item.offer.id);\r\n                    onCategorySelected(result.data.item.pet.id, result.data.item.category.id);\r\n                });\r\n        }\r\n        //récupérations de la liste des animaux\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query{​​​​​​​\r\n                        pets{​​​​​​​\r\n                            id\r\n                            name\r\n                        }​​​​​​​\r\n                    }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                setAnimalList(result.data.pets);\r\n            });\r\n\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query{​​​​​​​\r\n                        getOffers{​​​​​​​\r\n                            id\r\n                            name\r\n                        }​​​​​​​\r\n                    }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                setTypeProduitList(result.data.getOffers);\r\n            })\r\n    }, []);\r\n\r\n    /**\r\n     * Lors de l'import d'un fichier\r\n     * @param event\r\n     */\r\n    function handleFile(event) {\r\n        const file = event.target.files[0];\r\n        let data = new FormData();\r\n        data.append(\"file\", file);\r\n        const userId = localStorage.getItem('userId');\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/uploadFile?sectionName=smr&userId=${userId}`, {\r\n            method: 'POST',\r\n            body: data\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                setFileTransmited(true);\r\n            }).catch(function (error) {\r\n            console.log('Erreur pendant l\\'upload : ' + error.message);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Lors de la sélection d'un animal\r\n     * @param animalId\r\n     */\r\n    function handleAnimalChange(animalId) {\r\n        setAnimalId(animalId);\r\n        generateCategories(animalId, typeProduitId);\r\n    }\r\n\r\n    /**\r\n     * Lors de la sélection d'un type\r\n     * @param type\r\n     */\r\n    function handleTypeChange(type) {\r\n        setTypeProduitId(type);\r\n        generateCategories(animalId, type);\r\n    }\r\n\r\n    /**\r\n     * récupération des catégories\r\n     * @param animal\r\n     * @param offer\r\n     */\r\n    function generateCategories(animal, offer) {\r\n        setCategoryList([]);\r\n        setSousCateroriesList([]);\r\n        if ((animal && offer)) {\r\n            fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    query: `\r\n                    query{​​​​​​​\r\n                         getCategoriesByPetIdAndOfferId(petId:\"${animal}\", offerId:\"${offer}\"){\r\n                            id\r\n                            name\r\n                        }​​​​​​​    \r\n                    }`,\r\n                }),\r\n            })\r\n                .then((res) => res.json())\r\n                .then(function (result) {\r\n                    setCategoryList(result.data.getCategoriesByPetIdAndOfferId);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Lors de la sélection d'une catégorie\r\n     * @param pet\r\n     * @param category\r\n     */\r\n    function onCategorySelected(pet, category) {\r\n        setSousCateroriesList([]);\r\n        setCategoryId(category);\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query{​​​​​​​\r\n                        getSubCategoriesByPetAndCategoryIds(petId:\"${pet}\", categoryId:\"${category}\"){\r\n                            id\r\n                            name\r\n                        }​​​​​​​\r\n                    }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                setSousCateroriesList(arrUnique(result.data.getSubCategoriesByPetAndCategoryIds));\r\n            });\r\n    }\r\n\r\n    /**\r\n     * fonction permettant de supprimer les doublons d'une liste\r\n     * @param array\r\n     * @returns {*}\r\n     */\r\n    function arrUnique(array) {\r\n        var clean = array.filter((arr, index, self) =>\r\n            index === self.findIndex((t) => (t.name === arr.name)));\r\n        return clean\r\n    }\r\n\r\n    /**\r\n     * Lors de l'ajout d'une image / mise en base64\r\n     * @param file\r\n     */\r\n    function imageUploaded(file) {\r\n        let base64String = \"\";\r\n        let reader = new FileReader();\r\n        reader.onload = function () {\r\n            base64String = reader.result.replace(\"data:\", \"\")\r\n                .replace(/^.+,/, \"\");\r\n            setImage(base64String);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    /**\r\n     * Prévisiualisation de l'image impotée\r\n     * @param e\r\n     */\r\n    function handleImagePreview(e) {\r\n        if (e.target.files[0]) {\r\n            imageUploaded(e.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Lors de l'envoi du formulaire de création\r\n     * @param e\r\n     */\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        let tmpDiscount = discount;\r\n        if (discount === \"\") {\r\n            tmpDiscount = 0\r\n        }\r\n        if (selectedItemToEdit) { //si mode d'édition\r\n            fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    query: `\r\n                        mutation updateItem($input: ItemInput){\r\n                            updateItem(id: \"${selectedItemToEdit}\", item: $input) {​​​​​​\r\n                            id\r\n                          }​​​​​​​\r\n                        }`,\r\n                    variables: {\r\n                        \"input\": {\r\n                            \"price\": prix,\r\n                            \"comment\": description,\r\n                            \"isHealthy\": Boolean(estSain),\r\n                            \"isSmart\": Boolean(estMalin),\r\n                            \"isResponsible\": Boolean(estResponsable),\r\n                            \"link\": lienProduit,\r\n                            \"uri\": image,\r\n                            \"discount\": tmpDiscount,\r\n                            \"productName\": nomProduit,\r\n                            \"markName\": marque,\r\n                            \"petId\": animalId,\r\n                            \"offerId\": typeProduitId,\r\n                            \"categoryId\": categoryId,\r\n                            \"subCategoryId\": sousCategorieId,\r\n                        }\r\n                    }\r\n                }),\r\n            })\r\n                .then((res) => res.json())\r\n                .then(function (result) {\r\n                    if (result.data.updateItem.id !== null) {\r\n                        window.location.href = '/products';\r\n                    }\r\n                });\r\n        } else {\r\n            let tmpDiscount = discount;\r\n            if (discount === \"\") {\r\n                tmpDiscount = 0\r\n            }\r\n            fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    query: `\r\n                        mutation CreateItem($input: ItemInput){\r\n                            createItem(item: $input) {​​​​​​\r\n                            id\r\n                          }​​​​​​​\r\n                        }`,\r\n                    variables: {\r\n                        \"input\": {\r\n                            \"price\": prix,\r\n                            \"comment\": description,\r\n                            \"isHealthy\": estSain,\r\n                            \"isSmart\": estMalin,\r\n                            \"isResponsible\": estResponsable,\r\n                            \"link\": lienProduit,\r\n                            \"uri\": image,\r\n                            \"userId\": localStorage.getItem('userId'),\r\n                            \"productName\": nomProduit,\r\n                            \"discount\": tmpDiscount,\r\n                            \"markName\": marque,\r\n                            \"supplierId\": localStorage.getItem('supplierId'),\r\n                            \"petId\": animalId,\r\n                            \"offerId\": typeProduitId,\r\n                            \"categoryId\": categoryId,\r\n                            \"subCategoryId\": sousCategorieId,\r\n                            \"organizationId\": localStorage.getItem('organizationId')\r\n                        }\r\n                    }\r\n                }),\r\n            })\r\n                .then((res) => res.json())\r\n                .then(function (result) {\r\n                    if (result.data.createItem.id !== null) {\r\n                        window.location.href = '/products';\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n\r\n    function handlePriceChanges(value) {\r\n        setPrix(value);\r\n    }\r\n        /**\r\n             * Renvoi du contenu de la page\r\n             * @returns {*}\r\n         */\r\n        function getAddProductContent() {\r\n            const dataImg = \"data:image/png;base64,\" + image;\r\n            switch (pageId) {\r\n                case 0:\r\n                    return <Box mt={10}>\r\n                        {\r\n                            selectedItemToEdit ? <h2 style={{color: colors.brown}}>Mode édition produit </h2> : <></>\r\n                        }\r\n                        <form className={classes.form} onSubmit={handleSubmit}>\r\n                            <Grid container spacing={1}>\r\n                                <Grid container item xs={12} spacing={2}>\r\n                                    <Grid item align={'center'} sm={12} md={6} lg={3}>\r\n                                        {\r\n                                            image ?\r\n                                                <img src={dataImg} width={200}/> :\r\n                                                null\r\n                                        }\r\n                                        <Button variant=\"outlined\" component=\"label\" size={'small'}>\r\n                                            {image ? \"Remplacer l'image\" : \"Ajouter une image\"}\r\n                                            <input type=\"file\" accept=\"image/*\" hidden onChange={handleImagePreview}/>\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item sm={12} md={6} lg={3}>\r\n                                        <FormControl variant=\"outlined\" className={classes.formControl} required={true}\r\n                                                     spacing={3}>\r\n                                            <InputLabel id=\"select-animal\">Animal</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"select-animal\"\r\n                                                id=\"select-animal\"\r\n                                                value={animalId}\r\n                                                onChange={event => {\r\n                                                    handleAnimalChange(event.target.value)\r\n                                                }}\r\n                                                label=\"Animal\">\r\n                                                {\r\n                                                    animalList ? animalList.map((array) => {\r\n                                                        return <MenuItem key={array.id}\r\n                                                                         value={array.id}>{array.name}</MenuItem>\r\n                                                    }) : <></>\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        <TextField\r\n                                            required\r\n                                            className={classes.formControl}\r\n                                            id=\"idnNom\"\r\n                                            label=\"Nom du produit\"\r\n                                            value={nomProduit}\r\n                                            onChange={e => (setNomProduit(e.target.value))}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                        <FormControl component=\"fieldset\" className={classes.formControl}>\r\n                                            <FormLabel component=\"legend\">SMR</FormLabel>\r\n                                            <FormGroup>\r\n                                                <FormControlLabel\r\n                                                    control={<Checkbox checked={estSain} color={\"default\"}\r\n                                                                       onChange={e => (setEstSain(e.target.checked))}\r\n                                                                       name=\"Sain\"/>}\r\n                                                    label=\"Sain\"\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    control={<Checkbox checked={estMalin} color={\"default\"}\r\n                                                                       onChange={e => (setEstMalin(e.target.checked))}\r\n                                                                       name=\"Malin\"/>}\r\n                                                    label=\"Malin\"\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    control={<Checkbox checked={estResponsable} color={\"default\"}\r\n                                                                       onChange={e => (setEstResponsable(e.target.checked))}\r\n                                                                       name=\"Responsable\"/>}\r\n                                                    label=\"Responsable\"\r\n                                                />\r\n\r\n                                                <TextField\r\n                                                    className={classes.formControl}\r\n                                                    id=\"idnNom\"\r\n                                                    label=\"Discount (%)\"\r\n                                                    value={discount}\r\n                                                    type=\"number\"\r\n                                                    InputProps={{inputProps: {min: -99, max: 0, step: \"0.01\"}}}\r\n                                                    placeholder={\"-0%\"}\r\n                                                    onChange={e => (setDiscount(e.target.value))}\r\n                                                    variant=\"outlined\"\r\n                                                />\r\n                                            </FormGroup>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item sm={12} md={6} lg={3}>\r\n                                        <TextField\r\n                                            required\r\n                                            className={classes.formControl}\r\n                                            id=\"idMarque\"\r\n                                            label=\"Marque\"\r\n                                            value={marque}\r\n                                            onChange={e => (setMarque(e.target.value))}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n\r\n                                        <TextField\r\n                                            required\r\n                                            className={classes.formControl}\r\n                                            id=\"idPrix\"\r\n                                            label=\"Prix\"\r\n                                            type=\"number\"\r\n                                            InputProps={{inputProps: {min: 0.0, step: \"0.01\"}}}\r\n                                            value={prix}\r\n                                            onChange={e => handlePriceChanges(e.target.value)}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                        <FormControl variant=\"outlined\" className={classes.formControl} required={true}>\r\n                                            <InputLabel id=\"select-typeProduit\">Type de produit</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"select-typeProduit\"\r\n                                                id=\"select-typeProduit\"\r\n                                                value={typeProduitId}\r\n                                                onChange={e => (handleTypeChange(e.target.value))}\r\n                                                label=\"Type de produit\">\r\n                                                {\r\n                                                    typeProduitList ? typeProduitList.map(function (type) {\r\n                                                        return <MenuItem key={type.id}\r\n                                                                         value={type.id}>{type.name}</MenuItem>\r\n                                                    }) : <></>\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        <FormControl variant=\"outlined\" className={classes.formControl} required>\r\n                                            <InputLabel id=\"select-categorie\">Catégorie</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"select-categorie\"\r\n                                                id=\"select-categorie\"\r\n                                                value={categoryId}\r\n                                                onChange={function (event) {\r\n                                                    onCategorySelected(animalId, event.target.value)\r\n                                                }}\r\n                                                label=\"Catégorie\">\r\n                                                {\r\n                                                    categoryList ? categoryList.map(function (cat) {\r\n                                                        if (cat) {\r\n                                                            return <MenuItem key={cat.id}\r\n                                                                             value={cat.id}>{cat.name}</MenuItem>\r\n                                                        }\r\n                                                    }) : <></>\r\n\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                            <InputLabel id=\"select-sousCategorie\">Sous catégorie</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"select-sousCategorie\"\r\n                                                id=\"select-sousCategorie\"\r\n                                                value={sousCategorieId}\r\n                                                onChange={e => setSousCategorieId(e.target.value)}\r\n                                                label=\"Animal\">\r\n                                                {\r\n                                                    sousCateroriesList ? sousCateroriesList.map(function (sousCat) {\r\n                                                        return <MenuItem key={sousCat.id}\r\n                                                                         value={sousCat.id}>{sousCat.name}</MenuItem>\r\n                                                    }) : <></>\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item sm={12} md={6} lg={3}>\r\n                                        <TextField\r\n                                            id=\"description\"\r\n                                            label=\"Description\"\r\n                                            multiline\r\n                                            rows={8}\r\n                                            defaultValue=\"\"\r\n                                            onChange={e => setDescription(e.target.value)}\r\n                                            value={description}\r\n                                            className={classes.formControl}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                        <TextField\r\n                                            required\r\n                                            className={classes.formControl}\r\n                                            id=\"idLien\"\r\n                                            label=\"Lien du produit\"\r\n                                            value={lienProduit}\r\n                                            onChange={e => (setLienProduit(e.target.value))}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                                <Grid container item xs={12} spacing={1}>\r\n                                    <Grid item xs={12} sm={3} align={'center'}>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={3}>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={3}>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={3} align={'center'}>\r\n                                        <Button type=\"submit\" variant=\"contained\"\r\n                                                style={{backgroundColor: colors.brown}}>Valider</Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </Box>;\r\n                case 1:\r\n                    return <Grid container spacing={3} direction={\"column\"} align={\"center\"} className={classes.root}>\r\n                        <Grid className={classes.paper}>\r\n                            <Grid container spacing={2} className={classes.item}>\r\n                                <Grid item>\r\n                                    <Avatar>1</Avatar>\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography className={classes.typotext}>Télécharger le template</Typography>\r\n                                    <Button href={\"files/formulaire_produits.xlsx\"} className={classes.btn2}\r\n                                            style={{backgroundColor: colors.red}} download target=\"_blank\"\r\n                                            startIcon={<GetAppIcon/>}>Télécharger le template</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid className={classes.paper}>\r\n                            <Grid container spacing={2} className={classes.item}>\r\n                                <Grid item>\r\n                                    <Avatar>2</Avatar>\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <span className={classes.typotext}>Remplir le document Excel avec vos différents produits</span>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid className={classes.paper}>\r\n                            <Grid container spacing={2} className={classes.item}>\r\n                                <Grid item>\r\n                                    <Avatar>3</Avatar>\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography className={classes.typotext}>Importer votre fichier en\r\n                                        .xlxs</Typography>\r\n                                    <Button className={classes.btn2} variant=\"contained\"\r\n                                            style={{backgroundColor: colors.red}} component=\"label\"\r\n                                            startIcon={<GetAppIcon/>}>Déposer le template <input accept=\".xlsx\"\r\n                                                                                                 type=\"file\"\r\n                                                                                                 onChange={e => (handleFile(e))}\r\n                                                                                                 hidden/> </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {\r\n                            <Snackbar open={fileTransmited} autoHideDuration={6000}\r\n                                      anchorOrigin={{vertical: \"top\", horizontal: \"center\"}}\r\n                                      onClose={() => setFileTransmited(false)}>\r\n                                <Alert severity=\"success\">Fichier transmis, il sera bientôt traîté</Alert>\r\n                            </Snackbar>\r\n                        }\r\n                    </Grid>;\r\n                case 2:\r\n                    return <Grid className={classes.paper} align={'center'}>\r\n                        <Grid container spacing={2} className={classes.item}>\r\n                            <Grid item>\r\n                                <Avatar>1</Avatar>\r\n                            </Grid>\r\n                            <Grid item xs zeroMinWidth>\r\n                                <Typography className={classes.typotext}>Importer votre fichier en .xlxs</Typography>\r\n                                <Button className={classes.btn2} variant=\"contained\"\r\n                                        style={{backgroundColor: colors.red}}\r\n                                        component=\"label\" startIcon={<GetAppIcon/>}>Déposer le template <input\r\n                                    accept=\".xlsx\" type=\"file\" onChange={e => (handleFile(e))} hidden/> </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {\r\n                            <Snackbar open={fileTransmited} autoHideDuration={6000}\r\n                                      anchorOrigin={{vertical: \"top\", horizontal: \"center\"}}\r\n                                      onClose={() => setFileTransmited(false)}>\r\n                                <Alert severity=\"success\">Fichier transmis, il sera bientôt traîté</Alert>\r\n                            </Snackbar>\r\n                        }\r\n                    </Grid>;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <Container>\r\n                    <Title name={\"SMR — Ajouter des Produits\"}/>\r\n                    <Grid container spacing={5} justify=\"center\">\r\n                        <Grid item xs={12} sm={3}>\r\n                            <Button component={Link} to=\"/products\" className={classes.btn} variant=\"contained\"\r\n                                    style={{backgroundColor: colors.grey}}>Produits ajoutés</Button>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} sm={3}>\r\n                            <Button component={Link} to=\"/addproduct\" className={classes.btn} variant=\"contained\"\r\n                                    style={{backgroundColor: colors.brown}}>Ajout d'un produit</Button>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={3}>\r\n                            <Button component={Link} to=\"/statistics\" className={classes.btn} variant=\"contained\"\r\n                                    style={{backgroundColor: colors.grey}}>Statistiques</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={5} justify=\"center\">\r\n                        <Grid item xs={12} sm={3}>\r\n                            <Button className={classes.btn} variant=\"contained\"\r\n                                    style={pageId === 0 ? {backgroundColor: colors.brown} : {backgroundColor: colors.grey}}\r\n                                    onClick={e => (setPageId(0))}>Remplir un formulaire</Button>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={3}>\r\n                            <Button className={classes.btn} variant=\"contained\"\r\n                                    style={pageId === 1 ? {backgroundColor: colors.brown} : {backgroundColor: colors.grey}}\r\n                                    startIcon={< GetAppIcon/>} onClick={e => (setPageId(1))}>Remplir un\r\n                                template</Button>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={3}>\r\n                            <Button className={classes.btn} variant=\"contained\"\r\n                                    style={pageId === 2 ? {backgroundColor: colors.brown} : {backgroundColor: colors.grey}}\r\n                                    startIcon={<GetAppIcon/>} onClick={e => (setPageId(2))}>Importer un fichier</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Box mt={5}>\r\n                        {getAddProductContent()}\r\n                    </Box>\r\n                </Container>\r\n            </div>\r\n        )\r\n\r\n}\r\n\r\nexport default AddProduct\r\n","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\SignIn.js",["162"],"import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport connexion from '../images/Connexion.png';\r\nimport logo from '../images/logo.svg'\r\nimport { colors } from \"../themes/colors\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport misterCoockyApi from '../constante/apiUrl'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100vh',\r\n    },\r\n    image: {\r\n        backgroundImage: `url(${connexion})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor:\r\n            theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(8, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        marginTop: \"50px\"\r\n    },\r\n    btn: {\r\n        padding: theme.spacing(1),\r\n        color: \"#000\",\r\n        backgroundColor: \"#DEC8A6\",\r\n        width: '25%',\r\n    },\r\n    formText: {\r\n        width: '35%'\r\n    },\r\n    centerElements: {\r\n        'display': 'flex',\r\n        'flex-direction': 'column',\r\n        'justify-content': 'flex-end',\r\n        'align-items': 'flex-end',\r\n        'position': 'relative',\r\n        'right': '8%'\r\n    }\r\n}));\r\n\r\n/**\r\n * Page de Connexion\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction Connection() {\r\n    const [textNext, setTextNext] = useState(\"Se connecter\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [motDePasse, setMotDePasse] = useState(\"\");\r\n    const [signError, setSignError] = useState(\"\");\r\n    const classes = useStyles();\r\n\r\n    /**\r\n     * Envoi du formulaire de connexion\r\n     * @param e\r\n     */\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query{​​​​​​​\r\n                        logAsUser(email:\"${email}\", password: \"${motDePasse}\"){​​​​​​​\r\n                            id\r\n                            organization{\r\n                                id\r\n                                supplier{\r\n                                    id  \r\n                                }\r\n                            }\r\n                            user{\r\n                                role{\r\n                                    name\r\n                                }\r\n                            }\r\n                        }​​​​​​​\r\n                    }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                if (result.data.logAsUser == null) {\r\n                    setSignError(\"Email ou mot de passe incorrects\");\r\n                } else {\r\n                    localStorage.setItem('userId', result.data.logAsUser.id);\r\n                    localStorage.setItem('organizationId', result.data.logAsUser.organization.id);\r\n                    localStorage.setItem('supplierId', result.data.logAsUser.organization.supplier.id);\r\n                    if (result.data.logAsUser.user.role?.name === \"ROLE_USER\") {\r\n                        window.location.href = '/home';\r\n                    } else {\r\n                        window.location.href = '/homeAdmin';\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Récupération du contenu de page\r\n     * @returns {*}\r\n     */\r\n    function getFormContent() {\r\n        return <>\r\n            <TextField required variant=\"outlined\" type=\"email\" margin=\"normal\" fullWidth id=\"email\" label=\"Email\"\r\n                name=\"remail\" onChange={e => setEmail(e.target.value)} value={email} />\r\n            <TextField required type=\"password\" variant=\"outlined\" margin=\"normal\" fullWidth id=\"phone\"\r\n                label=\"Mot de passe\"\r\n                name=\"phone\" onChange={e => setMotDePasse(e.target.value)} value={motDePasse} />\r\n            <Box m={0.5}>\r\n                <Link href={\"/register\"}>Mot de passe oublié</Link>\r\n            </Box>\r\n\r\n            {signError ? <Alert severity=\"error\">{signError}</Alert> : <></>}\r\n\r\n            <Box mt={10}>\r\n                <Grid container spacing={10} className={classes.centerElements}>\r\n                    <Button type=\"submit\" variant=\"contained\" style={{ backgroundColor: colors.brown }}\r\n                        className={classes.btn}>\r\n                        {textNext}\r\n                    </Button>\r\n                    <Box style={{marginTop:'2'}}>\r\n                        <Link href={\"/register\"}>Pas de compte? S'inscrire</Link>\r\n                    </Box>\r\n                </Grid>\r\n            </Box>\r\n        </>\r\n    }\r\n\r\n    return (\r\n        <Grid container component=\"main\" className={classes.root}>\r\n            <CssBaseline />\r\n            <Grid item xs={false} sm={6} md={6} className={classes.image} />\r\n            <Grid item xs={12} sm={6} md={6}>\r\n                <div className={classes.paper}>\r\n                    <Grid>\r\n                        <img alt=\"Logo Mister Coocky\" width={200} height={250} src={logo} />\r\n                    </Grid>\r\n                    <form className={classes.form} onSubmit={handleSubmit}>\r\n                        {getFormContent()}\r\n\r\n                    </form>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default Connection\r\n","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\StatisticsMrAdopt.js",["163","164"],"import React, {useEffect, useState} from 'react'\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport {Header, Title} from \"../components\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {colors} from \"../themes/colors\";\r\nimport {Bar} from 'react-chartjs-2';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport misterCoockyApi from '../constante/apiUrl'\r\n\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: 300,\r\n            maxWidth: 50\r\n        }\r\n    },\r\n    // Show dropdow at bottom of select\r\n    getContentAnchorEl: null,\r\n    anchorOrigin: {\r\n        vertical: \"bottom\",\r\n        horizontal: \"left\"\r\n    }\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    btn: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        width: '100%',\r\n        height: '0px',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing.unit,\r\n        minWidth: 120,\r\n        maxWidth: 300\r\n    }\r\n}));\r\n\r\n/**\r\n * Page de statistiques des annonces\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction StatistiqueMrAdopt() {\r\n    const classes = useStyles();\r\n    const [productsNames, setProductsNames] = useState([]);\r\n    const [productsClicks, setProductsClicks] = useState([]);\r\n    const [productsSelected, setProductsSelected] = useState([]);\r\n\r\n    /**\r\n     * Récupération des produits de utililsateur\r\n     */\r\n    useEffect(() => {\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query{​​​​​​​\r\n                        getAnnouncementsByUserId(id:\"${localStorage.getItem('userId')}\"){​​​​​​​    \r\n                            id\r\n                            title\r\n                            numberOfClick\r\n                        }​​​​​​​\r\n                    }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then((json) => {\r\n                let tmpProductsName = [];\r\n                let tmpProductsClicks = [];\r\n                if (json.data.getAnnouncementsByUserId) {\r\n                    json.data.getAnnouncementsByUserId.forEach((produit) => {\r\n                        tmpProductsName.push(produit.title);\r\n                        tmpProductsClicks.push(produit.numberOfClick);\r\n                    });\r\n                    setProductsNames(tmpProductsName);\r\n                    setProductsClicks(tmpProductsClicks);\r\n                    setProductsSelected([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])   //on n'affiche que les 20premiers\r\n                }\r\n            })\r\n    }, []);\r\n\r\n    /**\r\n     * Récupération des noms des produits/annonces\r\n     * @returns {Array}\r\n     */\r\n    function getSelectedNames() {\r\n        let selectedNames = [];\r\n        for (let i = 0; i < productsNames.length; i++) {\r\n            if (productsSelected.includes(i)) {\r\n                selectedNames.push(productsNames[i])\r\n            }\r\n        }\r\n        return selectedNames\r\n    }\r\n\r\n    /**\r\n     * Récupération des nombres de clicks sur les produits/annonces\r\n     * @returns {Array}\r\n     */\r\n    function getSelectedClicks() {\r\n        let selectedClicks = [];\r\n        for (let i = 0; i < productsClicks.length; i++) {\r\n            if (productsSelected.includes(i)) {\r\n                selectedClicks.push(productsClicks[i])\r\n            }\r\n        }\r\n        return selectedClicks\r\n    }\r\n\r\n    /**\r\n     * Lors du click sur un select\r\n     * @param event\r\n     */\r\n    function handleChange(event) {\r\n        let changeProductState = -1;\r\n        //on récupère le produit changé\r\n        productsNames.map((product, index) => {\r\n            if (!event.target.value.includes(product)) {\r\n                changeProductState = index\r\n            }\r\n        });\r\n        //on change le produit concerné\r\n        let tmpSelected = [];\r\n        productsSelected.map(selec => {\r\n            tmpSelected.push(selec)\r\n        });   //on rerempli par les valeurs initiales\r\n        if (tmpSelected.includes(changeProductState)) {  //lors d'une suppression\r\n            const index = tmpSelected.indexOf(changeProductState);\r\n            if (index > -1) {\r\n                tmpSelected.splice(index, 1);\r\n            }\r\n        } else {  //lors d'un ajout\r\n            tmpSelected.push(changeProductState)\r\n        }\r\n        setProductsSelected(tmpSelected)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Container>\r\n                <Title name={\"Mr.Adopt — Statistiques\"}/>\r\n                <Grid container spacing={10} justify=\"center\">\r\n                    <Grid item xs>\r\n                        <Button onClick={() => window.location.href = '/annonces'} className={classes.btn}\r\n                                variant=\"contained\" style={{backgroundColor: colors.grey}}>Mes annonces</Button>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Button onClick={() => window.location.href = '/addAnnonce'} className={classes.btn}\r\n                                variant=\"contained\" style={{backgroundColor: colors.grey}}>Ajouter une annonce</Button>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Button onClick={() => window.location.href = '/statisticsMrAdopt'} className={classes.btn}\r\n                                variant=\"contained\" style={{backgroundColor: colors.brown}}>Statistiques</Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n\r\n                <Box mt={5}>\r\n                    <Grid container justify=\"flex-end\">\r\n                        <FormControl className={classes.formControl}>\r\n                            <InputLabel htmlFor=\"select-multiple-checkbox\">Filtrer</InputLabel>\r\n                            <Select\r\n                                multiple\r\n                                value={productsNames}\r\n                                onChange={handleChange}\r\n                                input={<Input id=\"select-multiple-checkbox\"/>}\r\n                                renderValue={selected => selected.join(\", \")}\r\n                                MenuProps={MenuProps}\r\n                            >\r\n                                {productsNames.map((name, index) => (\r\n                                    <MenuItem key={name} value={name}>\r\n                                        <Checkbox checked={productsSelected.includes(index)}/>\r\n                                        <ListItemText primary={name}/>\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Bar\r\n                        data={{\r\n                            labels: getSelectedNames(),\r\n                            datasets: [{\r\n                                label: 'Nombre de vues',\r\n                                data: getSelectedClicks(),\r\n                                backgroundColor: [\r\n                                    'rgba(255, 99, 132, 0.2)',\r\n                                    'rgba(54, 162, 235, 0.2)',\r\n                                    'rgba(255, 206, 86, 0.2)',\r\n                                    'rgba(75, 192, 192, 0.2)',\r\n                                    'rgba(153, 102, 255, 0.2)',\r\n                                    'rgba(255, 159, 64, 0.2)'\r\n                                ],\r\n                                borderColor: [\r\n                                    'rgba(255, 99, 132, 1)',\r\n                                    'rgba(54, 162, 235, 1)',\r\n                                    'rgba(255, 206, 86, 1)',\r\n                                    'rgba(75, 192, 192, 1)',\r\n                                    'rgba(153, 102, 255, 1)',\r\n                                    'rgba(255, 159, 64, 1)'\r\n                                ],\r\n                                borderWidth: 1\r\n                            }]\r\n                        }}\r\n                    />\r\n                </Box>\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default StatistiqueMrAdopt;\r\n","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\OrganizationInfo.js",["165"],"import React, {useEffect, useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {Header, Title} from \"../components\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport misterCoockyApi from \"../constante/apiUrl\";\r\n\r\n/**\r\n * Composant d'affichage des données d'une organisation\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction OrganizationInfo(props) {\r\n    const [userPro, setUserPro] = useState(null);\r\n    const [userAdmin, setUserAdmin] = useState(false);\r\n    const [offerOrga, setOfferOrga] = useState([]);\r\n    const [typesOrga, setTypesOrga] = useState([]);\r\n\r\n    /**\r\n     * Récupération de l'utilisateur pro et de l'organisation\r\n     */\r\n    useEffect(() => {\r\n        if (props.organizationName) {\r\n\r\n            fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    query: `\r\n                        query{​​​​​​​\r\n                            userPro(id:\"${localStorage.getItem('userId')}\"){​​​​​​​\r\n                                id\r\n                                user{\r\n                                    name\r\n                                    role{\r\n                                        name\r\n                                    }\r\n                                }\r\n                            }​​​​​​​\r\n                        }`,\r\n                }),\r\n            })\r\n                .then((res) => res.json())\r\n                .then(function (result) {\r\n                    setUserAdmin(result.data.userPro.user.role.name === \"ROLE_ADMIN\")\r\n                });\r\n\r\n             //Récupération de l'organisation\r\n            fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    query: `\r\n                        query{​​​​​​​\r\n                            getUserProByOrganizationName(name:\"${props.organizationName}\"){​​​​​​​\r\n                                id,\r\n                                user{\r\n                                    id\r\n                                    name\r\n                                    email\r\n                                    phoneNumber\r\n                                }\r\n                                organization{\r\n                                    id\r\n                                    name\r\n                                    postalAddress{\r\n                                        street\r\n                                    }\r\n                                    supplier{\r\n                                        id\r\n                                        name\r\n                                    }\r\n                                }\r\n                            }​​​​​​​\r\n                        }`,\r\n                }),\r\n            })\r\n                .then((res) => res.json())\r\n                .then(function (result) {\r\n                    setUserPro(result.data.getUserProByOrganizationName);\r\n                });\r\n            //Récupération des types d'orga de l'organisation\r\n            fetch(`${misterCoockyApi.misterCoockyApi}/typeOrga/${props.organizationName}`, {})\r\n                .then((res) => res.json())\r\n                .then(function (result) {\r\n                    setTypesOrga(result.join(', '))\r\n                });\r\n            //Récupération des offres de l'orga\r\n            fetch(`${misterCoockyApi.misterCoockyApi}/offerOrga/${props.organizationName}`, {})\r\n                .then((res) => res.json())\r\n                .then(function (result) {\r\n                    setOfferOrga(result.join(', '))\r\n                })\r\n        }\r\n    }, []);\r\n\r\n    if (userAdmin === true) {\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                {userPro ?\r\n                    <Container>\r\n                        <Title name={\"Profile de: \" + props.organizationName}/>\r\n                        <h3>Utilisateur Pro</h3>\r\n                        <Grid container>\r\n                            <Grid item xs={6} sm={3}>\r\n                                Identifiant\r\n                            </Grid>\r\n                            <Grid item xs={6} sm={3}>\r\n                                {userPro.id}\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <h3>Organisation</h3>\r\n                        <Grid container>\r\n                            <Grid item xs={6} sm={3}>\r\n                                Identifiant\r\n                            </Grid>\r\n                            <Grid item xs={6} sm={3}>\r\n                                {userPro.organization.id}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={6} sm={3}>\r\n                                Nom\r\n                            </Grid>\r\n                            <Grid item xs={6} sm={3}>\r\n                                {userPro.organization.name}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={6} sm={3}>\r\n                                Types d'organisation\r\n                            </Grid>\r\n                            <Grid item xs={6} sm={3}>\r\n                                {typesOrga}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={6} sm={3}>\r\n                                Offres\r\n                            </Grid>\r\n                            <Grid item xs={6} sm={3}>\r\n                                {offerOrga}\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container>\r\n                            <Grid item xs={6} sm={3}>\r\n                                Adresse Postale\r\n                            </Grid>\r\n                            <Grid item xs={6} sm={6}>\r\n                                {userPro.organization.postalAddress.street}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={6} sm={3}>\r\n                                Nom fournisseur\r\n                            </Grid>\r\n                            <Grid item xs={6} sm={3}>\r\n                                {userPro.organization.supplier.name}\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <h3>Utilisateur</h3>\r\n                        <Grid container>\r\n                            <Grid item xs={6} sm={3}>\r\n                                Identifiant\r\n                            </Grid>\r\n                            <Grid item xs={6} sm={3}>\r\n                                {userPro.user.id}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={6} sm={3}>\r\n                                Nom\r\n                            </Grid>\r\n                            <Grid item xs={6} sm={3}>\r\n                                {userPro.user.name}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={6} sm={3}>\r\n                                Téléphone\r\n                            </Grid>\r\n                            <Grid item xs={6} sm={3}>\r\n                                {userPro.user.phoneNumber}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={6} sm={3}>\r\n                                Email\r\n                            </Grid>\r\n                            <Grid item xs={6} sm={3}>\r\n                                {userPro.user.email}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container> : null\r\n                }\r\n            </div>\r\n        )\r\n    } else {\r\n        return <Container>\r\n            <h2>Access denied</h2>\r\n            Vous n'avez pas accès à cette page, veuillez contacter le support Datagrowb pour plus de renseignements\r\n        </Container>\r\n    }\r\n}\r\n\r\nexport default OrganizationInfo\r\n","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\HomeAdmin.js",[],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\MyAnnoncesPage.js",["166","167"],"import React, {useEffect, useState} from 'react'\r\nimport {Checkbox, makeStyles} from \"@material-ui/core\";\r\nimport {Header, Title} from \"../components\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {colors} from \"../themes/colors\";\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {createMuiTheme, MuiThemeProvider} from '@material-ui/core/styles';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport Modal from 'react-modal';\r\nimport misterCoockyApi from '../constante/apiUrl'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    btn: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        width: '100%',\r\n        height: '0px',\r\n    },\r\n}));\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)',\r\n    },\r\n};\r\nconst getMuiTheme = () => createMuiTheme({\r\n    overrides: {\r\n        MuiTableHead: {\r\n            root: {\r\n                position: 'sticky'\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Page d'affichage des annonces\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction MyAnnoncesPage() {\r\n    const [data, setData] = useState([]);   //produits de l'utilisateur\r\n    const [selectedAnnouncementId, setSelectedAnnouncementId] = useState(false);   //announce de l'utilisateur ayant cliqué sur modifier\r\n    const [selectedAnnouncementIdToDelete, setSelectedAnnouncementIdToDelete] = useState(null);\r\n    const classes = useStyles();\r\n\r\n    const options = {\r\n        selectableRows: false,\r\n        textLabels: {\r\n            body: {\r\n                noMatch: 'Aucune annonce trouvée'\r\n            },\r\n            pagination: {\r\n                next: \"Page suivante\",\r\n                previous: \"Page précédente\",\r\n                rowsPerPage: \"Annonces par page:\",\r\n                displayRows: \"sur\",\r\n            },\r\n        }\r\n    };\r\n    const columns = [\r\n        {\r\n            name: \"img\",\r\n            label: \"Image\",\r\n            options: {\r\n                customBodyRender: function (data) {\r\n                    if (data) {\r\n                        const dataImg = \"data:image/png;base64,\" + data;\r\n                        return <img src={dataImg} width={100}/>;\r\n                    } else return 'N/A'\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: \"title\",\r\n            label: \"Titre\"\r\n        },\r\n        {\r\n            name: \"price\",\r\n            label: \"Prix (€)\"\r\n        },\r\n        {\r\n            name: \"petName\",\r\n            label: \"Animal\"\r\n        },\r\n        {\r\n            name: \"date\",\r\n            label: \"Date de mise en ligne\"\r\n        },\r\n        {\r\n            name: \"vaccine\",\r\n            label: \"Vacciné\",\r\n            options: {\r\n                customBodyRender: function (data) {\r\n                    return <Checkbox checked={data} disabled={true}/>;\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: \"tattoue\",\r\n            label: \"Tattoué\",\r\n            options: {\r\n                customBodyRender: function (data) {\r\n                    return <Checkbox checked={data} disabled={true}/>;\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: \"puce\",\r\n            label: \"Pucé\",\r\n            options: {\r\n                customBodyRender: function (data) {\r\n                    return <Checkbox checked={data} disabled={true}/>;\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: \"id\",\r\n            label: \"Actions\",\r\n            options: {\r\n                customBodyRender: function (res) {\r\n                    return <div>\r\n                        <IconButton aria-label=\"Editer\" style={{padding: \"3px\"}} onClick={() => {\r\n                            setSelectedAnnouncementId(res)\r\n                        }}>\r\n                            <EditOutlinedIcon style={{color: colors.grey}}/>\r\n                        </IconButton>\r\n                        <IconButton aria-label=\"Supprimer\" style={{padding: \"3px\"}} onClick={() => {\r\n                            setSelectedAnnouncementIdToDelete(res)\r\n                        }}>\r\n                            <DeleteOutlinedIcon style={{color: colors.grey}}/>\r\n                        </IconButton>\r\n                    </div>\r\n                }\r\n            }\r\n        },\r\n\r\n    ];\r\n\r\n    useEffect(() => {\r\n        refreshList()\r\n    }, []);\r\n\r\n    /**\r\n     * Arrangement des annonces pour l'insertion dans le tableau\r\n     * @param arr\r\n     */\r\n    function arrangeParameters(arr) {\r\n        var announcements = [];\r\n\r\n        arr.forEach(i => {\r\n            announcements.push({\r\n                'id': i.id,\r\n                'title': i.title,\r\n                'price': i.petAnnouncementInfo.price,\r\n                'petName': i.petAnnouncementInfo.pet.name,\r\n                'tattoue': i.petAnnouncementInfo.tattoo,\r\n                'vaccine': i.petAnnouncementInfo.vaccine,\r\n                'puce': i.petAnnouncementInfo.puce,\r\n                'date': i.date,\r\n                'img': i.image\r\n            })\r\n        });\r\n        setData(announcements)\r\n    }\r\n\r\n    /**\r\n     * Suppression d'une annonce\r\n     * @param id\r\n     */\r\n    function deleteAnnouncement(id) {\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    mutation DeleteAnnouncementById($id: String!) {\r\n                      deleteAnnouncementById(id: $id){\r\n                          id\r\n                      }\r\n                    }`,\r\n                variables: {\r\n                    \"id\": id\r\n                }\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                refreshList();\r\n                setSelectedAnnouncementIdToDelete(null)\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Récupère les annonces de l'utilisateur\r\n     */\r\n    function refreshList() {\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query{​​​​​​​\r\n                        getAnnouncementsByUserId(id:\"${localStorage.getItem('userId')}\"){​​​​​​​    \r\n                            id\r\n                            title\r\n                            petAnnouncementInfo{\r\n                                pet{\r\n                                    name\r\n                                }\r\n                                price\r\n                                tattoo\r\n                                vaccine\r\n                                puce\r\n                            }\r\n                            image\r\n                            date\r\n                        }​​​​​​​\r\n                    }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                arrangeParameters(result.data.getAnnouncementsByUserId);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                selectedAnnouncementId ?\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: \"/addAnnonce\",\r\n                            state: {announcementId: selectedAnnouncementId}\r\n                        }}\r\n                    /> : null\r\n            }\r\n\r\n            <Header/>\r\n            <Container>\r\n                <Modal\r\n                    isOpen={selectedAnnouncementIdToDelete !== null}\r\n                    onRequestClose={() => setSelectedAnnouncementIdToDelete(null)}\r\n                    style={customStyles}\r\n                >\r\n                    <Grid>Etes vous sûr de vouloir supprimer l'annonce?</Grid>\r\n                    <Button onClick={() => deleteAnnouncement(selectedAnnouncementIdToDelete)}>Oui</Button>\r\n                    <Button onClick={() => setSelectedAnnouncementIdToDelete(null)}>Non</Button>\r\n                </Modal>\r\n                <Title name={\"Mr.Adopt — Mes Annonces\"}/>\r\n                <Grid container spacing={5} justify=\"center\">\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button component={Link} to=\"/annonces\" className={classes.btn} variant=\"contained\"\r\n                                style={{backgroundColor: colors.brown}}>Mes annonces</Button>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button component={Link} to=\"/addAnnonce\" className={classes.btn} variant=\"contained\"\r\n                                style={{backgroundColor: colors.grey}}>Ajouter une annonce</Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button component={Link} to=\"/statisticsMrAdopt\" className={classes.btn} variant=\"contained\"\r\n                                style={{backgroundColor: colors.grey}}>Statistiques</Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Box mt={5}>\r\n                    <MuiThemeProvider theme={getMuiTheme()}>\r\n                        <MUIDataTable\r\n                            title={\"Annonces\"}\r\n                            data={data}\r\n                            columns={columns}\r\n                            options={options}\r\n                            spacing={10}\r\n                        />\r\n                    </MuiThemeProvider>\r\n                </Box>\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default MyAnnoncesPage\r\n","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\FilesControlPanel.js",["168","169"],"import {Header, Title} from \"../components\";\r\nimport {Box, Container, createMuiTheme, makeStyles, MuiThemeProvider} from \"@material-ui/core\";\r\nimport {colors} from \"../themes/colors\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport misterCoockyApi from \"../constante/apiUrl\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Modal from 'react-modal';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {HashLink as Link} from '../../node_modules/react-router-hash-link';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)',\r\n    },\r\n};\r\n\r\n/**\r\n * Page de gestion des fichiers importés par les utilisateurs pro\r\n * @returns {*}\r\n * @constructor\r\n */\r\nexport default function FilesControlPanel() {\r\n    const classes = useStyles();\r\n    const [data, setData] = useState([]);   //ensemble des fichiers\r\n    const [selectedFileIdToDelete, setSelectedFileIdToDelete] = useState(null);   //ensemble des fichiers\r\n    const [userAdmin, setUserAdmin] = useState(false);\r\n\r\n    const options = {\r\n        selectableRows: false,\r\n        customHeadRender: {\r\n            position: 'absolute'\r\n        },\r\n        textLabels: {\r\n            body: {\r\n                noMatch: 'Fichier trouvé'\r\n            }\r\n        }\r\n    };\r\n    const getMuiTheme = () => createMuiTheme({\r\n        overrides: {\r\n            MuiTableHead: {\r\n                root: {\r\n                    position: 'sticky'\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    const columns = [\r\n        {\r\n            name: \"name\",\r\n            label: \"Nom fichier\"\r\n        },\r\n        {\r\n            name: \"sectionName\",\r\n            label: \"Section\"\r\n        },\r\n        {\r\n            name: \"orga\",\r\n            label: \"Organisation\",\r\n            options: {\r\n                customBodyRender: function (res) {\r\n                    return <Link to={{pathname: \"/organizationInfos\", state: {organizationName: res}}}> {res}</Link>\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: \"dateAjout\",\r\n            label: \"Date d'ajout\"\r\n        },\r\n        {\r\n            name: \"id\",\r\n            label: \"Actions\",\r\n            options: {\r\n                customBodyRender: function (res) {\r\n                    return <div>\r\n                        <IconButton aria-label=\"Editer\" style={{padding: \"3px\"}} onClick={() => downloadFile(res)}>\r\n                            <GetAppIcon style={{color: colors.grey}}/>\r\n                        </IconButton>\r\n                        <IconButton aria-label=\"Supprimer\" style={{padding: \"3px\"}}\r\n                                    onClick={() => setSelectedFileIdToDelete(res)}>\r\n                            <DeleteOutlinedIcon style={{color: colors.grey}}/>\r\n                        </IconButton>\r\n                    </div>\r\n                }\r\n            }\r\n        },\r\n    ];\r\n\r\n    useEffect(() => {\r\n        //1 On récupère le rôle de l'utilisateur\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query{​​​​​​​\r\n                        userPro(id:\"${localStorage.getItem('userId')}\"){​​​​​​​\r\n                            id\r\n                            user{\r\n                                name\r\n                                role{\r\n                                    name\r\n                                }\r\n                            }\r\n                        }​​​​​​​\r\n                    }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                setUserAdmin(result.data.userPro.user.role.name === \"ROLE_ADMIN\")\r\n            });\r\n        refreshList()\r\n    }, []);\r\n\r\n    /**\r\n     * refresh de liste de fichiers\r\n     */\r\n    function refreshList() {\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query{​​​​​​​\r\n                        getDbFiles{​​​​​​​\r\n                            id\r\n                            fileName\r\n                            sectionName\r\n                            userPro{\r\n                                organization{\r\n                                    name\r\n                                }\r\n                            }\r\n                            dateAjout\r\n                          }​​​​​​​\r\n                    }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                arrangeParameters(result.data.getDbFiles);\r\n            })\r\n    }\r\n\r\n    /**\r\n     * On sélectionne les données des fichiers pour qu'ils soient interprétables par le tableau\r\n     * @param arr\r\n     */\r\n    function arrangeParameters(arr) {\r\n        var items = [];\r\n        arr.forEach(i => {\r\n            items.push({\r\n                'id': i.id,\r\n                'name': i.fileName,\r\n                'sectionName': i.sectionName,\r\n                'orga': i.userPro.organization.name,\r\n                'date': i.id,\r\n                'dateAjout': i.dateAjout,\r\n            })\r\n        });\r\n        setData(items)\r\n    }\r\n\r\n    /**\r\n     * téléchargmnt du fichier choisi\r\n     * @param res\r\n     */\r\n    function downloadFile(res) {\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/downloadFile/${res}`, {\r\n            method: 'GET',\r\n        })\r\n            .then(res => res.blob())\r\n            .then(blob => {\r\n                var file = window.URL.createObjectURL(blob);\r\n                window.location.assign(file);\r\n            }).catch(function (error) {\r\n            console.log('Erreur pendant le téléchargement : ' + error.message);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Suppression du fichier\r\n     * @param id\r\n     */\r\n    function deleteFile(id) {\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    mutation DeleteDbFileById($id: String!) {\r\n                      deleteDbFileById(id: $id){\r\n                          id\r\n                      }\r\n                    }`,\r\n                variables: {\r\n                    \"id\": id\r\n                }\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                refreshList();\r\n                setSelectedFileIdToDelete(null)\r\n            });\r\n    }\r\n\r\n    if (userAdmin === true) {\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <Container>\r\n\r\n                    <Modal\r\n                        isOpen={selectedFileIdToDelete !== null}\r\n                        onRequestClose={() => setSelectedFileIdToDelete(null)}\r\n                        style={customStyles}\r\n                    >\r\n                        <Grid>Etes vous sûr de vouloir supprimer le document?</Grid>\r\n                        <Button onClick={() => deleteFile(selectedFileIdToDelete)}>Oui</Button>\r\n                        <Button onClick={() => setSelectedFileIdToDelete(null)}>Non</Button>\r\n                    </Modal>\r\n\r\n                    <Title name={\"Panneau de contrôle de fichiers\"}/>\r\n                    <Box mt={5}>\r\n                        <MuiThemeProvider theme={getMuiTheme()}>\r\n                            <MUIDataTable\r\n                                title={\"Fichiers\"}\r\n                                data={data}\r\n                                columns={columns}\r\n                                options={options}\r\n                                spacing={10}></MUIDataTable>\r\n                        </MuiThemeProvider>\r\n                    </Box>\r\n                </Container>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <Container>\r\n            <h2>Access denied</h2>\r\n            Vous n'avez pas accès à cette page, veuillez contacter le support Datagrowb pour plus de renseignemnts\r\n        </Container>\r\n    }\r\n}\r\n","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\UserProfile.js",["170","171","172","173","174"],"import React, {useEffect, useState} from 'react'\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport {Header, Title} from \"../components\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {colors} from \"../themes/colors\";\r\nimport misterCoockyApi from \"../constante/apiUrl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport PlacesAutocomplete, {geocodeByAddress, getLatLng} from \"react-places-autocomplete\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\n\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: 300,\r\n            maxWidth: 50\r\n        }\r\n    },\r\n    // Show dropdow at bottom of select\r\n    getContentAnchorEl: null,\r\n    anchorOrigin: {\r\n        vertical: \"bottom\",\r\n        horizontal: \"left\"\r\n    }\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    btn: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        width: '100%',\r\n        height: '0px',\r\n    },\r\n    btnSubmit: {\r\n        padding: theme.spacing(1),\r\n        color: \"#000\",\r\n        width: 140,\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing.unit,\r\n        minWidth: 120,\r\n        maxWidth: 300\r\n    },\r\n    formControlPass: {\r\n        width:300,\r\n        margin: theme.spacing.unit,\r\n    },\r\n    grid: {\r\n        marginTop:'10px'\r\n    }\r\n}));\r\n\r\nfunction UserProfile() {\r\n    const[pageId, setPageId]= useState(0);\r\n    const[dataSaved, setDataSaved]= useState(false);\r\n    const [alert, setAlert] = useState(\"\");    //message d'alerte au niveau du mot de passe\r\n    const [alertMail, setAlertMail] = useState(\"\");    //message d'alerte au niveau de l'adresse mail\r\n    const [alertOrganization, setAlertOrganization] = useState(\"\");    //message d'alerte au niveau de l'organisation\r\n    const [submited, setSubmited] = useState(false);\r\n\r\n    const[userPro, setUserPro]= useState(\"\");\r\n    const[nomOrga, setNomOrga]= useState(\"\");\r\n    const[nomFournisseur, setNomFournisseur]= useState(\"\");\r\n    const[adresse, setAdresse]= useState(\"\");\r\n    const [coordinates, setCoordinates] = React.useState({ lat: null, lng: null });\r\n    const [validAdresse, setValidAdresse] = useState(true);\r\n    const[typesOrga, setTypesOrga]= useState();\r\n    const[typesOffres, setTypesOffres]= useState();\r\n    const [estArtisan, setEstArtisan] = useState(false);\r\n    const [estMagasinSpe, setEstMagasinSpe] = useState(false);\r\n    const [estMagasinGen, setEstMagasinGen] = useState(false);\r\n    const [estAsso, setEstAsso] = useState(false);\r\n    const [estMarque, setEstMarque] = useState(false);\r\n    const [estAlim, setEstAlim] = useState(false);\r\n    const [estAccess, setEstAccess] = useState(false);\r\n    const [nomsServicesCHoisis, setNomsServicesCHoisis] = useState([]);\r\n    const nomsServices = ['Cession d\\'animaux(don, échange, vente)'];\r\n    const[nomUser, setNomUser]= useState(\"\");\r\n    const[phone, setPhone]= useState(\"\");\r\n    const[email, setEmail]= useState(\"\");\r\n    const[oldPassword, setOldPassword]= useState(\"\");\r\n    const[password1, setPassword1]= useState(\"\");\r\n    const[password2, setPassword2]= useState(\"\");\r\n\r\n    const classes = useStyles();\r\n\r\n    function getUserProfileData() {\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query{​​​​​​​\r\n                        userPro(id:\"${localStorage.getItem('userId')}\"){​​​​​​​\r\n                            organization{\r\n                                name\r\n                                supplier{\r\n                                    name\r\n                                }\r\n                                postalAddress{\r\n                                    street\r\n                                    geoLocation{\r\n                                        latitude\r\n                                        longitude\r\n                                    }\r\n                                }\r\n                            }\r\n                            user{\r\n                                name\r\n                                email\r\n                                phoneNumber\r\n                            }\r\n                        }​​​​​​​\r\n                    }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                setUserPro(result.data.userPro);\r\n                setNomOrga(result.data.userPro.organization.name);\r\n                setAdresse(result.data.userPro.organization.postalAddress.street);\r\n                setCoordinates({lat: result.data.userPro.organization.postalAddress.geoLocation.latitude, lng: result.data.userPro.organization.postalAddress.geoLocation.longitude});\r\n                setNomFournisseur(result.data.userPro.organization.supplier.name);\r\n                setNomUser(result.data.userPro.user.name);\r\n                setPhone(result.data.userPro.user.phoneNumber);\r\n                setEmail(result.data.userPro.user.email);;\r\n                fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        query: `\r\n                            query{​​​​​​​\r\n                                getTypesOrganizationByName(name: \"${result.data.userPro.organization.name}\")\r\n                            }`,\r\n                    }),\r\n                })\r\n                    .then((res) => res.json())\r\n                    .then(function (result) {\r\n                        result.data.getTypesOrganizationByName.forEach(type => {\r\n                            if (type === \"Artisan\"){\r\n                                setEstArtisan(true)\r\n                            }\r\n                            if (type === \"Magasin spécialisé\"){\r\n                                setEstMagasinSpe(true)\r\n                            }\r\n                            if (type === \"Magasin généraliste\"){\r\n                                setEstMagasinGen(true)\r\n                            }\r\n                            if (type === \"Association\"){\r\n                                setEstAsso(true)\r\n                            }\r\n                            if (type === \"Marque\"){\r\n                                setEstMarque(true)\r\n                            }\r\n                        });\r\n                        setTypesOrga(result.data.getTypesOrganizationByName.join(', '))\r\n                    });\r\n                    fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({\r\n                            query: `\r\n                                query{​​​​​​​\r\n                                    getOffersOrganizationByName(name: \"${result.data.userPro.organization.name}\")\r\n                                }`,\r\n                        }),\r\n                    })\r\n                    .then((res) => res.json())\r\n                    .then(function (result) {\r\n                        result.data.getOffersOrganizationByName.forEach(type => {\r\n                            if (type === \"Alimentation\"){\r\n                                setEstAlim(true)\r\n                            }\r\n                            if (type === \"Accessoire\"){\r\n                                setEstAccess(true)\r\n                            }\r\n                        });\r\n                        setTypesOffres(result.data.getOffersOrganizationByName.join(', '))\r\n                    })\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUserProfileData();\r\n    }, []);\r\n\r\n    const handleChange = (event) => {\r\n        setNomsServicesCHoisis(event.target.value);\r\n    };\r\n\r\n    const handleAddressSelect = async value => {\r\n        const results = await geocodeByAddress(value);\r\n        const latLng = await getLatLng(results[0]);\r\n        setAdresse(value);\r\n        setCoordinates(latLng);\r\n        setValidAdresse(true)\r\n    };\r\n\r\n    function checkAvailableOrganization(orga){\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query{​​​​​​​\r\n                        existsOrganizationByName(name:\"${orga}\")​​​​​​​\r\n                    }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                if (result.data.existsOrganizationByName === false) {\r\n                    setAlertOrganization(\"\");\r\n                } else {\r\n                    setAlertOrganization(\"Nom d'organisation déjà utilisé!\");\r\n                }\r\n            });\r\n    }\r\n    function checkAvailableAdress(mail){\r\n        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query{​​​​​​​\r\n                        getMail(mail:\"${mail}\"){​​​​​​​\r\n                            id\r\n                        }​​​​​​​\r\n                    }`,\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                if (result.data.getMail !== null) {\r\n                    setAlertMail(\"Email déjà utilisé!\");\r\n                }else {\r\n                    setAlertMail(\"\");\r\n                }\r\n            });\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n            if(validAdresse === true && alertOrganization===\"\" && alertMail===\"\") {\r\n                setSubmited(true);\r\n                let typesOrga = [];\r\n                if (estArtisan === true) {\r\n                    typesOrga.push(\"Artisan\")\r\n                }\r\n                if (estMagasinSpe === true) {\r\n                    typesOrga.push(\"Magasin spécialisé\")\r\n                }\r\n                if (estMagasinGen === true) {\r\n                    typesOrga.push(\"Magasin généraliste\")\r\n                }\r\n                if (estAsso === true) {\r\n                    typesOrga.push(\"Association\")\r\n                }\r\n                if (estMarque === true) {\r\n                    typesOrga.push(\"Marque\")\r\n                }\r\n                let typeOffre = [];\r\n                if (estAlim === true) {\r\n                    typeOffre.push(\"Alimentation\")\r\n                }\r\n                if (estAccess === true) {\r\n                    typeOffre.push(\"Accessoire\")\r\n                }\r\n                typeOffre.concat(nomsServicesCHoisis);\r\n                fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        query: `\r\n                        mutation($userProId: String, $organization: OrganizationInput!, $adress:AdressInput!, $user:UserIntput!){\r\n                            updateUserPro(userProId: $userProId, organization: $organization,  adress:$adress, user:$user)\r\n                            {​​​​​​\r\n                                id\r\n                                organization{\r\n                                    name\r\n                                }\r\n                                user{\r\n                                    name\r\n                                }\r\n                            }​​​​​​​\r\n                        }`,\r\n                        variables: {\r\n                            \"userProId\": localStorage.getItem(\"userId\"),\r\n                            \"organization\": {\r\n                                \"name\": nomOrga,\r\n                                \"orgas\": typesOrga,\r\n                                \"offers\": typeOffre\r\n                            },\r\n                            \"adress\": {\r\n                                \"street\": adresse,\r\n                                \"geoLocation\": {\r\n                                    \"latitude\": coordinates.lat,\r\n                                    \"longitude\": coordinates.lng\r\n                                }\r\n                            },\r\n                            \"user\": {\r\n                                \"name\": nomUser,\r\n                                \"email\": email,\r\n                                \"phone\": phone,\r\n                                \"password\": oldPassword\r\n                            }\r\n                        },\r\n                    }),\r\n                })\r\n                    .then((res) => res.json())\r\n                    .then(function (result) {\r\n                        if (result.data.saveUserPro !== []) {\r\n                            setDataSaved(true)\r\n                        }\r\n                    });\r\n            }\r\n\r\n    }\r\n    function handleSubmitPassword(event){\r\n        event.preventDefault();\r\n        if (password1 === password2 && password1.length >= 5) {\r\n            setAlert(\"\");\r\n            fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    query: `\r\n                        query{\r\n                            matchPassword(password:\"${oldPassword}\", userProId: \"${localStorage.getItem('userId')}\")\r\n                        }​​​​\r\n                    `,\r\n                }),\r\n            })\r\n            .then((res) => res.json())\r\n            .then(function (result) {\r\n                if(result.data.matchPassword === true){\r\n                    setDataSaved(true)\r\n\r\n                    if(validAdresse === true && alertOrganization===\"\" && alertMail===\"\") {\r\n                        setSubmited(true);\r\n                        let typesOrga = [];\r\n                        if (estArtisan === true) {\r\n                            typesOrga.push(\"Artisan\")\r\n                        }\r\n                        if (estMagasinSpe === true) {\r\n                            typesOrga.push(\"Magasin spécialisé\")\r\n                        }\r\n                        if (estMagasinGen === true) {\r\n                            typesOrga.push(\"Magasin généraliste\")\r\n                        }\r\n                        if (estAsso === true) {\r\n                            typesOrga.push(\"Association\")\r\n                        }\r\n                        if (estMarque === true) {\r\n                            typesOrga.push(\"Marque\")\r\n                        }\r\n                        let typeOffre = [];\r\n                        if (estAlim === true) {\r\n                            typeOffre.push(\"Alimentation\")\r\n                        }\r\n                        if (estAccess === true) {\r\n                            typeOffre.push(\"Accessoire\")\r\n                        }\r\n                        typeOffre.concat(nomsServicesCHoisis);\r\n                        fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify({\r\n                                query: `\r\n                        mutation($userProId: String, $organization: OrganizationInput!, $adress:AdressInput!, $user:UserIntput!){\r\n                            updateUserPro(userProId: $userProId, organization: $organization,  adress:$adress, user:$user)\r\n                            {​​​​​​\r\n                                id\r\n                                organization{\r\n                                    name\r\n                                }\r\n                                user{\r\n                                    name\r\n                                }\r\n                            }​​​​​​​\r\n                        }`,\r\n                                variables: {\r\n                                    \"userProId\": localStorage.getItem(\"userId\"),\r\n                                    \"organization\": {\r\n                                        \"name\": nomOrga,\r\n                                        \"orgas\": typesOrga,\r\n                                        \"offers\": typeOffre\r\n                                    },\r\n                                    \"adress\": {\r\n                                        \"street\": adresse,\r\n                                        \"geoLocation\": {\r\n                                            \"latitude\": coordinates.lat,\r\n                                            \"longitude\": coordinates.lng\r\n                                        }\r\n                                    },\r\n                                    \"user\": {\r\n                                        \"name\": nomUser,\r\n                                        \"email\": email,\r\n                                        \"phone\": phone,\r\n                                        \"password\": password1\r\n                                    }\r\n                                },\r\n                            }),\r\n                        })\r\n                            .then((res) => res.json())\r\n                            .then(function (result) {\r\n                                if (result.data.saveUserPro !== []) {\r\n                                    setDataSaved(true)\r\n                                }\r\n                            });\r\n                    }\r\n\r\n\r\n\r\n                }else{\r\n                    setAlert(\"Ancien mot de passe incorrect\")\r\n                }\r\n            });\r\n\r\n        } else if (password1.length < 5) {\r\n            setAlert(\"La longueur des mots de passe doit excéder 5 caractères\")\r\n        } else if (password1 !== password2) {\r\n            setAlert(\"Mots de passe différents.\")\r\n        }\r\n    }\r\n    function getPageContent() {\r\n        switch (pageId) {\r\n            case 0:\r\n                return <Box mt={10}>\r\n                    {\r\n                        userPro ?\r\n                        <div>\r\n                            <Container>\r\n                                <h3>Organisation</h3>\r\n                                <Box ml={3}>\r\n                                    <Grid container className={classes.grid} >\r\n                                        <Grid item xs={6} sm={3}>\r\n                                            Nom\r\n                                        </Grid>\r\n                                        <Grid item xs={6} sm={3}>\r\n                                            {userPro.organization.name}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid container className={classes.grid}>\r\n                                        <Grid item xs={6} sm={3}>\r\n                                            Types d'organisation\r\n                                        </Grid>\r\n                                        <Grid item xs={6} sm={3}>\r\n                                            {typesOrga}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid container className={classes.grid}>\r\n                                        <Grid item xs={6} sm={3}>\r\n                                            Offres\r\n                                        </Grid>\r\n                                        <Grid item xs={6} sm={3}>\r\n                                            {typesOffres}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid container className={classes.grid}>\r\n                                        <Grid item xs={6} sm={3}>\r\n                                            Adresse Postale\r\n                                        </Grid>\r\n                                        <Grid item xs={6} sm={6}>\r\n                                            {userPro.organization.postalAddress.street}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Box>\r\n                                <h3>Utilisateur</h3>\r\n                                <Box ml={3}>\r\n                                    <Grid container className={classes.grid}>\r\n                                        <Grid item xs={6} sm={3}>\r\n                                            Nom\r\n                                        </Grid>\r\n                                        <Grid item xs={6} sm={3}>\r\n                                            {userPro.user.name}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid container className={classes.grid}>\r\n                                        <Grid item xs={6} sm={3}>\r\n                                            Téléphone\r\n                                        </Grid>\r\n                                        <Grid item xs={6} sm={3}>\r\n                                            {userPro.user.phoneNumber}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid container className={classes.grid}>\r\n                                        <Grid item xs={6} sm={3}>\r\n                                            Email\r\n                                        </Grid>\r\n                                        <Grid item xs={6} sm={3}>\r\n                                            {userPro.user.email}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Box>\r\n                            </Container>\r\n                        </div> : null\r\n                    }\r\n                </Box>;\r\n                break;\r\n            case 1:\r\n                return <Box mt={10}>\r\n                    <form className={classes.form} onSubmit={handleSubmit}>\r\n                        {\r\n                            <Snackbar open={dataSaved} autoHideDuration={6000} anchorOrigin={{vertical: \"top\", horizontal: \"center\"}}\r\n                                      onClose={() => setDataSaved(false)}>\r\n                                <Alert severity=\"success\">Informations enrengistrées</Alert>\r\n                            </Snackbar>\r\n                        }\r\n                        <Grid container spacing={1}>\r\n                            <Grid container item xs={12} spacing={2}>\r\n                                <Grid item xs={12} sm={3}>\r\n                                    <FormControl variant=\"outlined\" className={classes.formControl} required={true}\r\n                                                 spacing={3}>\r\n                                        <TextField\r\n                                        className={classes.formControl}\r\n                                        id=\"nomOrga\"\r\n                                        label=\"Nom de l'enseigne\"\r\n                                        value={nomOrga}\r\n                                        required\r\n                                        onChange={function(e){\r\n                                            setNomOrga(e.target.value);\r\n                                            checkAvailableOrganization(e.target.value);\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={3}>\r\n                                    <FormControl component=\"fieldset\" className={classes.formControl} required={true}>\r\n                                        <FormLabel component=\"legend\">Type de l'enseigne</FormLabel>\r\n                                        <FormGroup>\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={estArtisan}\r\n                                                                   onChange={e => (setEstArtisan(e.target.checked))}\r\n                                                                   name=\"estArtisan\" color=\"default\"/>}\r\n                                                label=\"Artisan\"\r\n                                            />\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={estMagasinSpe}\r\n                                                                   onChange={e => (setEstMagasinSpe(e.target.checked))}\r\n                                                                   name=\"estMagasinSpe\" color=\"default\"/>}\r\n                                                label=\"Magasin spécialisé\"\r\n                                            />\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={estMagasinGen}\r\n                                                                   onChange={e => (setEstMagasinGen(e.target.checked))}\r\n                                                                   name=\"estMagasinGen\" color=\"default\"/>}\r\n                                                label=\"Magasin généraliste\"\r\n                                            />\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={estAsso}\r\n                                                                   onChange={e => (setEstAsso(e.target.checked))} name=\"estAsso\"\r\n                                                                   color=\"default\"/>}\r\n                                                label=\"Association\"\r\n                                            />\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={estMarque}\r\n                                                                   onChange={e => (setEstMarque(e.target.checked))}\r\n                                                                   name=\"estMarque\" color=\"default\"/>}\r\n                                                label=\"Marque\"\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </FormControl>\r\n                                    <FormControl required component=\"fieldset\" className={classes.formControl}>\r\n                                        <FormLabel component=\"legend\">Type de l'offre</FormLabel>\r\n                                        <FormGroup>\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={estAlim}\r\n                                                                   onChange={e => (setEstAlim(e.target.checked))}\r\n                                                                   name=\"Alimentation\" color=\"default\"/>}\r\n                                                label=\"Alimentation\"\r\n                                            />\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={estAccess}\r\n                                                                   onChange={e => (setEstAccess(e.target.checked))}\r\n                                                                   name=\"Accessoire\" color=\"default\"/>}\r\n                                                label=\"Accessoire\"\r\n                                            />\r\n                                            <FormControl >\r\n                                                <InputLabel>Services</InputLabel>\r\n                                                <Select\r\n                                                    multiple\r\n                                                    value={nomsServicesCHoisis}\r\n                                                    onChange={handleChange}\r\n                                                    input={<Input id=\"select-multiple-checkbox\"/>}\r\n                                                    renderValue={selected => selected.join(\", \")}\r\n                                                    MenuProps={MenuProps}\r\n                                                >\r\n                                                    {nomsServices.map((name) => (\r\n                                                        <MenuItem key={name} value={name}>\r\n                                                            <Checkbox checked={nomsServicesCHoisis.indexOf(name) > -1} />\r\n                                                            <ListItemText primary={name}/>\r\n                                                        </MenuItem>\r\n                                                    ))}\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </FormGroup>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={3}>\r\n                                    <PlacesAutocomplete\r\n                                        value={adresse}\r\n                                        onChange={setAdresse}\r\n                                        onSelect={handleAddressSelect}\r\n                                    >\r\n                                        {({getInputProps, suggestions, getSuggestionItemProps, loading}) => (\r\n                                            <div>\r\n                                                <TextField variant=\"outlined\" onChange={() => setValidAdresse(false)} className={classes.formControl} required  {...getInputProps({\r\n                                                    label: \"Adresse\",\r\n                                                    placeholder: \"Entrez l'adresse\",\r\n                                                })} />\r\n                                                <div>\r\n                                                    {loading ? <div>Chargement...</div> : null}\r\n\r\n                                                    {suggestions.map((suggestion, i) => {\r\n                                                        const style = {\r\n                                                            backgroundColor: suggestion.active ? colors.brown : \"#fafafa\"\r\n                                                        };\r\n                                                        return (\r\n                                                            <div key={i} {...getSuggestionItemProps(suggestion, {style})}>\r\n                                                                {suggestion.description}\r\n                                                            </div>\r\n                                                        );\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </PlacesAutocomplete>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={3}>\r\n                                    <FormControl variant=\"outlined\" className={classes.formControl} required={true}\r\n                                                 spacing={3}>\r\n                                        <TextField\r\n                                            className={classes.formControl}\r\n                                            id=\"nomUser\"\r\n                                            label=\"Nom d'utilisateur\"\r\n                                            required\r\n                                            value={nomUser}\r\n                                            onChange={e => (setNomUser(e.target.value))}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </FormControl>\r\n                                    <FormControl variant=\"outlined\" className={classes.formControl} required={true}\r\n                                                 spacing={3}>\r\n                                        <TextField\r\n                                            className={classes.formControl}\r\n                                            id=\"idRace\"\r\n                                            label=\"Email\"\r\n                                            required\r\n                                            value={email}\r\n                                            type=\"email\"\r\n                                            onChange={function(e){\r\n                                                setEmail(e.target.value);\r\n                                                checkAvailableAdress(e.target.value);\r\n                                            }}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </FormControl>\r\n                                    <FormControl variant=\"outlined\" className={classes.formControl} required={true}\r\n                                                 spacing={3}>\r\n                                        <TextField\r\n                                            className={classes.formControl}\r\n                                            id=\"phone\"\r\n                                            label=\"Téléphone\"\r\n                                            type=\"tel\"\r\n                                            required\r\n                                            value={phone}\r\n                                            onChange={e => (setPhone(e.target.value))}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container item xs={12} spacing={2}>\r\n                                <Grid item xs={12} sm={3}>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={3}>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={3}>\r\n                                {alertMail ? <Alert severity=\"error\" fullwidth>{alertMail}</Alert> : <></>}\r\n                                {alertOrganization ? <Alert severity=\"error\">{alertOrganization}</Alert> : <></>}\r\n                                {\r\n                                    validAdresse === false && submited === true ?\r\n                                        <Alert severity=\"error\" >Adresse non complétée</Alert> : <></>\r\n                                }\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={3}>\r\n                                    <Button type=\"submit\" variant=\"contained\" style={{backgroundColor: colors.red}}\r\n                                            fullwidth className={classes.btnSubmit}>\r\n                                        Sauvegarder\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Box>;\r\n                break;\r\n            case 2:\r\n                return <Box mt={10}>\r\n                    <form className={classes.form} onSubmit={handleSubmitPassword}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid container item xs={12} spacing={2}>\r\n                                <Grid item lg={4} md={6} sm={12}>\r\n                                    <FormControl variant=\"outlined\" className={classes.formControlPass} required={true}\r\n                                                 spacing={3} xs={6}>\r\n                                        <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"oldPass\" sm={12} md={12} xs={12}\r\n                                                   id=\"oldPswd\" label=\"Ancien mot de passe\" onChange={e => setOldPassword(e.target.value)}\r\n                                                   value={oldPassword}/>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item lg={6} md={6} sm={12}>\r\n                                    <FormControl variant=\"outlined\" className={classes.formControlPass} required={true} spacing={3} >\r\n                                        <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass1\"\r\n                                                   id=\"password1\" label=\"Nouveau mot de passe\" onChange={e => setPassword1(e.target.value)}\r\n                                                   value={password1}/>\r\n                                    </FormControl>\r\n                                    <FormControl variant=\"outlined\" className={classes.formControlPass} required={true} spacing={3} xs={6}>\r\n                                        <TextField variant=\"outlined\" margin=\"normal\" required fullWidth type=\"password\" name=\"pass2\"\r\n                                                   id=\"password2\" label=\"Confirmer le nouveau mot de passe\" onChange={e => setPassword2(e.target.value)}\r\n                                                   value={password2}/>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container item xs={12} spacing={2}>\r\n                                <Grid item xs={12} sm={3}>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={3}>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={3}>\r\n                                    {alert ? <Alert severity=\"error\">{alert}</Alert> : <></>}\r\n                                    {alertMail ? <Alert severity=\"error\" fullwidth>{alertMail}</Alert> : <></>}\r\n                                    {alertOrganization ? <Alert severity=\"error\">{alertOrganization}</Alert> : <></>}\r\n                                    {\r\n                                        validAdresse === false && submited === true ?\r\n                                            <Alert severity=\"error\" >Adresse non complétée</Alert> : <></>\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={3}>\r\n                                    <Button type=\"submit\" variant=\"contained\" style={{backgroundColor: colors.red}}\r\n                                            className={classes.btnSubmit}>\r\n                                        Sauvegarder\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Snackbar open={dataSaved} autoHideDuration={6000} anchorOrigin={{vertical: \"top\", horizontal: \"center\"}}\r\n                                  onClose={() => setDataSaved(false)}>\r\n                            <Alert severity=\"success\">Informations enrengistrées</Alert>\r\n                        </Snackbar>\r\n                    </form>\r\n                </Box>;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Container>\r\n                <Title name={\"Profile\"}/>\r\n                <Grid container spacing={5} justify=\"center\">\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button className={classes.btn} variant=\"contained\"\r\n                                style={pageId === 0 ? {backgroundColor: colors.brown} : {backgroundColor: colors.grey}}\r\n                                onClick={function(e){\r\n                                    getUserProfileData()\r\n                                    setPageId(0)\r\n                                }}>Mon profil</Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button className={classes.btn} variant=\"contained\"\r\n                                style={pageId === 1 ? {backgroundColor: colors.brown} : {backgroundColor: colors.grey}}\r\n                                onClick={function(e) {\r\n                                    getUserProfileData()\r\n                                    setPageId(1)\r\n                                }}>Modifier mon profil</Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Button className={classes.btn} variant=\"contained\"\r\n                                style={pageId === 2 ? {backgroundColor: colors.brown} : {backgroundColor: colors.grey}}\r\n                                onClick={function(e) {\r\n                                    getUserProfileData()\r\n                                    setPageId(2)\r\n                                }}>Modifier mon mot de passe</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Box mt={5}>\r\n                    {getPageContent()}\r\n                </Box>\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default UserProfile\r\n","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\themes\\colors.js",[],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\constante\\apiUrl.js",["175"],"export default {\r\n    misterCoockyApi:'https://pro-server.mister-coocky.fr',\r\n}\r\n","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\components\\index.js",[],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\components\\CardComponent.js",[],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\components\\PersistantDrawer.js",[],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\components\\Title.js",[],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\components\\Header.js",["176","177","178"],"import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport {colors} from '../themes/colors';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport misterCoockyApi from \"../constante/apiUrl\";\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport {PersistentDrawerLeft} from '.';\r\n\r\nconst drawerWidth = 240;\r\n\r\n\r\n/**\r\n * Permet de gérer le menu déroulant\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction HideOnScroll(props) {\r\n    const { children, window } = props;\r\n    const trigger = useScrollTrigger({ target: window ? window() : undefined });\r\n    return (\r\n        <Slide appear={false} direction=\"down\" in={!trigger}>\r\n            {children}\r\n        </Slide>\r\n    );\r\n}\r\nHideOnScroll.propTypes = {\r\n    window: PropTypes.func,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        backgroundColor: colors.brown,\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n}));\r\n\r\n\r\n/***\r\n * Header principal de l'application\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nexport default function Header(props) {\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const[userName, setUserName] = useState(null);\r\n    const[admin, setAdmin] = useState(false);\r\n\r\n\r\n    /**\r\n     * Récupération du userpro\r\n     */\r\n    useEffect(() => {\r\n        //si utilisateur non connecté\r\n        if(localStorage.getItem('userId') === null && localStorage.getItem('organizationId') === null && localStorage.getItem('supplierId') === null){\r\n            window.location.href = '/signIn';\r\n        }else{\r\n            fetch(`${misterCoockyApi.misterCoockyApi}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    query: `\r\n                    query{​​​​​​​\r\n                        userPro(id:\"${localStorage.getItem('userId')}\"){​​​​​​​\r\n                            id\r\n                            user{\r\n                                name\r\n                                role{\r\n                                    name\r\n                                }\r\n                            }\r\n                            organization{\r\n                                name\r\n                            }\r\n                        }​​​​​​​\r\n                    }`,\r\n                }),\r\n            })\r\n                .then((res) => res.json())\r\n                .then((json) => {\r\n                    if(json.data.userPro){\r\n                        setAdmin(json.data.userPro.user.role?.name);\r\n                        setUserName(json.data.userPro.organization.name)\r\n                    }\r\n                })\r\n        }\r\n    }, []);\r\n\r\n    /**\r\n     * lors du clic du menu déroulant\r\n     * @param event\r\n     */\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    /**\r\n     * Lors du clic sur déconnexion\r\n     */\r\n    const handleDisconnect= () => {\r\n        localStorage.setItem('userId', null);\r\n        localStorage.setItem('organizationId', null);\r\n        localStorage.setItem('supplierId', null);\r\n        window.location.href = '/signIn';\r\n    };\r\n    const handleProfile = () => {\r\n        window.location.href = '/userProfile';\r\n    };\r\n\r\n    /**\r\n     * lors de la fermeture du menu déroulant\r\n     */\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\" style={{backgroundColor: colors.brown}}>\r\n                    <Toolbar>\r\n                        <PersistentDrawerLeft/>\r\n                        <Typography variant=\"h6\" className={classes.title}  onClick={() => {admin === \"ROLE_ADMIN\"? window.location.href = '/homeAdmin' : window.location.href = '/home'}} style={{cursor:'pointer'}}>\r\n                            Mister Coocky\r\n                        </Typography>\r\n                        {userName !== null ?\r\n                            <div>\r\n                            <Button style={{color: colors.white, fontSize:'16px'}} endIcon={<Icon><ArrowDropDownIcon/></Icon>} onClick={handleClick}>\r\n                                <span style={{marginTop:'4px'}}>{userName}{admin === \"ROLE_ADMIN\"? \" [Admin]\":null}</span>\r\n                            </Button>\r\n\r\n                            <Menu\r\n                                id=\"simple-menu\"\r\n                                anchorEl={anchorEl}\r\n                                keepMounted\r\n                                open={Boolean(anchorEl)}\r\n                                onClose={handleClose}\r\n                            >\r\n                                <MenuItem onClick={handleProfile}>Profil</MenuItem>\r\n                                <MenuItem onClick={handleDisconnect}>Se déconnecter</MenuItem>\r\n                            </Menu>\r\n                            </div>\r\n                                : null\r\n                        }\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n","D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\Register.js",["179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206"],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\Components\\FormRegister.js",[],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\Components\\From1.js",[],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\hooks\\Styles.js",[],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\hooks\\useForm.js",["207","208","209","210","211","212","213","214","215","216"],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\Components\\From2.js",["217"],"D:\\All - Projects\\PROJECTS - Gitkraken\\Project-12 - BigNova PetsAnimals\\animals-pets\\src\\pages\\Register\\Components\\Error.js",[],{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","severity":1,"message":"223","line":23,"column":7,"nodeType":"224","messageId":"225","endLine":23,"endColumn":16},{"ruleId":"222","severity":1,"message":"226","line":73,"column":40,"nodeType":"224","messageId":"225","endLine":73,"endColumn":69},{"ruleId":"227","severity":1,"message":"228","line":184,"column":8,"nodeType":"229","endLine":184,"endColumn":10,"suggestions":"230"},{"ruleId":"231","severity":1,"message":"232","line":367,"column":9,"nodeType":"233","messageId":"234","endLine":633,"endColumn":10},{"ruleId":"235","severity":1,"message":"236","line":380,"column":45,"nodeType":"237","endLine":380,"endColumn":85},{"ruleId":"238","severity":1,"message":"239","line":563,"column":17,"nodeType":"240","messageId":"241","endLine":563,"endColumn":23},{"ruleId":"238","severity":1,"message":"239","line":611,"column":17,"nodeType":"240","messageId":"241","endLine":611,"endColumn":23},{"ruleId":"238","severity":1,"message":"239","line":632,"column":17,"nodeType":"240","messageId":"241","endLine":632,"endColumn":23},{"ruleId":"222","severity":1,"message":"242","line":2,"column":16,"nodeType":"224","messageId":"225","endLine":2,"endColumn":25},{"ruleId":"222","severity":1,"message":"243","line":2,"column":27,"nodeType":"224","messageId":"225","endLine":2,"endColumn":35},{"ruleId":"222","severity":1,"message":"244","line":8,"column":8,"nodeType":"224","messageId":"225","endLine":8,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":111,"column":32,"nodeType":"237","endLine":111,"endColumn":63},{"ruleId":"227","severity":1,"message":"245","line":197,"column":8,"nodeType":"229","endLine":197,"endColumn":10,"suggestions":"246"},{"ruleId":"247","severity":1,"message":"248","line":134,"column":44,"nodeType":"249","messageId":"250","endLine":134,"endColumn":46},{"ruleId":"247","severity":1,"message":"248","line":141,"column":36,"nodeType":"249","messageId":"250","endLine":141,"endColumn":38},{"ruleId":"222","severity":1,"message":"223","line":27,"column":7,"nodeType":"224","messageId":"225","endLine":27,"endColumn":16},{"ruleId":"222","severity":1,"message":"251","line":82,"column":32,"nodeType":"224","messageId":"225","endLine":82,"endColumn":53},{"ruleId":"227","severity":1,"message":"252","line":220,"column":8,"nodeType":"229","endLine":220,"endColumn":10,"suggestions":"253"},{"ruleId":"235","severity":1,"message":"236","line":478,"column":49,"nodeType":"237","endLine":478,"endColumn":81},{"ruleId":"247","severity":1,"message":"254","line":600,"column":85,"nodeType":"255","messageId":"256","endLine":600,"endColumn":94},{"ruleId":"222","severity":1,"message":"257","line":61,"column":22,"nodeType":"224","messageId":"225","endLine":61,"endColumn":33},{"ruleId":"247","severity":1,"message":"248","line":132,"column":44,"nodeType":"249","messageId":"250","endLine":132,"endColumn":46},{"ruleId":"247","severity":1,"message":"248","line":139,"column":36,"nodeType":"249","messageId":"250","endLine":139,"endColumn":38},{"ruleId":"227","severity":1,"message":"258","line":99,"column":8,"nodeType":"229","endLine":99,"endColumn":10,"suggestions":"259"},{"ruleId":"235","severity":1,"message":"236","line":82,"column":32,"nodeType":"237","endLine":82,"endColumn":64},{"ruleId":"227","severity":1,"message":"245","line":155,"column":8,"nodeType":"229","endLine":155,"endColumn":10,"suggestions":"260"},{"ruleId":"222","severity":1,"message":"261","line":37,"column":11,"nodeType":"224","messageId":"225","endLine":37,"endColumn":18},{"ruleId":"227","severity":1,"message":"245","line":131,"column":8,"nodeType":"229","endLine":131,"endColumn":10,"suggestions":"262"},{"ruleId":"222","severity":1,"message":"263","line":79,"column":11,"nodeType":"224","messageId":"225","endLine":79,"endColumn":25},{"ruleId":"231","severity":1,"message":"232","line":459,"column":9,"nodeType":"233","messageId":"234","endLine":786,"endColumn":10},{"ruleId":"238","severity":1,"message":"239","line":532,"column":17,"nodeType":"240","messageId":"241","endLine":532,"endColumn":23},{"ruleId":"238","severity":1,"message":"239","line":730,"column":17,"nodeType":"240","messageId":"241","endLine":730,"endColumn":23},{"ruleId":"238","severity":1,"message":"239","line":785,"column":17,"nodeType":"240","messageId":"241","endLine":785,"endColumn":23},{"ruleId":"264","severity":1,"message":"265","line":1,"column":1,"nodeType":"266","endLine":3,"endColumn":2},{"ruleId":"222","severity":1,"message":"267","line":78,"column":11,"nodeType":"224","messageId":"225","endLine":78,"endColumn":16},{"ruleId":"222","severity":1,"message":"268","line":79,"column":12,"nodeType":"224","messageId":"225","endLine":79,"endColumn":16},{"ruleId":"222","severity":1,"message":"269","line":79,"column":18,"nodeType":"224","messageId":"225","endLine":79,"endColumn":25},{"ruleId":"222","severity":1,"message":"270","line":12,"column":7,"nodeType":"224","messageId":"225","endLine":12,"endColumn":19},{"ruleId":"222","severity":1,"message":"271","line":17,"column":10,"nodeType":"224","messageId":"225","endLine":17,"endColumn":15},{"ruleId":"222","severity":1,"message":"272","line":18,"column":10,"nodeType":"224","messageId":"225","endLine":18,"endColumn":19},{"ruleId":"222","severity":1,"message":"273","line":18,"column":21,"nodeType":"224","messageId":"225","endLine":18,"endColumn":33},{"ruleId":"222","severity":1,"message":"274","line":19,"column":10,"nodeType":"224","messageId":"225","endLine":19,"endColumn":27},{"ruleId":"222","severity":1,"message":"275","line":21,"column":15,"nodeType":"224","messageId":"225","endLine":21,"endColumn":21},{"ruleId":"222","severity":1,"message":"276","line":22,"column":18,"nodeType":"224","messageId":"225","endLine":22,"endColumn":27},{"ruleId":"222","severity":1,"message":"277","line":23,"column":17,"nodeType":"224","messageId":"225","endLine":23,"endColumn":25},{"ruleId":"222","severity":1,"message":"278","line":24,"column":17,"nodeType":"224","messageId":"225","endLine":24,"endColumn":25},{"ruleId":"222","severity":1,"message":"279","line":26,"column":23,"nodeType":"224","messageId":"225","endLine":26,"endColumn":37},{"ruleId":"222","severity":1,"message":"280","line":27,"column":22,"nodeType":"224","messageId":"225","endLine":27,"endColumn":35},{"ruleId":"222","severity":1,"message":"281","line":28,"column":25,"nodeType":"224","messageId":"225","endLine":28,"endColumn":41},{"ruleId":"222","severity":1,"message":"282","line":29,"column":25,"nodeType":"224","messageId":"225","endLine":29,"endColumn":41},{"ruleId":"222","severity":1,"message":"283","line":30,"column":19,"nodeType":"224","messageId":"225","endLine":30,"endColumn":29},{"ruleId":"222","severity":1,"message":"284","line":31,"column":21,"nodeType":"224","messageId":"225","endLine":31,"endColumn":33},{"ruleId":"222","severity":1,"message":"285","line":32,"column":19,"nodeType":"224","messageId":"225","endLine":32,"endColumn":29},{"ruleId":"222","severity":1,"message":"286","line":33,"column":21,"nodeType":"224","messageId":"225","endLine":33,"endColumn":33},{"ruleId":"222","severity":1,"message":"287","line":34,"column":22,"nodeType":"224","messageId":"225","endLine":34,"endColumn":35},{"ruleId":"222","severity":1,"message":"288","line":37,"column":21,"nodeType":"224","messageId":"225","endLine":37,"endColumn":33},{"ruleId":"222","severity":1,"message":"289","line":38,"column":21,"nodeType":"224","messageId":"225","endLine":38,"endColumn":33},{"ruleId":"222","severity":1,"message":"290","line":41,"column":10,"nodeType":"224","messageId":"225","endLine":41,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":47,"column":9,"nodeType":"224","messageId":"225","endLine":47,"endColumn":18},{"ruleId":"222","severity":1,"message":"291","line":56,"column":9,"nodeType":"224","messageId":"225","endLine":56,"endColumn":21},{"ruleId":"222","severity":1,"message":"292","line":63,"column":12,"nodeType":"224","messageId":"225","endLine":63,"endColumn":20},{"ruleId":"222","severity":1,"message":"293","line":170,"column":9,"nodeType":"224","messageId":"225","endLine":170,"endColumn":28},{"ruleId":"222","severity":1,"message":"294","line":182,"column":12,"nodeType":"224","messageId":"225","endLine":182,"endColumn":24},{"ruleId":"238","severity":1,"message":"239","line":218,"column":9,"nodeType":"295","messageId":"241","endLine":219,"endColumn":15},{"ruleId":"296","severity":1,"message":"297","line":283,"column":1,"nodeType":"298","messageId":"299","endLine":287,"endColumn":2},{"ruleId":"222","severity":1,"message":"300","line":11,"column":9,"nodeType":"224","messageId":"225","endLine":11,"endColumn":25},{"ruleId":"301","severity":1,"message":"302","line":21,"column":5,"nodeType":"303","messageId":"304","endLine":21,"endColumn":8},{"ruleId":"222","severity":1,"message":"305","line":26,"column":7,"nodeType":"224","messageId":"225","endLine":26,"endColumn":17},{"ruleId":"222","severity":1,"message":"306","line":36,"column":9,"nodeType":"224","messageId":"225","endLine":36,"endColumn":17},{"ruleId":"222","severity":1,"message":"307","line":39,"column":9,"nodeType":"224","messageId":"225","endLine":39,"endColumn":23},{"ruleId":"222","severity":1,"message":"308","line":44,"column":9,"nodeType":"224","messageId":"225","endLine":44,"endColumn":23},{"ruleId":"222","severity":1,"message":"309","line":45,"column":9,"nodeType":"224","messageId":"225","endLine":45,"endColumn":23},{"ruleId":"222","severity":1,"message":"310","line":46,"column":9,"nodeType":"224","messageId":"225","endLine":46,"endColumn":21},{"ruleId":"222","severity":1,"message":"311","line":47,"column":9,"nodeType":"224","messageId":"225","endLine":47,"endColumn":22},{"ruleId":"312","severity":1,"message":"313","line":49,"column":5,"nodeType":"314","messageId":"304","endLine":49,"endColumn":453},{"ruleId":"222","severity":1,"message":"315","line":1,"column":119,"nodeType":"224","messageId":"225","endLine":1,"endColumn":128},"no-native-reassign",["316"],"no-negated-in-lhs",["317"],"no-unused-vars","'MenuProps' is assigned a value but never used.","Identifier","unusedVar","'setSelectedAnnouncementToEdit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedAnnouncementToEdit'. Either include it or remove the dependency array.","ArrayExpression",["318"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'useEffect' is defined but never used.","'useState' is defined but never used.","'misterCoockyApi' is defined but never used.","React Hook useEffect has a missing dependency: 'refreshList'. Either include it or remove the dependency array.",["319"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'setSelectedItemToEdit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'onCategorySelected' and 'selectedItemToEdit'. Either include them or remove the dependency array.",["320"],"Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","'setTextNext' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.organizationName'. Either include it or remove the dependency array.",["321"],["322"],"'classes' is assigned a value but never used.",["323"],"'nomFournisseur' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'theme' is assigned a value but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'nomsServices' is assigned a value but never used.","'alert' is assigned a value but never used.","'alertMail' is assigned a value but never used.","'setAlertMail' is assigned a value but never used.","'alertOrganization' is assigned a value but never used.","'setNom' is assigned a value but never used.","'setPrenom' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'setPhone' is assigned a value but never used.","'setCompanyName' is assigned a value but never used.","'setEstArtisan' is assigned a value but never used.","'setEstMagasinSpe' is assigned a value but never used.","'setEstMagasinGen' is assigned a value but never used.","'setEstAsso' is assigned a value but never used.","'setEstMarque' is assigned a value but never used.","'setEstAlim' is assigned a value but never used.","'setEstAccess' is assigned a value but never used.","'setEstCession' is assigned a value but never used.","'setPassword1' is assigned a value but never used.","'setPassword2' is assigned a value but never used.","'submited' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'sendForm' is defined but never used.","'handleAddressSelect' is assigned a value but never used.","'handleSubmit' is defined but never used.","ExpressionStatement","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'hadelChnageCheck' is assigned a value but never used.","no-dupe-keys","Duplicate key 'nom'.","ObjectExpression","unexpected","'configHead' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","'HandlehidePass' is assigned a value but never used.","'lowercaseRegEx' is assigned a value but never used.","'uppercaseRegEx' is assigned a value but never used.","'numericRegEx' is assigned a value but never used.","'specialsRegEx' is assigned a value but never used.","no-control-regex","Unexpected control character(s) in regular expression: \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e, \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e.","Literal","'TextField' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"326","fix":"332"},{"desc":"326","fix":"333"},"Update the dependencies array to be: [selectedAnnouncementToEdit]",{"range":"334","text":"335"},"Update the dependencies array to be: [refreshList]",{"range":"336","text":"337"},"Update the dependencies array to be: [onCategorySelected, selectedItemToEdit]",{"range":"338","text":"339"},"Update the dependencies array to be: [props.organizationName]",{"range":"340","text":"341"},{"range":"342","text":"337"},{"range":"343","text":"337"},[6846,6848],"[selectedAnnouncementToEdit]",[5904,5906],"[refreshList]",[7866,7868],"[onCategorySelected, selectedItemToEdit]",[3899,3901],"[props.organizationName]",[4827,4829],[4287,4289]]